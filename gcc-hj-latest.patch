A. Wilcox (1):
      runtime: add special handling for signal 34

Aaron Sawdey (11):
      Add insn types for fusion pairs
      Test cases for p10 fusion patterns
      combine patterns for add-add fusion
      Fix rs6000 p10 fusion patterns with old attr type names
      Fusion patterns for add-logical/logical-add
      Fix operand order to subf for p10 fusion.
      Fix p10 fusion test cases for -m32
      Do not check if SMS succeeds on powerpc
      Add needed earlyclobber to fusion patterns
      Fix p10 fusion regtests
      Do not enable pcrel-opt by default

Alan Modra (3):
      [POWER10] __morestack calls from pcrel code
      obstack.h __PTR_ALIGN vs. ubsan
      Make opcodes configure depend on bfd configure

Aldy Hernandez (182):
      Replace !irange::undefined_p checks with num_ranges > 0 for readability.
      Remove irange::varying_p checks from symbolic_p and constant_p.
      Keep VR_UNDEFINED and VR_VARYING in sync (speeds up evrp by 8.47%).
      Cache irange::num_pairs() for non-legacy code.
      Handle anti-ranges of MIN,MAX uniformly.
      Jump threader refactor.
      Refactor backward threader registry and profitability code into classes.
      Add GTY support for irange.
      Skip out on processing __builtin_clz when varying.
      Bail in bounds_of_var_in_loop if scev returns NULL.
      VARYING ranges of different sizes should not be equal.
      Fix selftest for targets where short and int are the same size.
      Common API for accessing global and on-demand ranges.
      Convert evrp pass to get_range_query.
      Convert Walloca pass to get_range_query.
      Convert remaining passes to get_range_query.
      Cleanup get_range_info
      Tweak Wstringop-overflow-55.c test.
      Move global range code to value-query.cc.
      Use get_range_query in simplify_conversion_using_ranges.
      Fix i686 bootstrap by temporarily disabling exporting of global ranges.
      Revert patch that disabled exporting of global ranges.
      Use known global ranges in export_global_ranges
      Implement generic expression evaluator for range_query.
      Replace uses of determine_value_range with range_of_expr.
      Implement a context aware pointer equivalency class for use in evrp.
      Adjust variable names and comments in value-query.*
      Use auto_vec in ssa_equiv_stack.
      Pick up global ranges in ranger after inlining.
      range-ops: (nonzero | X) is nonzero
      Add amacleod and aldyh as *vrp and ranger maintainers.
      Add debugging helpers for ranger.
      Cleanup clz and ctz code in range_of_builtin_call.
      Abstract out non_null adjustments in ranger.
      Allow non-null adjustments for pointers even when there is a known range.
      Use range_query object in array bounds class.
      Pass gimple context to array_bounds_checker.
      Abstract out conditional simplification out of execute_vrp.
      Pass relationship to methods calling generic fold_range.
      Implement operator_bitwise_xor::op1_op2_relation_effect.
      Implement basic block path solver.
      Abstract out (forward) jump threader state handling.
      Backwards jump threader rewrite with ranger.
      Replace evrp use in loop versioning with ranger.
      Mark gcc.dg/shrink-wrap-loop.c as XFAIL.
      Remove --param=threader-iterative.
      Mark path_range_query::dump as override.
      Remove legacy back threader.
      Improve support for IMAGPART_EXPR and REALPART_EXPR in ranger.
      Skip statements with no BB in ranger.
      Remove unnecessary include from tree-ssa-loop-ch.c
      Implement relation_oracle::debug.
      Improve path_range_query dumps.
      Use non-null knowledge in path_range_query.
      Add function name when dumping ranger contents.
      RAII class to change dump_file.
      Add debug helper for jump thread paths.
      Do not release state location until after path registry.
      Avoid using unavailable objects in jt_state.
      Dump reason why threads are being cancelled and abstract code.
      Improve backwards threader debugging dumps.
      Abstract PHI and forwarder block checks in jump threader.
      Do not assume loop header threading in backward threader.
      Implement POINTER_DIFF_EXPR entry in range-op.
      Clean up registering of paths in backwards threader.
      Add an unreachable_path_p method to path_range_query.
      Make the path solver's range_of_stmt() handle all statements.
      Rename forwarder_block_p in treading code to empty_block_with_phis_p.
      Disable threading through latches until after loop optimizations.
      Refactor jump_thread_path_registry.
      Move pointer_equiv_analyzer to new file.
      Adjust ssa-dom-thread-7.c on aarch64.
      Remove references to FSM threads.
      Make dump_ranger routines externally visible.
      Minor cleanups to forward threader.
      Allocate non_null_ref tables at creation.
      Do not query SCEV in range_of_phi unless dominators are available.
      Move postfold_gcond_edges into fur_source.
      path solver: Add relation support.
      path solver: Remove useless code.
      path solver: Add related SSAs to solvable set.
      path solver: Use ranger to solve unknowns.
      path solver: Use range_on_path_entry instead of looking at equivalences.
      Check for BB before calling register_outgoing_edges.
      Overhaul jump thread state in forward threader.
      Hoist edge calculations in precompute_relations.
      Remove dominator check in fold_using_range::range_of_phi.
      Avoid invalid loop transformations in jump threading registry.
      path solver: Avoid further lookups when range is defined in block.
      Convert some evrp uses in DOM to the range_query API.
      Use on-demand ranges in ssa_name_has_boolean_range before querying nonzero bits.
      Replace VRP threader with a hybrid forward threader.
      Remove old VRP jump threader code.
      Minor cleanups to solver.
      Control all jump threading passes with -fjump-threads.
      Return VARYING in range_on_path_entry if nothing found.
      Enable jump threading at -O1.
      Improve jump threading dump output.
      Use a separate TV_* timer for the VRP threader.
      Avoid CFG updates in VRP threader if nothing changed.
      [PR102501] Adjust jump threading testcases for ppc64* and others.
      Plug memory leak in hybrid_threader.
      Add gimple_ranger::debug.
      Plug possible snprintf overflow in lto-wrapper.
      Remove shadowed oracle field.
      [PR102546] X << Y being non-zero implies X is also non-zero.
      [PR102563] Do not clobber range in operator_lshift::op1_range.
      Remove static marker for range in alloca pass.
      Loosen loop crossing restriction in threader.
      Implement irange::debug()
      Grow non_null_ref bitmap when num_ssa_names increases.
      Add debug helpers for auto_bitmap.
      Do not call range_on_path_entry for SSAs defined within the path
      Add FIXME note to backward threader.
      Minor cleanups to backward threader.
      Cleanup --params for backward threader.
      Add ability to use full resolving path solver in the backward threader.
      Make signness explicit in tree-ssa/pr102736.c
      Allow fully resolving backward jump threading passes.
      Strlen pass refactoring.
      Clone correct pass in class pass_thread_jumps_full.
      Change threading comment before pass_ccp pass.
      Disallow loop rotation and loop header crossing in jump threaders.
      Restore --param=max-fsm-thread-length
      Remove unused back_threader_registry::m_threaded_paths.
      Remove superflous debugging messages from the threading registry.
      Remove unused back_threader destructor.
      Avoid threading circular paths.
      Revert the avoid threading circular paths commit.
      Disregard incoming equivalences to a path when defining a new one.
      Try to resolve paths in threader without looking further back.
      Attempt to resolve all incoming paths to a PHI.
      Avoid threading circular paths.
      [PR testsuite/102857] Tweak ssa-dom-thread-7.c for aarch64.
      Kill second order relations in the path solver.
      Reorder relation calculating code in the path solver.
      Kill known equivalences before a new assignment in the path solver.
      Make back_threader_registry inherit from back_jt_path_registry.
      Improve backward threading with switches.
      path relation oracle: Remove SSA's being killed from the equivalence list.
      Remove VRP threader passes in exchange for better threading pre-VRP.
      path oracle: Do not look back to the root oracle for killing defs.
      Move statics to threader pass class.
      Add debug counters to back threader.
      Convert arrays in ssa pointer_equiv_analyzer to auto_vec's.
      path solver: Only compute relations for imports.
      Avoid repeating calculations in threader.
      path solver: Prefer range_of_expr instead of range_on_edge.
      Cleanup back_threader::find_path_to_names.
      path oracle: Do not look at root oracle for killed defs.
      Remove VRP threader.
      path solver: Avoid recalculating ranges already in the cache.
      Convert strlen pass from evrp to ranger.
      Remove TDF_THREADING flag in favor of param.
      Cleanup path solver dumps.
      Document --param=threader-debug.
      Return NULL for maybe_register_path when unprofitable.
      Dump details of an attempt to register a jump threading path.
      Include PHI threading restrictions in backthreader diagnostics.
      Remove unused gimple-ssa-evr-analyze.h header file.
      path solver: Adjustments for use outside of the backward threader.
      Allow loop header copying when first iteration condition is known.
      Resolve entry loop condition for the edge remaining in the loop.
      Move import population from threader to path solver.
      Remove loop crossing restriction from the backward threader.
      Make ranger optional in path_range_query.
      path solver: Solve PHI imports first for ranges.
      path solver: Merge path_range_query constructors.
      path solver: Compute all PHI ranges simultaneously.
      Do not pass NULL to memset in ssa_global_cache.
      Remove gcc.dg/pr103229.c
      path solver: Default to global range if nothing found.
      Fix PHI ordering problems in the path solver.
      Drop tree overflow in irange setter.
      path solver: Compute ranges in path in gimple order.
      path solver: Move boolean import code to compute_imports.
      path solver: Revert computation of ranges in gimple order.
      Remove can_throw_non_call_exceptions special case from operator_div::wi_fold.
      path solver: Use only one ssa_global_cache.
      Reset relations when crossing backedges.
      Assert that backedges are available in path solver.
      ranger: fix small thinko in fur_list constructor

Aleksandra Pasek (1):
      [Ada] Add support for Aarch64 in System.Object_Reader

Alex Coplan (9):
      aarch64: Avoid duplicating bti j insns for jump tables [PR99988]
      early-remat.c: Fix new/delete mismatch [PR100230]
      arm: Fix ICEs with compare-and-swap and -march=armv8-m.base [PR99977]
      arm: Fix wrong code with MVE V2DImode loads and stores [PR99960]
      arm: Avoid emitting bogus CFA adjusts for CMSE nonsecure calls [PR99725]
      arm: Fix ICE with CMSE nonsecure calls on Armv8.1-M [PR100333]
      calls.c: Remove some dead code and target hooks
      testsuite: Fix typo in comment in aapcs64 test
      doc: Fix typos in match.pd documentation

Alexandre Oliva (47):
      fix asm-not pattern in dwarf2/inline5.c
      omit frame pointer in pr89676
      add ASM_OUTPUT_MAX_SKIP_ALIGN to i386.h
      merge ix86- and x86_64-*-* in config.gcc
      introduce try store by multiple pieces
      restore EH on x86-vx7r2
      retry zero-call-used-regs from zeroed regs
      adjust landing pads when changing main label
      fix typo in attr_fnspec::verify
      don't access cfun in dump_function_to_file
      retain debug stmt order when moving to successors
      fix latent bootstrap-debug issue
      zero-call-used-regs attr for ada
      [Ada] introduce stack scrub (strub) feature
      [Ada] reenable ada83 library unit renaming error
      hardened conditionals
      Implied compares in Ada Harded Conditionals documentation
      [Ada] Improve integration of strub with type systems
      harden conds: detach without decls
      [PR103028] test ifcvt trap_if seq more strictly after reload
      [PR103149] detach values through mem only if general regs won't do
      [PR103024,PR103530] support throwing compares and non-boolean types
      [PR103302] skip multi-word pre-move clobber during lra
      [PR103097] tolerate reg-stack cross-block malformed asms
      [PR100843] store by mult pieces: punt on max_len < min_len
      [PR100518] store by mult pieces: keep addr in Pmode
      Copy EH phi args for throwing hardened compares
      Cope with NULL dw_cfi_cfa_loc
      Add testcase from PR103845
      Revert commit r12-5852-g50e8b0c9bca6cdc57804f860ec5311b641753fbb
      Undo multi-word optional reloads correctly
      hardcmp: split before dispatch edge
      hardened conditionals: drop copied identifiers
      gcc.dg/weak/typeof-2: arm may use constant pool
      analyzer/strndup-1.c: skip on *-*-vxworks*
      Test for linking for arm/size-optimization-ieee-[123].c
      fixed-point/composite-type: add -Wno-array-parameter
      try multi-reg dest in default_zero_call_used_regs
      c++: Set loc on call even if result is discarded
      c++: Tolerate cdtors returning this in constexpr
      ppc: testsuite: require target effectively [PR104253]
      ppc: testsuite: PROMOTE_MODE fallout pr56605 [PR102146]
      ppc: testsuite: skip pr60203 on no ldbl128
      testsuite: vect: update unaligned message
      [PR105324] libstdc++: testsuite: pr105324 requires FP from_char
      libstdc++: ppc: conditionalize vsx-only simd intrinsics
      [PR105455] Set edge probabilities when hardening conditionals

Alistair Lee (1):
      aarch64: Replace some uses of GET_CODE with RTL predicate macros

Allan McRae (1):
      testsuite/70230 - fix failures with default SSP\

Andre Simoes Dias Vieira (3):
      aarch64: Enable aarch64_load to use UNSPEC_PRED_X loads
      [Patch][GCC][middle-end] - Generate FRINTZ for (double)(int) under -ffast-math on aarch64
      [Patch][GCC][AArch64] - Lower store and load neon builtins to gimple

Andre Vehreschild (6):
      Steve Kargl  <kargl@gcc.gnu.org>
      PR98301 Add missing changelog entries.
      fortran: Fix deref of optional in gen. code. [PR100337]
      Prevent malicious descriptor stacking for scalar components.
      Revert "Prevent malicious descriptor stacking for scalar components."
      Prevent malicious descriptor stacking for scalar components [V2].

Andre Vieira (20):
      vect: Use main loop's thresholds and VF to narrow upper_bound of epilogue
      [arm] Fix MVE addressing modes for VLDR[BHW] and VSTR[BHW]
      [vect] Consider outside costs earlier for epilogue loops
      [AArch64] Fix big-endian testisms introduced by NEON gimple lowering patch
      [AArch64] Fix TBAA information when lowering NEON loads and stores to gimple
      [AArch64] Fix bootstrap failure due to missing ATTRIBUTE_UNUSED
      [vect] Re-analyze all modes for epilogues
      [vect] PR103971, PR103977: Fix epilogue mode selection for autodetect only
      [vect] Add main vectorized loop unrolling
      vect: Fix epilogue mode skipping
      rtl-optimization/104498: Fix comparing symbol reference
      arm: MVE: Relax addressing modes for full loads and stores
      aarch64: Enable FP16 feature by default for Armv9
      aarch64: Add Neoverse-N2 tuning structs
      aarch64: Update reg-costs to differentiate between memmove costs
      aarch64: Add Demeter tuning structs
      aarch64: Update regmove costs for neoverse-v1 and neoverse-512tvb tunings
      aarch64: Update Neoverse N2 core definition
      aarch64: Implement determine_suggested_unroll_factor
      aarch64: PR target/105157 Increase number of cores TARGET_CPU_DEFAULT can encode

Andreas Krebbel (16):
      PR100281 C++: Fix SImode pointer handling
      IBM Z: Support vector _Bool language extension
      Adjust docu of TARGET_VECTORIZE_VEC_PERM_CONST
      IBM Z: Get rid of vec merge unspec
      IBM Z: Get rid of vpdi unspec
      IBM Z: Remove redundant V_HW_64 mode iterator.
      IBM Z: Implement TARGET_VECTORIZE_VEC_PERM_CONST for vector merge
      IBM Z: Implement TARGET_VECTORIZE_VEC_PERM_CONST for vpdi
      IBM Z: Fix PR102222
      IBM Z: TPF: Add cc clobber to profiling expanders
      IBM Z: Define STACK_CHECK_MOVING_SP
      PR101260 regcprop: Add mode change check for copy reg
      Check always_inline flag in s390_can_inline_p [PR104327]
      IBM zSystems/testsuite: PR105147: Skip pr105140.c
      IBM zSystems: Add support for z16 as CPU name.
      PR102024 - IBM Z: Add psabi diagnostics

Andreas Larsson (1):
      sparc: Print out bit names for LEON and LEON3 with -mdebug

Andreas Schwab (2):
      Fix endian bug in rust demangler
      libgfortran: Handle m68k extended real format in ISO_Fortran_binding.h

Andrew Burgess (4):
      gdb: Add a dependency between gdb and libbacktrace
      top-level: merge Makefile.def patches from binutils-gdb repository
      top-level configure: setup target_configdirs based on repository
      update my email address

Andrew MacLeod (135):
      Enhance initial global value setting.
      Change x mod 0 to produce UNDEFINED rather than VARYING.
      Don't over-allocate switch default range object.
      Make TRUE/FALSE edge calculation available without the outgoing edge class.
      Fix range_on_exit for PHI stmts when there are no other stmts in the block.
      When searching for non-null, check the dominator tree.
      Clean up and virtualize the on-entry cache interface.
      Once a range becomes constant, make it invariant.
      Split gimple range folding with ranges into a stand alone class.
      Change gori_compute to inherit from gori_map instead of having a gori-map.
      fully populate the export list from range_cache, not gori_compute.
      Add imports and strengthen the export definition in range_def and gori_map.
      Unify temporal cache with gori dependencies.
      Tweak location of non-null calls. revamp ranger debug output.
      Make expr_range_in_bb stmt based rather than block based.
      Adjust fur_source internal api to use gori_compute not ranger_cache.
      Remove the logical stmt cache for now.
      Range invariant global values are also always current.
      Move Ranger cache to range-query and fur_source model.
      Replace ssa_range_in_bb with entry exit and def range
      Do not calculate new values when evaluating a debug statement.
      Implement multi-bit aligned accessors for sparse bitmap.
      Implement a sparse bitmap representation for Rangers on-entry cache.
      Virtualize fur_source and turn it into a proper API.
      Limit new value calculations to first order effects.
      Avoid loading an undefined value in the ranger_cache constructor.
      Range_on_edge in ranger_cache should return true for all ranges.
      Add recomputation to outgoing_edge_range.
      Fix spacing and typos in comments.
      Remove poor value computations.
      Calculate a global definition if one has not been registered.
      Initial value-relation code.
      Add relational support to range-op.
      Add relational support to fold_using_range
      Add relations between LHS and op1/op2 for PLUS_EXPR.
      Add relation effects between operands to MINUS_EXPR.
      Add relation between LHS and op1 for casts and copies.
      Add relational self-tests.
      Dump should be read only. Do not trigger new lookups.
      Adjust on_entry cache to indicate if the value was set properly.
      Do not continue propagating values which cannot be set properly.
      Split gimple-range into gimple-range-fold and gimple-range.
      Fix comment typo.
      Correctly unify recomputation with existing range.
      Fix relation query of equivalences.
      Only register relations on live edges
      Add a testcase to confirm the equivalence's are being checked by EVRP.
      Add stmt context in simplify_using_ranges.
      Allow PHIs to pick up global values.
      Fix MINUS_EXPR relations.
      Fix build_gt and build_lt for signed 1 bit values.
      Do not register a cast as an equivalence.
      Add relation processing to ubsan builtins.
      Adjust testcase to test the call is removed.
      Turn hybrid mode off, default to ranger-only mode for EVRP.
      Add gimple_range_type for statements.
      Add wi_fold_in_parts.
      Only call vrp_visit_cond_stmt if range_of_stmt doesn't resolve to a const.
      Check for undefined on COND_EXPR before querying type.
      Allow non-symmetrical equivalences.
      Adjust ranges for to_upper and to_lower.
      Confirm and Handle only ASCII in toupper and tolower ranges.
      Return undefined on edges which are not executed.
      Change const basic_block to const_basic_block.
      Change integral divide by zero to produce UNDEFINED.
      Handle constants in wi_fold for trunc_mod.
      Ensure toupper and tolower follow the expected pattern.
      Special case -TYPE_MIN_VALUE for flag_wrapv in operator_abs::op1_range.
      Abstract tracing routines into a class.
      Change evrp-mode options.
      Add GORI tracing faciltiies.
      Add transitive operations to the relation oracle.
      Virtualize relation oracle and various cleanups.
      Provide a relation oracle for paths.
      Make each def a new equivalency record.
      Use EDGE_EXECUTABLE in ranger and return UNDEFINED for those edges.
      Create a ranger-local flag for non-executable edges.
      Look for a relation between operands only when possible.
      Ranger: More efficient zero/nonzero check.
      Use TYPE_MIN/MAX_VALUE in set_varying when possible.
      Introduce a param-switch-limit for EVRP.
      Add range intersect with 2 wide-ints.
      Simplification for right shift.
      Add target int128 to testcase.
      Ranger : Do not process abnormal ssa-names.
      Process EH edges again and call get_tree_range on non gimple_range_ssa_p names.
      Move ranger only VRP folder to tree-vrp.
      Add --param=vrp1-mode and --param=vrp2-mode.
      Split --param=evrp-mode into evrp-mode and ranger-debug.
      Tweak ranger-debug flags.
      Always output exported ranges to a dump_file.
      Initialize variable.
      Fold all statements in Ranger VRP.
      Move vrp_simplify_cond_using_ranges into the simplifier.
      Reset scev before invoking array_checker.
      Unify EVRP and VRP folding predicate message.
      Fix ifcvt-4.c to not depend on VRP2 asserts.
      Perform on-entry propagation after range_of_stmt on a gcond.
      Don't register nonsensical relations.
      Provide some context to folding via ranger.
      Fix --param=ranger-debug=all to include a trace.
      Check for constant builtin value first.
      For ranges, PHIs don't need to process arg == def.
      Testcase adjustments for pass vrp1.
      Switch vrp2 to ranger.
      Treat undefined operands as varying in GORI.
      Abstract ranger cache update list.
      Remove def chain import assert from GORI.
      Don't calculate new values when using the private context callback.
      Keep x_range_query NULL for global ranges.
      Grow sbr_vector in ranger's on-entry cache as needed.
      Limit depth for all GORI expressions.
      Range-on-edge trace tweak.
      Split return functionality of get_non_stale_global_range.
      Directly resolve range_of_stmt dependencies.
      Check for equivalences between PHI argument and def.
      Add the testcase for this PR to the testsuite.
      Don't reuse reference after potential resize.
      Always track arguments, even when ignoring equiv params.
      Also pre-process PHIs in range-of-stmt.
      Add BB option for outgoing_edge_range_p and may_reocmpute_p.
      Use dominators to reduce cache-flling.
      Prevent exponential range calculations.
      Always set EDGE_EXECUTABLE in VRP2.
      Add testcase for PR 83541.
      Add relation to unsigned right shift.
      Allow more precision when querying from fold_const.
      Limit the number of relations registered per basic block.
      Only add equivalencies that are still valid.
      Register non-null side effects properly.
      Use GORI to evaluate arguments of a COND_EXPR.
      Use range_compatible_p in condexpr_adjust
      Always use dominators in the cache when available.
      Retain existing range knowledge when prefilling statements.
      Check for equivalence after merging relations.

Andrew Pinski (89):
      Don't simplify (A & C) != 0 ? D : 0 for pointer types.
      Add ChangeLogs for the previous commit.
      Fix two testcases for ssa names which are more than 1 digit
      Add a couple of A?CST1:CST2 match and simplify optimizations
      Optimize x < 0 ? ~y : y to (x >> 31) ^ y in match.pd
      Use is_empty_type instead of zero-sized type.
      Fix PR 95481: tail call fails with empty struct types
      Replace conditional_replacement with match and simplify
      Improve match_simplify_replacement in phi-opt
      Fix PR 100925: Limit some a?CST1:CST2 optimizations to intergal types only
      Disallow pointer and offset types on some gimple
      Add statistics counting to PHI-OPT
      Expand the comparison argument of fold_cond_expr_with_comparison
      Reset the range info on the moved instruction in PHIOPT
      Lower for loops before lowering cond in genmatch
      Fix PR 101230: ICE in fold_cond_expr_with_comparison
      Duplicate the range information of the phi onto the new ssa_name
      Fix PR 101237: Remove element_type call when used with the functions from real
      Allow match-and-simplified phiopt to run in early phiopt
      Try inverted comparison for match_simplify in phiopt
      Port most of the A CMP 0 ? A : -A to match
      Fix 101256: Wrong code due to range incorrect from PHI-OPT
      Improve early simplify and match for phiopt
      [PHIOPT/MATCH] Remove the statement to move if not used
      Fix PR 101453: ICE with optimize and large integer constant
      [AARCH64] Fix PR 101205: csinv does not have an zero_extend version
      Fix PR 10153: tail recusion for vector types.
      Add testcases that got lost when tree-ssa was merged
      Fix PR 101683: FP exceptions for float->unsigned
      Fix a few problems with download_prerequisites.
      Fix PR c++/66590: incorrect warning "reaches end of non-void function" for switch
      Fix PR 90142: contrib/download_prerequisites uses test ==
      Fix x86/56337 : 1<<28 alignment is broken
      Fix PR driver/79181 (and others), not deleting some /tmp/cc* files for LTO.
      Fix gcc.dg/ipa/inline-8.c for -fPIC
      Add MIPS Linux support to gcc.misc-tests/linkage.c (testsuite/51748)
      Fix target/101934: aarch64 memset code creates unaligned stores for -mstrict-align
      Fix some GC issues in the aarch64 back-end.
      Fix target/102173 ICE after error recovery
      Fix PR tree-optimization/63184: add simplification of (& + A) != (& + B)
      Fix PR lto/49664: liblto_plugin.so exports too many symbols
      Remove m32r{,le}-*-linux* support from GCC
      [aarch64] Fix target/95969: __builtin_aarch64_im_lane_boundsi interferes with gimple
      Fix PR 67102: Add libstdc++ dependancy to libffi
      Fix middle-end/102395: reg_class having only NO_REGS and ALL_REGS.
      Fix PR bootstrap/102389: --with-build-config=bootstrap-lto is broken
      Update the section on binutils version
      Fix PR c/94726: ICE with __builtin_shuffle and changing of types
      c: [PR32122] Require pointer types for computed gotos
      Fix some testcases after my computed goto patch
      Fix bb-slp-pr97709.c after computed goto change
      tree-optimization: [PR102622]: wrong code due to signed one bit integer and "a?-1:0"
      Add dump prints when execute_fixup_cfg removes a write only var store.
      Remove outdated comment about execute_fixup_cfg
      Factor out removal of write only stores from execute_fixup_cfg
      Improve maybe_remove_writeonly_store to do a simple DCE for defining statement
      Fix PR 102908: wrongly removing null pointer loads
      [Committed] Fix tree-optimization/103152: Still one more -signed1bit issue
      aarch64: [PR101529] Fix vector shuffle insertion expansion
      [COMMITTED] aarch64: [PR103170] Fix aarch64_simd_dup<mode>
      [Commmitted] Move some testcases to torture from tree-ssa
      tree-optimization: [PR103245] Improve detection of abs pattern using multiplication
      tree-optimization: [PR103218] Fold ((type)(a<0)) << SIGNBITOFA into ((type)a) & signbit
      Fix PR 103288, ICE after PHI-OPT, move an assigment when still in use for another bb
      Fix PR tree-optimization/103228 and 103228: folding of (type) X op CST where type is a nop convert
      Fix tree-optimization/103257: Missed jump threading due too early conversion of bool*A into bool?A:0
      Fix PR 103317, ICE after PHI-OPT, minmax_replacement producing invalid SSA
      Fix tree-optimization/103314 : Limit folding of (type) X op CST where type is a nop convert to gimple
      Fix tree-optimization/103220: Another missing folding of (type) X op CST where type is a nop convert
      Canonicalize &MEM[ssa_n, CST] to ssa_n p+ CST in fold_stmt_1
      Fix PR 62157: disclean in libsanitizer not working
      Fix PR 19089: Environment variable TMP may yield gcc: abort
      [Committed] New testcase for C++/71792, bitfields and auto
      Improve location for new statements in match-and-simplify phiopt
      Change the xfail in gcc.dg/uninit-pr89230-1.c
      Committed: Add testcases for a few PRs
      Revamp documentation for _Complex types extension
      [COMMITTED] c++: [PR90782] Add testcase
      Fix target/103910: missing GTY on x86_mfence causing PCH usage to ICE
      target: [PR102941] Fix inline-asm flags with non-REG_P output
      ada: Fix up handling of ghost units [PR104027]
      Fix tree-optimization/101941: IPA splitting out function with error attribute
      [COMMITTED] Improve coment for the newly added code in ipa-split.
      [aarch64/64821]: Simplify __builtin_aarch64_sqrt* into internal function .SQRT.
      Fix aarch64/104201: branch-protection-attr.c fails after quoting difference
      Fix comment for operand_compare::operand_equal_p.
      [COMMITTED] Change multiprecision.org to use https
      [COMMITTED] Fix PR aarch64/104474: ICE with vector float initializers and non-consts.
      c: [PR104506] Fix ICE after error due to change of type to error_mark_node

Andrew Stubbs (16):
      amdgcn: disable TImode
      Ensure emit_move_insn operands are valid
      Revert "amdgcn: disable TImode"
      Clean up 'GOMP_MAP_POINTER' handling in 'libgomp/oacc-parallel.c:GOACC_declare'
      OpenACC: Separate enter/exit data ABIs
      amdgcn: Add -mxnack and -msram-ecc [PR 100208]
      amdgcn: Fix attributes for LLVM-12 [PR 100208]
      amdgcn: Support LLVM 13 assembler syntax
      amdgcn: Implement -msram-ecc=any
      amdgcn: Fix assembler version incompatibility
      amdgcn: fix up offload debug linking with LLVM 13
      amdgcn: Fix ICE generating CFI [PR103396]
      dwarf: Multi-register CFI address support.
      amdgcn: Change offload variable table discovery
      OpenMP: allow requires dynamic_allocators
      amdgcn: Allow vector reductions on constants

Ankur Saini (7):
      MAINTAINERS - Add myself for write after approval
      analyzer: : Refactor callstring to work with pairs of supernodes.
      analyzer: detect and analyze calls via function pointer
      analyzer: detect and analyze virtual function calls
      analyzer: Fix PR analyzer/101980
      analyzer: Fix PR analyzer/102020
      analyzer: Impose recursion limit on indirect calls.

Anthony Sharp (2):
      call_summary: add missing template keyword
      c++: warning for dependent template members [PR70417]

Antoni Boucher (11):
      MAINTAINERS: Add myself for write after approval
      libgccjit: Handle truncation and extension for casts [PR95498]
      libgccjit: Add some reflection functions [PR96889]
      libgccjit: Add support for types used by atomic builtins [PR96066] [PR96067]
      libgccjit: Add support for TLS variable [PR95415]
      libgccjit: Add support for setting the link section of global variables [PR100688]
      libgccjit: Add support for sized integer types, including 128-bit integers [PR95325]
      libgccjit: Add support for bitcasts [PR104071]
      libgccjit: Add support for register variables [PR104072]
      libgccjit: Add function to hide stderr logs [PR104073]
      libgccjit: Add support for setting the alignment [PR104293]

Antony Polukhin (2):
      libstdc++: diagnose some misuses of [locale.convenience] functions [PR 89728]
      libstdc++: Optimize std::seed_seq construction

Ard Biesheuvel (1):
      [ARM] Add support for TLS register based stack protector canary access

Arnaud Charlet (90):
      [Ada] Fix the Sphinx configuration and port it to Python3
      [Ada] Bad handling of 'Valid_Scalars and arrays
      [Ada] Remove unused subprograms
      [Ada] Incorrect discriminant check on call to access to subprogram
      [Ada] Crash with declare expression used in a postcondition
      [Ada] Assert failure on complex code with private type and discriminant
      [Ada] Fix recent optimization in evaluation of selected component for GNATprove
      [Ada] AI12-0407: Fixups on Big_Integers and Big_Reals
      [Ada] Spurious error on 'Image
      [Ada] Remove obsolete comment
      [Ada] Ada 2020 AI12-0401: Renaming of qualified expression of variable
      [Ada] Bad handling of array sliding in aggregate
      [Ada] Clean up Makefile.rtl
      [Ada] Tree inconsistency between -O0 and -O1
      [Ada] Self reference access discriminant
      [Ada] Code cleanup
      [Ada] Spurious warning on postcondition and result
      [Ada] No_Implicit_Loops restriction and pragma Assert
      [Ada] Remove confusing warning on type export
      [Ada] Update copyright notice
      [Ada] Missing Preelaborate_Initialization on Ada.Containers.Ordered_Maps.Map
      [Ada] Ada.Strings.Unbounded.Aux.Set_String
      [Ada] Address ??? comments in styleg.adb
      [Ada] Address some ??? comments in checks.adb
      [Ada] Missing finalization on generic instantiation
      [Ada] Address some ??? comments
      [Ada] Assert_Failure vs Assertion_Error
      [Ada] Fix typos
      [Ada] Fix handling of PATs
      [Ada] Assert failure on pragma Inline in procedure body
      [Ada] AI12-0411: Add "bool" to Interfaces.C
      [Ada] Bad expansion with -gnato2 and if expression
      [Ada] Assert failure on E_Enumeration_Literal and front-end unnesting
      [Ada] Computation of Shift_Left and large signed values
      [Ada] Rename Ada 202* to Ada 2022
      [Ada] Add support for folding more and/or expressions
      [Ada] Use runtime from base compiler during stage1
      [Ada] Fix handling of scopes for subprogram calls in unnesting
      [Ada] Raise expressions and unconstrained components
      [Ada] Wrong reference to System.Tasking in expanded code
      [Ada] Use runtime from base compiler during stage1 (continued)
      [Ada] AI12-0411 Add "bool" to Interfaces.C
      [Ada] Do not systematically suppress checks on atree.adb
      [Ada] Minor comment cleanup
      [Ada] Provide new function Uintp.UI_To_Unsigned_64
      [Ada] Move runtime units for Put_Image attribute to libgnarl
      [Ada] Crash on a nested aggregate containing controlled objects
      [Ada] Missing finalization on nested expression with action
      [Ada] Crash on overriding of an abstract primitive on an incomplete type
      [Ada] GNAT.Compiler_Version and LTO
      [Ada] Replace Opt.Extensions_Allowed by Ada_Version
      [Ada] Relax null exclusion mismatch check in Relaxed_RM_Semantics mode
      [Ada] Update comments related to TBD
      [Ada] Code cleanups in exp_ch6.adb
      [Ada] Fix handling of gnat check/test commands
      [Ada] Premature freezing of types
      [Ada] Use runtime from base compiler during stage1 #2
      [Ada] Code cleanups in System.Atomic_Counters
      [Ada] Minor code cleanup
      [Ada] Front-end inlining and instantiations of UC
      [Ada] Make tools compatible with No_Dynamic_Accessibility_Checks
      [Ada] Revert meaning of -gnatd_b
      [Ada] Make runtime code compatible with No_Dynamic_Accessibility_Checks
      [Ada] Add No_Tasking restriction is system.ads for bootstrap
      [Ada] Spurious warning in generic instance
      [Ada] AI12-0156 Use subtype indication in generalized iterators
      [Ada] Inconsistency between declaration and body of predicate functions
      [Ada] Code cleanups in a-strfix.adb
      [Ada] Declare time_t uniformly based on a system parameter #2
      [Ada] Clean up Uint fields (continued)
      [Ada] Mark gnatfind and gnatxref obsolete
      [Ada] Change message format on missing return
      [Ada] Make Ada.Task_Initialization compatible with No_Elaboration_Code_All
      [Ada] Allow more cases of import with Relaxed_RM_Semantics
      [Ada] Minor doc improvement
      [Ada] More flexibility in preprocessor
      [Ada] Update status of some attributes
      [Ada] PR ada/102073
      [Ada] Add comments in Ada.Task_Initialization
      Avoid exception propagation during bootstrap
      [Ada] Remove more uses of exception propagation during bootstrap
      [Ada] Shutdown codepeer message
      [Ada] Remove gnatfind and gnatxref
      [Ada] Reduce runtime dependencies on stage1
      [Ada] Reduce runtime dependencies on stage1
      [Ada] Update copyright notice and bump Gnatvsn.Current_Year
      [Ada] Code cleanups
      [Ada] PR ada/79724
      Update prerequisites for GNAT
      [Ada] Fix up handling of ghost units PR104027 #2

Arthur Cohen (1):
      selftest: Move C-specific tests to c_family

Ashimida (1):
      Remove legacy external declarations in toplev.h [PR101447]

Avi Kivity (1):
      libstdc++: add missing typename for dependent type in ranges::elements_view [PR100900]

Avinash Sonawane (1):
      Docs: Document that taint analyzer checker disables some warnings [PR103533]

Barrett Adair (1):
      c++: fix template instantiation comparison in redeclarations

Benjamin Peterson (1):
      Remove unused function make_unique_name.

Benno Evers (1):
      c++: Fix ICE due to shared BLOCK node in coroutine generation [PR103328]

Bernd Edlinger (15):
      Fix target/100106 ICE in gen_movdi
      Add line debug info for virtual thunks
      Reset prologue_location before calling code_end
      Fix ICE in output_rnglists, at dwarf2out.c:12294
      Cleanup temp files in libphobos unittest at src/std/process.d
      Fix commit mistake in testcase gcc.dg/tree-ssa/ssa-sink-3.c
      Fix a test failure in g++.dg/modules/omp-1_c.C
      Fix gcc-bootstrap issue
      Generate gimple-match.c and generic-match.c earlier
      diagnostics: Fix sporadic test failure
      For obj-c stage-final re-use the checksum from the previous stage
      Fix bootstrap2 breakage due to re-use of obj-c checksum
      Fix my e-mail in the ChangeLog
      Fix debug info for ignored decls at start of assembly
      Ada: Remove debug line number for DECL_IGNORED_P functions

Bernd Kuhls (1):
      gcc: define _REENTRANT for OpenRISC when -pthread is passed

Bernhard Reutner-Fischer (17):
      config/i386: Commentary typo fix
      Fortran: make some trans* functions static
      Fortran: make some match* functions static
      Fortran: make some constructor* functions static
      Fortran: make some trans-array functions static
      Fortran: Delete unused decl in trans-stmt.h
      Fortran: Delete unused decl in trans-types.h
      Fortran: Delete unused decl in intrinsic.h
      doc: Bump required minimum DejaGnu version to 1.5.3
      Fortran: Free type-bound procedure structs
      Fix memory leak of gsymbol
      Fortran: Silence -Wmaybe-uninitialized warning
      Fortran: Revert explicit memcpy in gfc_get_typebound_proc
      contrib: testsuite-management: Update to be python3 compatible
      Fortran: Delete unused decl in gfortran.h
      Fortran: Missing error with IMPLICIT none (external) [PR100972]
      Fortran: Fix memory leak in finalization wrappers [PR68800]

Bill Schmidt (95):
      rs6000: Add -mrop-protect and -mprivileged flags
      rs6000: Emit ROP-mitigation instructions in prologue and epilogue
      rs6000: Conditionally define __ROP_PROTECT__
      rs6000: Add ROP tests
      rs6000: Remove old psabi warnings
      PR100750: Require ELFv2 ABI for ROP test
      rs6000: Don't let swaps pass break multiply low-part (PR101129)
      Support scanning of build-time GC roots in gengtype
      rs6000: Initial create of rs6000-gen-builtins.c
      rs6000: Add initial input files
      rs6000: Add file support and functions for diagnostic support
      rs6000: Add helper functions for parsing
      rs6000: Add functions for matching types, part 1 of 3
      rs6000: Add functions for matching types, part 2 of 3
      rs6000: Add functions for matching types, part 3 of 3
      rs6000: Red-black tree implementation for balanced tree search
      rs6000: Main function with stubs for parsing and output
      rs6000: Parsing built-in input file, part 1 of 3
      rs6000: Parsing built-in input file, part 2 of 3
      rs6000: Parsing built-in input file, part 3 of 3
      rs6000: Parsing of overload input file
      rs6000: Build and store function type identifiers
      rs6000: Write output to the builtin definition include file
      rs6000: Write output to the builtins header file
      rs6000: Write output to the builtins init file, part 1 of 3
      rs6000: Write output to the builtins init file, part 2 of 3
      rs6000: Add int128 target check to pr101129.c (PR101531)
      rs6000: Write output to the builtins init file, part 3 of 3
      rs6000: Write static initializations for built-in table
      rs6000: Write static initializations for overload tables
      rs6000: Add the rest of the [altivec] stanza to the builtins file
      rs6000: Add VSX builtins
      rs6000: Add available-everywhere and ancient builtins
      rs6000: Avoid buffer overruns
      rs6000: Incorporate new builtins code into the build machinery
      rs6000: Add gengtype handling to the build machinery
      rs6000: Fix AIX bootstrap (don't call asprintf)
      rs6000: Add power7 and power7-64 builtins
      rs6000: Add power8-vector builtins
      rs6000: Add Power9 builtins
      rs6000: Add more type nodes to support builtin processing
      rs6000: Add Power10 builtins
      rs6000: Add MMA builtins
      rs6000: Add miscellaneous builtins
      rs6000: Add Cell builtins
      rs6000: Add remaining overloads
      rs6000: Execute the automatic built-in initialization code
      rs6000: Darwin builtin support
      rs6000: Add sanity to V2DI_type_node definitions
      rs6000: Always initialize vector_pair and vector_quad nodes
      rs6000: Handle overloads during program parsing
      rs6000: Move __builtin_mffsl to the [always] stanza
      rs6000: Handle gimple folding of target built-ins
      rs6000: Handle some recent MMA builtin changes
      rs6000: Support for vectorizing built-in functions
      rs6000: Add psabi diagnostic for C++ zero-width bit field ABI change
      rs6000: Fix vec_cpsgn parameter order (PR101985)
      rs6000: Replace the builtin expansion machinery
      rs6000: Update rs6000_builtin_decl
      rs6000: Miscellaneous uses of rs6000_builtins_decl_x
      rs6000: Add escape-newline support for builtins files
      rs6000: Debug support for builtins changes
      rs6000: Match recent builtins changes in new builtins support
      rs6000: Fix test_mffsl.c to require Power9 support
      rs6000: Fix test_mffsl.c effective target check
      rs6000: Add [power6-64] stanza to new builtin support
      rs6000: Better error messages for power8/9 vector builtins
      rs6000: Clarify overloaded builtin diagnostic
      rs6000: Mirror fix for PR102347 in new builtins support
      rs6000: Enable new built-in support, with test suite and altivec.h changes
      rs6000: Fix use of wrong enum for built-in function code
      rs6000: Some builtins require IBM-128 long double format (PR103623)
      rs6000: Builtins for doubleword compare should be in [power8-vector] (PR103625)
      rs6000: Remove new_builtins_are_live and dead code it was guarding
      rs6000: Remove altivec_overloaded_builtins array and initialization
      rs6000: Rename rs6000-builtin-new.def to rs6000-builtins.def
      rs6000: Remove rs6000-builtin.def and associated data and functions
      rs6000: Rename functions with "new" in their names
      rs6000: Rename arrays to remove temporary _x suffix
      rs6000: Refactor altivec_build_resolved_builtin
      rs6000: Fix fake vec_promote overload
      rs6000: Skip overload instances with uninitialized fntype (PR103622)
      rs6000: Support vector float/double for vec_sldw
      rs6000: Don't #ifdef "short" built-in names
      rs6000: Unify error messages for built-in constant restrictions
      rs6000: Consolidate target built-ins code
      rs6000: Fix LE code gen for vec_cnt[lt]z_lsbb [PR95082]
      rs6000: Remove -m[no-]fold-gimple flag [PR103686]
      rs6000: Clean up ISA 3.1 documentation [PR100808]
      rs6000: More factoring of overload processing
      rs6000: Add support for vmsumcud and vec_msumc
      rs6000: Correct function prototypes for vec_replace_unaligned
      Change my MAINTAINERS information
      rs6000: vec_neg built-ins wrongly require POWER8
      rs6000: Fix some missing built-in attributes [PR104004]

Bill Seurer (1):
      rs6000: Fix bootstrap

Bin Cheng (3):
      Don't skip prologue/epilogue when initializing alias.
      AArch64: use stable sorting in generating ldp/stp
      aarch64: Expand %<w> correctly according to mode iterator

Bob Duff (99):
      [Ada] Incorrect error with Default_Value on private/modular type
      [Ada] Error on T'Reduce of when T is not a container
      [Ada] Clean up ??? marks
      [Ada] Do not "optimize" by converting Positive to Unsigned
      [Ada] Fix s-os_lib.adb so vectorizing compilation works
      [Ada] Minor efficiency improvement in containers
      [Ada] Variable-sized node types
      [Ada] Reinitialize Private_Dependents when it is vanishing
      [Ada] Restore nnd capability
      [Ada] Variable-sized node types -- cleanup
      [Ada] Minor reformattings
      Fix uninitialized variable in Atree.Size_In_Slots
      [Ada] Fix bug in subtype of private type with invariants
      [Ada] Variable-sized node types -- cleanup
      [Ada] Variable-sized node types: improve error messages
      [Ada] Fix bug in if_expressions introduced by var-size nodes changes
      [Ada] Disable certain checks in predefined units
      [Ada] Add Interface_Name field to E_Loop_Parameter
      [Ada] Allow Known_Static_Component_Size (etc) on private types
      [Ada] No_Task_Parts aspect
      [Ada] Incorrect Reinit_Field_To_Zero calls for concurrent entities
      [Ada] Fix missing array bounds checking
      [Ada] Fix varsize node name conflict
      [Ada] Display Entity in debugging printouts
      [Ada] Warn on 'in out' param containing access in predefined private type
      [Ada] Warn on 'in out' param containing access in private type
      [Ada] New debug switch to disable large static aggregates
      [Ada] Correct A'First (N) where N is an object name
      [Ada] Remove AAMP from compiler sources
      [Ada] Avoid passing Enum_Lit'Size to the back end
      [Ada] Make "gcc -gnatDGL" handle unterminated last lines properly
      [Ada] Minor comment cleanups
      [Ada] Zero-size slices
      [Ada] Implement 'Valid_Value attribute
      [Ada] Improve efficiency of small slice assignments of packed arrays
      [Ada] Optimization of System.Value_N
      [Ada] Fix bug in node/entity kind numbers in sinfo/einfo.h
      [Ada] tech debt: clean up Component_Size
      [Ada] tech debt: Parent (Empty) is not allowed
      [Ada] Fix the -gnatyr switch so it works in record rep clauses
      [Ada] Refactoring related to Returns_By_Ref
      [Ada] Clean up Get_Index_Bounds
      [Ada] Add assertions on tampering counts
      [Ada] Make parent of N_Exception_Declaration be N_Declaration
      [Ada] Transient scope cleanup
      [Ada] Tbuild cleanup
      [Ada] Initialize Current_Error_Node
      [Ada] Transient scope cleanup
      [Ada] Linker_Section_Pragma cleanup
      [Ada] Unchecked_Convert_To: set Parent
      [Ada] Fix bugs in Value_Size clauses and refactor
      [Ada] Optimize away certain elaboration checks
      [Ada] Transient scope cleanup
      [Ada] Remove Unknown_ functions
      [Ada] Add source file name to gnat bug box
      [Ada] Fix crash on type extensions with discriminants
      [Ada] Duplicate Size/Value_Size clause
      [Ada] Clean up Uint fields
      [Ada] Fix assertion in GNATprove_Mode
      [Ada] Clean up Uint fields, remove unused routines
      [Ada] Present and No functions for type Uint
      [Ada] Remove "with GNAT.OS_Lib;" from libgnat/a-stbufi.ads
      [Ada] Clean up uses of Esize and RM_Size
      [Ada] Add assertions to Uintp
      [Ada] Remove if_expression
      [Ada] Add assertions to Uintp (UI_Is_In_Int_Range)
      [Ada] Fix regression in ACATS bdd2006 and bdd2007
      [Ada] Add "optional" node subtypes that allow Empty
      [Ada] Fix conformance errors and erroneous code
      [Ada] Cleanup and efficiency improvements
      [Ada] Follow-on efficiency improvements
      [Ada] Info. gathering in preparation for more efficiency improvements
      [Ada] More work on efficiency improvements
      [Ada] Subprogram_Variant in ignored ghost code
      [Ada] Declaration_Node for Itypes returns Empty or declaration
      [Ada] Minor comment fix in System.Regpat
      [Ada] Improve message on missing all/for in pre-Ada-2022 modes
      [Ada] Fix latent bug in set_end_locus_from_node
      [Ada] tech debt: Clean up Uint fields, such as Esize
      [Ada] Remove unnecessary call to No_Uint_To_0
      [Ada] Renamed_Or_Alias cleanup
      [Ada] Make Declaration_Node return nondeclarations in fewer cases
      [Ada] Fix bugs in Base_Type_Only (etc.) fields
      [Ada] Fix a comment
      [Ada] Follow-on cleanups for Uint fields
      [Ada] Avoid warnings regarding rep clauses in generics
      [Ada] Avoid warnings regarding rep clauses in generics -- follow-on
      [Ada] Warn for bidirectional characters
      [Ada] Syntax error on "not null procedure"
      [Ada] Fix crash on pragma Compile_Time_Warning/Error
      [Ada] Renamed_Entity should return Entity_Id
      [Ada] Prevent Get_Current_Value_Condition from returning the same node
      [Ada] Compiler crash with -gnatR2 and with of child
      [Ada] New restriction No_Tagged_Type_Registration
      [Ada] Warn on subtype declaration of null range
      [Ada] Small cleanup of osint-m.adb
      [Ada] Warn on import of parent package
      [Ada] treepr: Print value of static expression
      [Ada] treepr: print value only for discrete types

Boris Yakobowski (3):
      [Ada] In CodePeer mode, use regular-exception handling
      [Ada] Do not catch 'N mod -1' in CodePeer_Mode
      [Ada] Do not catch 'N rem -1' in CodePeer_Mode

Bruno Haible (1):
      Extend --with-zstd documentation

Carl Love (8):
      rs6000, Fix arguments in altivec_vrlwmi and altivec_rlwdi builtins
      RS6000 add 128-bit Integer Operations part 1
      Add 128-bit int to 128-bit DFP (floattitd2) and 128-bit DFP to 128-bit int (fixtdti2) support
      rs6000, Add test 128-bit shifts for just the int128 type.
      Conversions between 128-bit integer and floating point values.
      RS6000 Add 128-bit Binary Integer sign extend operations
      Fix effective target for check-builtin-vec_rlnm-runnable.c test
      Fix for vcmpequt builtin

Cassio Neri (1):
      libstdc++: More efficient std::chrono::year::leap

Cesar Philippidis (1):
      Make OpenACC orphan gang reductions errors

Chenghua Xu (1):
      MAINTAINERS: Add myself and Lulu as LoongArch port maintainer.

Cherry Mui (3):
      compiler: support new language constructs in escape analysis
      compiler: make escape analysis more robust about builtin functions
      compiler: make escape analysis more strict about runtime calls

Christoph Muellner (2):
      RISC-V: Generate helpers for cbranch4.
      REE: PR rtl-optimization/100264: Handle more PARALLEL SET expressions

Christophe Lyon (65):
      testsuite/aarch64: Run pr99988.c test under lp64 only
      testsuite/arm: Add arm_cmse_hw effective target
      gcc/genflags.c: Improve error message
      testsuite: Fix dg directives order in arm/aarch64 vml[as]_float_not_fused.c
      testsuite: gcc.c-torture/execute/ieee/cdivchkld.c needs fmaxl
      tree-optimization/79333 - fold stmts following SSA edges in VN
      testsuite/arm: Add mve-vsub-scalar-1.c test
      testsuite/arm: Add mve-vmul-scalar-1.c test
      arm: MVE: Convert vcmp[eq|ne]* in arm_mve.h to use only 's' builtin version
      arm: MVE: Cleanup vcmpne/vcmpeq builtins
      arm: MVE: Remove _s and _u suffixes from vcmp* builtins.
      arm: MVE: Factorize all vcmp* integer patterns
      arm: MVE: Factorize vcmp_*f*
      arm: remove error in CPP_SPEC when float-abi soft and hard are used together
      testsuite/arm: Improve unsigned-float.c
      arm: remove error in CPP_SPEC when -mlittle-endian and -mbig-endian are used together
      testsuite: Require openmp effective-target for PR100515
      testsuite/arm: Fix and rename arm_qbit_ok into arm_sat_ok effective-target
      testsuite/arm: Improve mve-vshr.c
      testsuite/arm: Factorize and increase coverage in mve-sub_1.c
      testsuite/arm: Add mve-vadd-1.c test
      testsuite/arm: Add mve-vadd-scalar-1.c test
      arm: Auto-vectorization for MVE: vcmp
      arm: Auto-vectorization for MVE: add __fp16 support to VCMP
      arm/testsuite: Fix testcase for PR99977
      c: Add support for __FILE_NAME__ macro (PR c/42579)
      arm: Auto-vectorization for MVE: vld2/vst2
      arm: Auto-vectorization for MVE: vld4/vst4
      arm: Auto-vectorization for MVE: vaddv
      arm: Auto-vectorization for MVE: vabs
      arm: Auto-vectorization for MVE and Neon: vhadd/vrhadd
      arm: Auto-vectorization for MVE: vclz
      arm: Auto-vectorization for MVE: add pack/unpack patterns
      [testsuite]: Add missing dg-add-options float16 to gcc.dg/debug/ctf/ctf-skip-types-2.c
      testsuite: gcc.dg/debug/btf/btf-bitfields-3.c requires -fno-short-enums PR debug/101321
      testsuite: gcc.dg/debug/btf/btf-bitfields-3.c remove -fno-short-enums PR debug/101321
      testsuite: Add arm_arch_v7a_ok effective-target to pr57351.c
      testsuite: [arm] Add missing effective-target to vusdot-autovec.c
      testsuite: [arm] Remove arm_v8_2a_imm8_neon_ok_nocache
      arm: Fix typos for reorder assembler architecture directives [PR101723]
      arm: Fix pr69245.c testcase for reorder assembler architecture directives [PR101723]
      Do not enable DT_INIT_ARRAY/DT_FINI_ARRAY on uclinuxfdpiceabi
      arm: Fix multilib mapping for CDE extensions [PR100856]
      arm: Fix __arm_vctp16q return type in arm_mve.h
      testsuite: Support single-precision in g++.dg/eh/arm-vfp-unwind.C
      testsuite: Remove .exe suffix in prune_gcc_output
      arm: Initialize vector costing fields
      libcpp: Fix ATTR_LIKELY definition PR preprocessor/103355
      MAINTAINERS: Update my email address.
      arm: Add new tests for comparison vectorization with Neon and MVE
      arm: Add GENERAL_AND_VPR_REGS regclass
      arm: Add support for VPR_REG in arm_class_likely_spilled_p
      arm: Fix mve_vmvnq_n_<supf><mode> argument mode
      arm: Implement MVE predicates as vectors of booleans
      arm: Implement auto-vectorized MVE comparisons with vectors of boolean predicates
      arm: Fix vcond_mask expander for MVE (PR target/100757)
      arm: Convert remaining MVE vcmp builtins to predicate qualifiers
      arm: Convert more MVE builtins to predicate qualifiers
      arm: Convert more load/store MVE builtins to predicate qualifiers
      arm: Convert more MVE/CDE builtins to predicate qualifiers
      arm: Add VPR_REG to ALL_REGS
      arm: Fix typo in auto-vectorized MVE comparisons
      arm: Remove unused variable arm_binop_none_none_unone_qualifiers
      arm: Revert Auto-vectorization for MVE: add pack/unpack patterns PR target/104882
      testsuite: Add arm testcase for PR105374

Chung-Ju Wu (1):
      MAINTAINERS: Add myself to DCO section

Chung-Lin Tang (16):
      libgomp: Structure element mapping for OpenMP 5.0
      testsuite/101114: Adjust libgomp.c-c++-common/struct-elem-5.c testcase
      openmp: Implement omp_get_device_num routine
      openmp: in_reduction support for Fortran
      openmp: Fortran strictly-structured blocks support
      openmp: Relax handling of implicit map vs. existing device mappings
      fortran: OpenMP/OpenACC array mapping alignment fix (PR90030)
      fortran: Fix setting of array lower bound for named arrays
      openmp: Improve OpenMP target support for C++ (PR92120)
      OpenMP 5.0: Remove array section base-pointer mapping semantics and other front-end adjustments
      openmp: Fix libgomp.c++ testsuite errors for non-offload configs
      openmp: Fix ICE in gimplify_omp_affinity [PR103643]
      libgomp: Fix GOMP_DEVICE_NUM_VAR stringification during offload image load
      openmp: Fix ICE in [PR103705]
      Fix omp-low ICE for indirect references based off component access [PR103642]
      OpenMP: Fix nested use_device_ptr

Claire Dross (7):
      [Ada] Move Has_Inferable_Discriminants to Sem_Util
      [Ada] Disable Pre/Post in formal containers
      [Ada] Add Reference and Constant_Reference functions to formal containers
      [Ada] Add SPARK_Mode => Off to System.File_Control_Block
      [Ada] Disable contract cases on formal containers
      [Ada] Introduce expression functions for contract of Scan_Exponent
      [Ada] Proof of System.Val_Uns at gold level

Claudiu Zissulescu (22):
      arc: Fix documentation __builtin_arc_sr
      arc: Add alternative names for gp and fp registers.
      arc: Update ctz/clz patterns
      arc: Fix compilation warnings.
      arc: Disable movmisalign patterns when aligned access is required
      arc: Cleanup simdext.md file
      arc: Improve vector support for ARCv2.
      arc: Fix typo in negv2si2 pattern
      ARC: gcc driver default to hs38_linux
      arc: Remove obsolete options
      arc: Don't allow millicode thunks with reduced register set CPUs.
      arc: Update 64bit move split patterns.
      arc: Fix (u)maddhisi patterns
      arc: Update doloop_end patterns
      arc: Add --with-fpu support for ARCv2 cpus
      arc: Small data doesn't need fcommon option
      arc: Update ZOL pattern.
      arc: Update arc specific tests
      arc: Update (u)maddhisi4 patterns
      arc: Update stack size computation when accumulator registers are available.
      arc: Add DWARF2 alternate CFA column.
      arc: Fail conditional move expand patterns

Clément Chigot (8):
      aix: Power10 assembler invocation.
      fixincludes: AIX socket.h.
      aix: 64 bit AIX TLS libpthread dependency.
      MAINTAINERS: Add myself for write after approval
      aix: ensure reference to __tls_get_addr is in text section.
      aix: handle 64bit inodes for include directories
      libgo: fix AIX build for the Go1.18 update
      libgo: move golang.org/x/sync/semaphore to gotool packages

Cooper Qu (4):
      C-SKY: Amend copyrights of recently added files.
      C-SKY: Fix copyright of csky-modes.def.
      C-SKY: Define HAVE_sync_compare_and_swap*.
      C-SKY: Use the common way to define MULTILIB_DIRNAMES.

Corentin Gay (4):
      ctype support for libstdc++ on VxWorks
      [Ada] Add case to consider ENODEV a "file not found error"
      [Ada] Add sys/time.h #include for QNX
      [Ada] Include errno.h in QNX specific part of the signal handling

Cui,Lili (6):
      Synchronize Rocket Lake's processor_names and processor_cost_table with processor_type
      x86: Update -mtune=alderlake
      x86: Update -mtune=tremont
      x86: Update model value for Alderlake and Rocketlake
      x86: Update Intel architectures ISA support in documentation.
      x86: Correct march=sapphirerapids to base on icelake server

Dan Li (2):
      aarch64: Fix redundant check in aut insn generation
      aarch64: Add compiler support for Shadow Call Stack

Daniel Cederman (5):
      sparc: Treat more instructions as load or store in errata workarounds
      sparc: Skip all empty assembly statements
      sparc: Prevent atomic instructions in beginning of functions for UT700
      sparc: Add NOP in stack_protect_set32 if sparc_fix_b2bst enabled
      sparc: Add scheduling information for LEON5

Daniel Le Duc Khoi Nguyen (1):
      doc: Fix typos in alloc_size documentation

Daniel Mercier (1):
      [Ada] Set related expression for external DISCR symbols in Build_Temporary

David Edelsohn (43):
      testsuite: Fix bind_c_array_params_2.f90 on AIX
      aix: delete AIX pre-PowerPC version of atomicity.h
      aix: Remove AIX 6.1 support.
      aix: Switch AIX configurtion to DWARF2 debugging
      testuite: fix libtdc++ libatomic flags
      aix: TLS precompute register parameters (PR 94177)
      powerpc: fix bootstrap.
      aix: Alias -m64 to -maix64 and -m32 to -maix32.
      middle-end: Disable section anchors for VAR_DECLs if -fdata-sections
      aix: Redesign section encoding and selection
      aix: encode function section
      testsuite: Require fsanitize support on the target.
      testsuite: Silence psabi warning
      aix: collect2 text files in archive
      aix: Use assemble_name to output BSS section name.
      testsuite: fix AIX testsuite failures
      aix: Add AIX 7.3 configuration and SPDX License Identifiers.
      bootstrap: Include tm_p.h in btfout.c and ctfout.c.
      aix: align text CSECTs to at least 32 bytes.
      testsuite: Disable BTF and CTF testsuite on AIX.
      aix: Protect AIX math.h overloads with new macro.
      aix: SYSTEM_IMPLICIT_EXTERN_C
      rs6000: inline ldouble __gcc_qsub
      aix: packed struct alignment [PR102068]
      rs6000: fix xcoff section encoding
      testsuite: Fix cf-descriptor-5.f90
      doc: Update MinGW and mingw-64 download links.
      testsuite: Use posix_memalign on AIX for tsvc
      powerpc: Fix vsx_splat_v4si in 32 bit mode
      powerpc: Fix vsx_splat_v4si_di breakage on Power8.
      aix: detect power10 processor.
      Fix typo.
      Fix rs6000 predicates.md use of decl_replaceable_p
      testsuite: powerpc/vec_reve_1.c requires VSX.
      aix: Move AIX math builtins before new builtin machinery.
      testsuite: pragma-optimize.c requires ifunc.
      testsuite: update expected results for ilp32.
      testsuite: sldoi requires VSX.
      testsuite: Ignore pr104159 psabi warning.
      aix: AIX is not GLIBC.
      testsuite: -mbig/-mlittle only is valid for powerpc-linux.
      testsuite: AIX fixes
      testsuite: Add -Wno-psabi to pr104505.c

David Faust (17):
      MAINTAINERS: Add myself for write after approval
      BTF: Support for BTF_KIND_FLOAT
      dwarf: externalize lookup_type_die
      ctfc: externalize ctf_dtd_lookup
      ctfc: add function to lookup CTF ID of a TREE type
      btf: expose get_btf_id
      bpf: BPF CO-RE support
      bpf testsuite: Add BPF CO-RE tests
      doc: BPF CO-RE documentation
      bpf: correct zero_extend output templates
      bpf: add -mcpu and related feature options
      bpf testsuite: add tests for new feature options
      doc: document BPF -mcpu and related options
      bpf: correct extra_headers
      bpf: avoid potential NULL pointer dereference
      bpf: write CO-RE relocation record size only once
      bpf: ensure correct string offsets in BTF.ext

David Malcolm (147):
      analyzer: fix ICE on NULL change.m_expr [PR100244]
      analyzer: fix missing leak after call to strsep [PR100615]
      diagnostic-show-locus: tweak rejection logic
      analyzer: show types for poisoned_svalue and compound_svalue
      analyzer: remove unused prototypes
      analyzer: remove redundant typedef
      analyzer: split out struct bit_range from class concrete_binding
      analyzer: fix region::get_bit_size for bitfields
      analyzer: bitfield fixes [PR99212]
      analyzer: make various region_model member functions const
      analyzer: tweak priority of callstrings in worklist::key_t::cmp
      analyzer testsuite: add explode-2a.c [PR101068]
      analyzer: add class region_to_value_map
      analyzer: track dynamic extents of regions
      analyzer: fix bitfield endianness issues [PR99212,PR101082]
      analyzer: refactor custom_event, introducing precanned_custom_event class
      analyzer: add region_model_manager::get_or_create_int_cst
      analyzer: fix issue with symbolic reads with concrete bindings
      analyzer: fix ICE on malloc/alloca param type mismatch [PR101143]
      jit: fix test-asm failures on i?86
      jit: fix test-vector-* failures
      analyzer: introduce byte_range and use to simplify dumps
      analyzer: eliminate enum binding_key [PR95006]
      input.c: move file caching globals to a new file_cache class
      analyzer: remove add_any_constraints_from_ssa_def_stmt
      analyzer: handle self-referential phis
      analyzer: use DECL_DEBUG_EXPR on SSA names for artificial vars
      analyzer: add -fdump-analyzer-exploded-paths
      analyzer: reimplement -Wanalyzer-use-of-uninitialized-value [PR95006 et al]
      analyzer: fix const-correctness of various is_a_helper
      analyzer: add svalue::maybe_get_region
      analyzer: add __analyzer_dump_state
      analyzer: add region_model::check_region_access
      analyzer: add svalue::can_have_associated_state_p [PR101503]
      analyzer: tweak dumping of min_expr/max_expr
      analyzer: show BB index in BEFORE_SUPERNODE's in-edge
      analyzer: fixes to -fdump-analyzer-state-purge for phi nodes
      analyzer: fix issues with phi handling
      analyzer: fix ICE in binding_cluster::purge_state_involving [PR101522]
      analyzer: bulletproof -Wanalyzer-file-leak [PR101547]
      analyzer: fix feasibility false +ve with overly complex svalues
      analyzer: fix uninit false +ve when returning structs
      analyzer: remove redundant return value from various impl_call_*
      analyzer: play better with -fsanitize=bounds
      analyzer: initial implementation of asm support [PR101570]
      analyzer: fix uninit false positive on overlapping bindings
      analyzer: assume that POINTER_PLUS_EXPR of non-NULL is non-NULL [PR101962]
      analyzer: fix ICE when failing to reconstruct a fn ptr [PR101837]
      analyzer: fix ICE with NULL change.m_expr [PR101875]
      analyzer: rewrite of switch handling
      analyzer: support "bifurcation"; reimplement realloc [PR99260]
      analyzer: fix ICE when discarding result of realloc [PR102225]
      gcc/Makefile.in: fix bug in gengtype link rule
      assert_streq: add newlines to failure message
      diagnostics: escape non-ASCII source bytes for certain diagnostics
      contrib: add unicode/utf8-dump.py
      analyzer: fix ICE in sm_state_map::dump when dumping trees
      c: more precise locations for some -Wpragmas diagnostics
      diagnostic: fix unused variable 'def_tabstop' [PR103129]
      jit: fix -Werror=format-overflow= in testsuite [PR103199]
      analyzer: "__analyzer_dump_state" has no side-effects
      analyzer: add four new taint-based warnings
      analyzer: fix overeager sharing of bounded_range instances [PR102662]
      analyzer: don't assume target has alloca [PR102779]
      analyzer: fix missing -Wanalyzer-write-to-const [PR102695]
      libcpp: escape non-ASCII source bytes in -Wbidi-chars= [PR103026]
      libcpp: capture and underline ranges in -Wbidi-chars= [PR103026]
      analyzer: fix false leak due to overeager state merging [PR103217]
      analyzer: further false leak fixes due to overzealous state merging [PR103217]
      analyzer: verify that -Wanalyzer-too-complex can be disabled via pragmas [PR100524]
      analyzer: add regression test [PR99269]
      analyzer: add regression test [PR94579]
      analyzer: fix false leak seen in Juliet 1.3 [PR102471]
      analyzer: add regression test for leak false +ve [PR103526]
      analyzer: fix equivalence class state purging [PR103533]
      jit: set DECL_CONTEXT of RESULT_DECL [PR103562]
      analyzer: make use of may_be_aliased in alias detection [PR103546]
      analyzer: add region::is_named_decl_p
      analyzer: implement __analyzer_dump_escaped
      analyzer: add logging of aliasing
      analyzer: fix false +ve on bitwise binops (PR analyzer/102692)
      analyzer: complain about tainted sizes with "access" attribute [PR103940]
      Add __attribute__ ((tainted_args))
      analyzer: fix ICE in taint checker on unary ops [PR104029]
      analyzer: fix ICE when combining taint states has_ub and has_lb
      analyzer: fix ICE on realloc of zeroed memory [PR104062]
      analyzer: fix ICE on unary ops folding to casts of constants [PR104089]
      Update per-file selftest and finalization hooks for .c to .cc renaming
      analyzer: add regression test [PR103685]
      analyzer: reject ((i + 1 > 0) && (i < 0)) for integers [PR94362]
      analyzer: fix ICE on vector casts [PR104159]
      testsuite: guard usage of _Float16 in analyzer test [PR104150]
      analyzer: fix sense in range::add_bound [PR94362]
      analyzer: fix missing uninit warning on args to stdio builtins [PR104224]
      analyzer: show region creation events for uninit warnings
      analyzer: stop -ftrivial-auto-var-init from suppressing uninit warnings [PR104270]
      analyzer: implement bit_range_region
      analyzer: consolidate duplicate code in region::calc_offset
      analyzer: fix missing check for uninit of return values
      docs: mention analyzer interaction with -ftrivial-auto-var-init [PR104270]
      analyzer: fix zero-fill of calloc
      analyzer: fixes to realloc-handling [PR104369]
      testsuite: avoid analyzer asm failures on non-Linux
      analyzer: fixes to memcpy [PR103872]
      analyzer: fix ICE on realloc of non-heap [PR104417]
      analyzer: fix hashing of bit_range_region::key_t [PR104452]
      analyzer: more uninit test coverage
      analyzer: fix testsuite issues seen with mingw [PR102052]
      analyzer: handle more casts of string literals [PR98797]
      analyzer: ignore uninitialized uses of empty types [PR104274]
      analyzer: fix uninit false +ve due to optimized conditionals [PR102692]
      analyzer: fix ICE on cast to NULL type [PR104524]
      analyzer: fixes to free of non-heap detection [PR104560]
      analyzer: const functions have no side effects [PR104576]
      analyzer: handle __attribute__((const)) [PR104434]
      analyzer: reduce svalue depth limit from 13 to 12 [PR103521]
      analyzer: fix leak suppression at end of 'main' [PR101983]
      analyzer: more test coverage of leak detection [PR99771]
      analyzer: fix duplicates in check_for_tainted_size_arg
      analyzer: check for writes to consts via access attr [PR104793]
      analyzer: add notes to write-to-const/string from access attr [PR104793]
      analyzer: fix ICE with -fanalyzer-transitivity [PR104863]
      analyzer: presize m_cluster_map in store copy ctor
      analyzer: add test coverage for PR 95000
      analyzer: early rejection of disabled warnings [PR104955]
      analyzer: fix program_point::get_next for PK_BEFORE_STMT
      analyzer: fixes to -fdump-analyzer-state-purge
      analyzer: add tests of boxed values [PR104943]
      analyzer: extend state-purging to locals [PR104943]
      analyzer: fix ICE adding note to disabled diagnostic [PR104997]
      analyzer: use tainted_allocation_size::m_mem_space [PR105017]
      analyzer: fix accessing wrong stack frame on interprocedural return [PR104979]
      analyzer: add region::tracked_p to optimize state objects [PR104954]
      analyzer: fix ICE on memset of untracked region [PR105057]
      gimple-fold: fix location of loads for memory ops [PR104308]
      analyzer: fix ICE with incorrect lookup of cgraph node [PR105074]
      analyzer: ensure that we purge state when reusing a conjured_svalue [PR105087]
      analyzer: skip constant pool in -fdump-analyzer-untracked [PR testsuite/105085]
      jit: further doc fixes
      Document that the 'access' and 'nonnull' attributes are independent
      jit: fix location of .png files for "make jit.pdf" [PR102824]
      analyzer: fix leak false +ve with symbolic writes [PR102208]
      analyzer: fix folding of regions involving unknown ptrs [PR103892]
      analyzer: fix ICE comparing VECTOR_CSTs [PR105252]
      analyzer: fix escaping of pointer arithmetic [PR105264]
      gimple-fold: fix further missing stmt locations [PR104308]
      analyzer: fix ICEs on complex constants [PR105365,105366]

David Seifert (1):
      make `-Werror` optional in libatomic/libbacktrace/libgomp/libitm/libsanitizer

Detlef Vollmann (1):
      libstdc++: Move closing brace outside #endif [PR104866]

Di Zhao (1):
      tree-optimization/102183 - sccvn: fix result compare in vn_nary_op_insert_into

Diane Meirowitz (1):
      doc: improve -fsanitize=undefined description

Dimitar Dimitrov (4):
      libgcc: pru: Place mpyll into its own section
      doc/lto.texi: List slim object format as the default
      pru: Named address space for R30/R31 I/O access
      pru: Fixup flags for .pru_irq_map section

Dmitriy Anisimkov (9):
      [Ada] Rename package instead of each routine
      [Ada] Add socket options to control keepalive on TCP connection
      [Ada] Timeout correction on Get_Socket_Option
      [Ada] Keepalive control on Windows
      [Ada] Remove unused define
      [Ada] Add missed OS constant values
      [Ada] Support gmem.out longer than 2G on 32 bit platforms
      [Ada] Fix exit status of GNAT.Expect.Close call on running process
      [Ada] Fix __gnat_kill on Windows

Doug Rupp (24):
      [Ada] Compile s-mmap on aarch64-linux
      [Ada] vx7-shared-libs - x86_64-vx7r2 (gnat runtime)
      [Ada] vx7-shared-libs: Unused variable __gnat_user_int_connect
      [Ada] The Unix Epochalyse of 2038 - OS_Time
      [Ada] The Unix Epochalypse of 2038 - Use OS_Time
      [Ada] The Unix Epochalypse of 2038 (Warn about time_t in the compiler)
      [Ada] The Unix Epochalyse of 2038 - OS_Time comparison
      [Ada] Unix Epochalypse (s-osprim.adb)
      [Ada] Rename sigtramp-vxworks-target.inc to sigtramp-vxworks-target.h
      [Ada] Declare time_t uniformly based on a system parameter
      [Ada] Use OS_Time for interface to TZ functions.
      [Ada] Cleanup old VxWorks in Makefile.rtl
      [Ada] Add some comments in init.c about the lynx178 signal handler
      [Ada] VxWorks inconsistent use of return type (vx_freq_t)
      [Ada] VxWorks inconsistent use of return type (Int_Unlock)
      [Ada] VxWorks inconsistent use of return type (BOOL)
      [Ada] VxWorks inconsistent use of return type (STATUS)
      [Ada] Switch to SR0660
      [Ada] VxWorks inconsistent use of return type Fixup
      [Ada] Size of time_t in newer verions of VxWorks7
      [Ada] Runtime transition: System.Threads
      [Ada] Get rid of Frontend_Exceptions refs
      [Ada] Delete unused runtime files
      [Ada] vx7r2cert/light-tasking-rtp: undefined refs on ppc/ppc64

Douglas B Rupp (2):
      Fix inaccuracies in VxWorks LINK_SPEC
      Rework VXWORKS_LINK_SPEC for shared objects support

Dragan Mladjenovic (2):
      [MIPS] Remove TARGET_ASM_FUNCTION_RODATA_SECTION
      MAINTAINERS: Add myself for write after approval

Ed Catmur (1):
      c++: Fall through for arrays of T vs T cv [PR104996]

Ed Schonberg (36):
      [Ada] Crash on inherited component in type extension in generic unit.
      [Ada] Crash on predicated constrained out_parameter
      [Ada] Compiler aborts on a constrained subtype of a predicated type
      [Ada] Crash on aggregate in function call in object declaration
      [Ada] Spurious warning about premature use of selected component
      [Ada] Error message on invalid prefixed procedure call
      [Ada] Ongoing work for AI12-0212: container aggregates
      [Ada] Ongoing work for AI12-0212: container aggregates
      [Ada] Handle defaults in declare_expressions in postconditions
      [Ada] Spurious warning on useless assignment with target name
      [Ada] Crash on if_expression used as index of discriminant-dependent array
      [Ada] Missing semantic error on ineffective Others_Clause
      [Ada] Spurious error on protected call in inherited postcondition
      [Ada] Crash on imported object with deep initialization and No_Aborts
      [Ada] Spurious error with component of unchecked_union type
      [Ada] AI12-0138: Iterators and other nonoverridable aspects
      [Ada] Implementation of AI12-0152: legality rules for Raise_Expression
      [Ada] Implementation of AI12-205: defaults for formal types
      [Ada] Crash on limited array object with address clause
      [Ada] Spurious error in instantiation with aggregate and private ancestor
      [Ada] Spurious conformance error on expression function
      [Ada] Improper predicate check on view conversion
      [Ada] Crash on use of 'Img on record type in expression
      [Ada] Incorrect iteration over hashed containers after multiple Inserts
      [Ada] Spurious style message on missing overriding indicator
      [Ada] Diagnose properly illegal uses of Target_Name
      [Ada] Spurious link error with child unit and different Assertion modes.
      [Ada] Refine patch for spurious link error involving discriminated types
      [Ada] Crash on build of Initialization procedure for derived container
      [Ada] Ada2022: implementation of AI12-0212 : iterator specs in array aggregates
      [Ada] Spurious range checks on aggregate with non-static bounds
      [Ada] Implementation of AI12-0212: iterator specs in array aggregates (II)
      [Ada] Crash on improper use of GNAT attribute Type_Key
      [Ada] Fix resolution of Declare_Expressions involving transient scopes
      [Ada] Handle properly user_defined literals given by operators.
      [Ada] Spurious error on user-defined literal and operator

Ed Smith-Rowland (1):
      MAINTAINERS: Update my email and add myself to the DCO list.

Eric Botcazou (228):
      Add XFAIL for gcc.dg/pr84877.c on the SPARC
      Fix loss of optimization of array iteration due to inlining
      Get rid of useless temporary for call to pure function
      Avoid creating useless local bounds around calls
      [Ada] Couple of adjustments for the sake of static analyzers
      [Ada] Eliminate early roundoff error for Long_Long_Float on x86
      [Ada] Fix computation of Prec/Succ of zero without denormals
      [Ada] Reimplement Pred and Succ atttributes for floating-point types
      [Ada] Fix static computation of 'Succ for floating point without denormals
      [Ada] Couple of minor tweaks to Eval_Fat.Succ
      [Ada] Fix internal consistency error with Duration and 32-bit target file
      [Ada] Fix minor issue in Scan_Decimal_Digits
      [Ada] Change rounding mode of 'Machine for static floating point
      [Ada] Fix interaction of 128-bit integer types and -gnato2 mode
      [Ada] Eliminate useless 128-bit overflow check for conversion
      Small housekeeping work in SPARC back-end
      Add parallelism support to gcov for MinGW platforms
      [Ada] Preliminary cleanup in floating-point output implementation
      Fix libiberty link failures in LTO mode for MinGW
      Reuse non-gimple_reg variable for inlining
      [Ada] Implement tiered support for floating-point output operations
      [Ada] Adjust expansion of perfect hash function for Value
      [Ada] Tweak implementation of System.Double_Real.Split
      [Ada] Use inline expansion of Image for enumeration types by default
      [Ada] Use inline expansion of Image for standard boolean by default
      [Ada] Small cleanup in the Expand_Image_Attribute procedure
      [Ada] Do not use hash function for enumeration Value with trampolines
      Generate debug info for local dynamic record types
      Minor formatting tweak
      Fix PR rtl-optimization/100411
      Fix PR target/100402
      [Ada] Implement tiered support for floating-point exponentiation
      [Ada] Make new implementation of System.Fat_Gen.Valid more robust
      [Ada] Reset x87 FPU to 64-bit precision for floating-point I/O on Linux
      [Ada] Document a few more characteristics of floating-point support
      [Ada] Fix off-by-one bug in underflow handling of Scaling
      [Ada] Do not second-guess the hardware for underflow handling of Scaling
      Fix PR testsuite/100454
      [Ada] Raise Constraint_Error for Compose and Scaling if Machine_Overflows
      [Ada] Fix signature mismatch for Defining_Entity
      [Ada] Small cleanup in C header file
      [Ada] Fix type mismatch warnings during LTO bootstrap #1
      [Ada] Fix type mismatch warnings during LTO bootstrap #2
      [Ada] Fix type mismatch warnings during LTO bootstrap #3
      [Ada] Fix type mismatch warnings during LTO bootstrap #4
      [Ada] Fix type mismatch warnings during LTO bootstrap #5
      [Ada] Fix type mismatch warnings during LTO bootstrap #6
      [Ada] Replace packed records with integers in low-level implementation
      Do not apply scalar storage order to pointer fields
      Fix incorrect array bounds with -fgnat-encodings=minimal in DWARF
      Remove obsolete gcc.dg/sso-9.c
      Remove call to gcc_unreachable in range-op.cc
      Avoid spurious rebuild actions in ada/gen_il
      Minor tweak to previous change for the sake of consistency
      Remove obsolete comment and add missing header
      Do not use pragma Provide_Shift_Operators in Atree package
      Add missing pragma Inline for classification attributes
      Further minor fixes
      Minor fixes
      Prune another new LTO warning
      Fix gnat.dg spurious failures on PowerPC64 LE
      Use EXACT_DIV_EXPR as much as possible
      Fix incorrect SLOC on instruction
      Fix spurious No_Elaboration violation for Size attribute
      Fix segfault at run time on strict-alignment platforms
      Always translate Is_Pure flag into pure in C sense
      Fix internal error on locally derived bit-packed array type
      Consistently generate debug info for elaboration variables
      Remove discriminant checks in gigi
      Fix typo and weird syntax in configure script
      Fix thinko in latest change to setup_one_parameter
      Remove stalled TREE_READONLY flag on automatic variable
      Fix C++ libgomp regressions
      Warn on type punning that toggles scalar storage order
      Small tweak to documentation of scalar_storage_order
      Fix signedness issue in DWARF functions (1)
      Fix signedness issue in DWARF functions (2)
      Also generate DW_OP_GNU_variable_value at file scope
      Tame fix for PR ipa/99122
      Fix miscompilation of predicate on bit-packed array types
      Fix duplicate name issues in output of -fdump-ada-spec
      Fix issue for external subtypes with -fdump-ada-spec
      Fix issue for nested record types with -fdump-ada-spec
      Fix thinko in new warning on type punning for storage order purposes
      Reimplement LEAF_REG_REMAP macro for the SPARC
      Fix old thinko in warning on pointer for storage order purposes
      [Ada] Remove const qualifier on a couple of pointed-to types
      [Ada] Small cleanup in exception handling C code
      [Ada] Minor consistency fix for Windows SEH
      [Ada] Remove couple of obsolete declarations
      [Ada] Small cleanup in System.Exceptions
      [Ada] Small cleanup in C header files
      [Ada] Use more straightforward implementation for Current_Entity_In_Scope
      [Ada] Do not perform useless work in Check_No_Parts_Violations
      [Ada] Make Incomplete_Or_Partial_View independent of the context
      [Ada] Fix floating-point exponentiation with Integer'First exponent
      [Ada] Do not clear Is_True_Constant flag on imported constants
      [Ada] Fix invalid JSON real numbers generated with -gnatRj
      [Ada] Export Opt.Assume_No_Invalid_Values for use in back-end
      [Ada] Adjust new fast bit-field copy path to big-endian platforms
      Fix --gdwarf-5 configure tests for Windows
      Emit .file 0 directive earlier in DWARF 5
      [Ada] Ignore again errors when running gen_il-main
      [Ada] Further adjustment and optimization of System.Value_N
      [Ada] Fix old typo in comment
      [Ada] Small tweak in a couple of comments
      Use intermediate integer type with proper signedness
      Fix duplicate name issues in output of -fdump-ada-spec #2
      Improve packed record layout support with -fdump-ada-spec
      Change EH pointer encodings to PC relative on Windows
      [Ada] Fix old typo in comment
      [Ada] Fix violation of No_Implicit_Loops restriction for enumeration type
      [Ada] Use encoded names only with -fgnat-encodings=all
      Fix build failure on Windows with older binutils
      [Ada] Update internal documentation of debugging information
      [Ada] Add paragraph about representation changes and Scalar_Storage_Order
      [Ada] Fix invalid JSON for derived variant record with -gnatRj
      Missing piece in earlier change
      [Ada] Add DWARF 5 support to System.Dwarf_Line
      [Ada] Implement support for unconstrained array types with FLB
      [Ada] Use GNAT encodings only when -fgnat-encodings=all is specified
      Fix oversight in handling of reverse SSO in SRA pass
      Small tweak to expand_used_vars
      Make -no-pie option work for native Windows
      Disable GNAT encodings by default
      Fix regression in debug info for Ada with DWARF 5
      Fix thinko in latest change for GNAT encodings
      Improve compatibility of -fdump-ada-spec with warnings
      Fix debug info for packed array types in Ada
      Fix PR debug/101947
      Give more informative error message for by-reference types
      Remove superfluous call to UI_Is_In_Int_Range
      Implement PR ada/101385
      Fix internal error on pointer-to-pointer binding in LTO mode
      Strengthen compatibility warning for GCC builtins
      Fix internal error on broken import of vector intrinsics
      Fix inaccurate bounds in debug info for vector array types
      Do not issue size error for too large array type
      Fix PR ada/101970
      Fix PR rtl-optimization/102306
      [Ada] Remove inappropriate test from Is_By_Reference_Type
      [Ada] Small cleanup in System.Dwarf_Line
      [Ada] Add support for PE-COFF PIE to System.Dwarf_Line
      [Ada] Adjust latest change for ELF platforms
      Fix no_fsanitize_address effective target
      [Ada] Follow-up tweaks to System.Dwarf_Line
      [Ada] Small optimization to DWARF 5 mode in System.Dwarf_Line
      [Ada] Minor tweaks to System.Dwarf_Line
      [Ada] Regenerate gnat_ugn.texi
      Small tweak to comments in range_cannot_be_superflat
      [Ada] Fix imprecise wording for error on scalar storage order
      [Ada] Generate temporary for if-expression with -fpreserve-control-flow
      [Ada] Remove System.Img_Enum_New unit
      [Ada] Adjust documentation of gnatsymbolize
      [Ada] Fix obsolete comment mentioning girder discriminants
      [Ada] Document that gnatmem requires fixed-position executables
      [Ada] Add new debug switch -gnatd.8
      [Ada] Add missing guard before call to Interface_Present_In_Ancestor
      [Ada] Document rounding mode assumed for dynamic floating-point computations
      Fix PR c++/64697 at -O1 or above
      Fix ICE with stack checking emulation at -O2
      Remove dead code in config/rs6000/vxworks.h
      [Ada] Emit debugging information for TSD object
      [Ada] Adjust documentation of -fdump-ada-spec in GNAT UG
      [Ada] Remove left-overs of Unaligned_Valid attribute
      [Ada] Mark private component renaming as coming from source
      [Ada] Minor include directives placement adjustment
      [Ada] Do not unconditionally inline expression functions with -gnatd.8
      [Ada] Plug small loophole with boolean values
      [Ada] Fix internal error on fixed-point divide, multiply and scaling
      [Ada] Export No_Exception_Propagation_Active for use by gigi
      [Ada] Fix incorrect size for pathological pass-by-copy parameters
      [Ada] Fix for atomic wrongly rejected on object of discriminated type
      [Ada] Tweak the warning about missing local raises
      [Ada] Fix problematic import of type-generic GCC atomic builtin
      Fix PR target/102588
      Fix PR middle-end/102764
      [Ada] Small cleanup in Eval_Integer_Literal
      [Ada] Rewrite tests on Convention_Intrinsic
      [Ada] Expose and use type-generic GCC atomic builtins
      [Ada] Factor out machine rounding operations
      [Ada] Fix problematic conversion of real literal in static context
      Fix again PR middle-end/102764
      Update documentation of %X spec
      Fix couple of issues in large PIC model on x86-64/VxWorks
      [Ada] Print Storage_Pool and Procedure_To_Call fields
      [Ada] Tidy up implementation of Has_Compatible_Type
      [Ada] Add guard against previous error for peculiar ACATS test
      [Ada] Fix oversight in latest change to Has_Compatible_Type
      [Ada] Minor cleanup in translation of calls to subprograms
      Fix -freorder-blocks-and-partition glitch with Windows SEH (continued)
      [Ada] Fix small discrepancy between -gnatG and -gnatD[G] outputs
      [Ada] Tidy up freezing code for instantiations
      [Ada] Tidy up freezing code for instantiations (continued)
      [Ada] Do not return freeze nodes for start of early call regions
      [Ada] Fix incorrect fixed-point computation in expression function
      [Ada] Enhance freezing code for instantiations
      [Ada] Reset internal flags for -gnatD and -gnatG
      [Ada] Fix oversight in minor cleanup
      [Ada] Fix packing for array component with discriminated part
      [Ada] Do not back-annotate maximum size for limited types
      [Ada] Add warning in comment about files copied from libgnat
      [Ada] Rename Any_Access into Universal_Access
      [Ada] Fix spurious error on instantiation with Text_IO name
      [Ada] Fix regression in freezing code for instantiations
      [Ada] Fix a couple of issues with pragma Inspection_Point
      [Ada] Fix error on too large size clause for bit-packed array
      [Ada] Adjust the alignment to the size for bit-packed arrays
      [Ada] Make pragma Inspection_Point work for constants
      [Ada] Fix internal error on unchecked union with component clauses
      [Ada] Fix bogus error on call to subprogram with incomplete profile
      Properly enable -freorder-blocks-and-partition on 64-bit Windows
      [Ada] Fix incomplete debug info for derived packed array type
      [Ada] Relax assertion on designated types for equality operators
      Fix reverse scalar storage order issues in IPA-SRA
      Fix wrong operator for universal_integer operands in instance
      Add testcase for incorrect optimization in Ada
      Use V8+ default in 32-bit mode on SPARC64/Linux
      Skip gnat.dg/div_zero.adb on PowerPC
      Disable new 1/X optimization with -fnon-call-exceptions
      Empty the base_types vector before (re)populating it
      Add optmization testcase for incorrect optimization in Ada
      Add missing target selector
      Fix issue for pointers to anonymous types with -fdump-ada-spec
      Fix internal error with vectorization on SPARC
      Fix wrong SRA with VIEW_CONVERT_EXPR and reverse SSO
      Do not use DW_OP_not for TRUTH_NOT_EXPR in conditional expressions
      Reduce usage of limited_with clauses with -fdump-ada-spec

Eric Gallager (6):
      Add obj-c++.srcman target to gcc/objcp/Makefile.
      Mark certain subdirectories as missing TAGS targets.
      Add install-dvi Makefile targets.
      Make etags path used by build system configurable
      Fix autoconf regeneration slip-up.
      Fix typo in gcc/params.opt.

Etienne Servais (23):
      [Ada] Add missing functions to Wide_Wide_Characters Handling
      [Ada] Forbids use of Compile_Time_(Error|Warning) as configuration pragma
      [Ada] Reorder subprogram spec and bodies in alphabetical order
      [Ada] Find an interpretation for membership test with a singleton value
      [Ada] Remove constant arguments
      [Ada] Change format of the ?? warning insertion sequence
      [Ada] Build activation chain for BIP only when needed
      [Ada] Return a valid value when handling Constraint_Error
      [Ada] Initialize Current_Source_Unit
      [Ada] Warn when interfaces swapped between full and partial view
      [Ada] Fix Constraint error on rexgexp close bracket find algorithm
      [Ada] ACATS BDC1002 shall not error on arbitrary aspect
      [Ada] Avoid duplication for Sets functions
      [Ada] Fix typo in comment
      [Ada] Fix condition to build subtype for discriminated types
      [Ada] Fix typo in comments found running aspell
      [Ada] Fix typo on compatibility
      [Ada] Check scalar range in arrays constructed by concatenation
      [Ada] Update -gnatwr doc for import of parent package
      [Ada] Fix typo on "Placement" in comment
      [Ada] Fix the check of the 'Old prefix
      [Ada] Fix check for implicit allocation of dynamic objects
      [Ada] Accept square brackets for expression functions

Eugene Rozenfeld (9):
      Fix a typo in an AutoFDO error string
      Update gen_autofdo_event.py and gcc-auto-profile.
      Fixes for AutoFDO tests
      Fix indir-call-prof-2.c with AutoFDO
      Fixes for AutoFDO testing
      Fix indirect call inlining with AutoFDO
      Improve AutoFDO count propagation algorithm
      AutoFDO: don't set param_early_inliner_max_iterations to 10.
      AutoFDO: Don't try to promote indirect calls that result in recursive direct calls

Fedor Rybin (1):
      [Ada] Fix index range violations in krunch

Feng Xue (3):
      Fix null-pointer dereference in delete_dead_or_redundant_call [PR102451]
      Fix value uninitialization in vn_reference_insert_pieces [PR102400]
      Fix typo in type verification.

Florian Weimer (5):
      libgcc: Remove tbase member from struct unw_eh_callback_data
      libgcc: Remove dbase member from struct unw_eh_callback_data if NULL
      libgcc: Split FDE search code from PT_GNU_EH_FRAME lookup
      libgcc: Use _dl_find_object in _Unwind_Find_FDE
      libgcc: Fix _Unwind_Find_FDE for missing unwind data with glibc 2.35

Francois-Xavier Coudert (26):
      Fix timezone handling near year boundaries
      Fix FLUSH IOSTAT value
      testsuite: mark tests that require alias
      Fortran: add support for IEEE intrinsics on aarch64 non-glibc targets
      Fortran: allow __float128 on targets where long double is not REAL(KIND=10)
      Fortran: simplify library code for integer-to-decimal conversion
      Fortran: speed up decimal output of integers
      Fortran: fix use of static_assert() to conform to C11
      Fortran: Emit correct types for CHARACTER(C_CHAR), VALUE arguments
      Libbacktrace: Fix the use of newline in sed replacement
      LTO: Prune some warnings in the testsuite
      Fortran: keep values of IEEE_CLASS_TYPE in sync
      Fortran: Fix test on targets without REAL128
      Fixincludes: Handle __FLT_EVAL_METHOD__ == 16 on darwin
      Fortran: Allow IEEE_CLASS to identify signaling NaNs
      Fortran: fix testcase compiler flags
      Fortran: fix testcase comment
      Fortran: allow IEEE_VALUE to correctly return signaling NaNs
      Fortran: xfail signaling NaN testcases on x87
      Fortran: remove new files introduced by mistake
      Fortran: provide a fallback implementation of issignaling
      Fortran: fix typo in signaling NaN testcase
      Fortran: do not run signaling testsuite on 32-bit x86/x86_64
      Fortran: fix preprocessor condition
      Fortran: fix issignaling() implementation
      Fortran: fix bootstrap on SPARC/Solaris

François Dumont (14):
      libstdc++: Limit allocation on iterator insertion in Hashtable [PR 96088]
      libstdc++: [_GLIBCXX_DEBUG] Enhance rendering of assert message
      libstdc++: Fix dg-prune-output assertion message
      libstdc++: [_GLIBCXX_DEBUG] Avoid allocator operator== when always equal
      libstdc++: Fix 48631_neg test in _GLIBCXX_INLINE_VERSION mode
      libstdc++: [_GLIBCXX_DEBUG] Implement unordered container merge
      libstdc++: [_GLIBCXX_DEBUG] Remove _Safe_container<>::_M_safe()
      libstdc++: Unordered containers merge re-use hash code
      libstdc++: [_GLIBCXX_DEBUG] Reduce performance impact on std::erase_if
      libstdc++: [_GLIBCXX_DEBUG] Enhance std::erase_if for vector/deque
      libstdc++: Overload std::__to_address for __gnu_cxx::__normal_iterator.
      libstdc++: Optimize operations on small size hashtable [PR 68303]
      libstdc++: Remove redundant line in versioned namespace linker script
      libstdc++: Fix printing of std::span for versioned namespace

François-Xavier Coudert (2):
      Darwin: Future-proof and homogeneize detection of darwin versions
      Fortran: Cast arguments of <ctype.h> functions to unsigned char

Frederic Konrad (8):
      [Ada] sigtramp: fix powerpc64 against -fPIC
      [Ada] powerpc64-wrs-vxworks7r2: build shared libgnat
      [Ada] aarch64-rtems6: use wraplf variant for a-nallfl
      [Ada] rtems: add 128bit support for aarch64
      Fix path to t-ppc64-fp for ppc*-vxworks7* libgcc tmake_file
      VxWorks config fixes for shared objects
      Tigthen libc_internal and crtstuff for VxWorks shared objects
      Drop the fpic multilib for powerpc*-vxworks*

Frederik Harwath (1):
      Re OpenACC "gang reduction on an orphan loop" error message

Fritz Reese (1):
      fortran: Fix conv of UNION constructors [PR105310]

GCC Administrator (403):
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.
      Daily bump.

Gaius Mulley (2):
      MAINTAINERS: Add myself for write after approval and DCO.
      MAINTAINERS: Change of email address.

Gary Dismukes (33):
      [Ada] AI12-0397: Default_Initial_Condition expressions for derived types
      [Ada] Warning for 'Class applied to untagged incomplete type
      [Ada] SPARK needs DIC expressions within partial DIC procedures for abstract types
      [Ada] Add mention of underscore and fix grammar error in doc for -gnatd
      [Ada] Remove some ??? comments
      [Ada] Error when passing subprogram'Access to null-defaulted formal subprogram
      [Ada] Error in instance on incomplete actual passed to formal incomplete type
      [Ada] Implementation of Inox feature of fixed lower bounds on array types/subtypes
      [Ada] Add documentation for the array fixed-lower-bound feature
      [Ada] Error issued on string literal assigned to fixed-lower-bound array
      [Ada] Missing check for assigning too-large array to fixed-lower-bound object
      [Ada] Additional error checking on index constraints with fixed-lower-bound ranges
      [Ada] Compiler crash on sliding of fixed-lower-bound object in Loop_Invariant
      [Ada] Implement fixed-lower-bound consistency checks for qualified_expressions
      [Ada] Overriding errors on renamings and instances overriding predefined operators
      [Ada] Support for Object.Op subprogram-call notation for untagged types
      [Ada] Removal of various ??? comments plus related code changes
      [Ada] Reformatting, typo corrections, and minor rewording of a comment.
      [Ada] Regression on overloaded prefixed calls related to prefixed-call extension
      [Ada] Implement new legality checks specified by AI12-0412
      [Ada] Assertion errors on concurrent types with -gnatc and extensions enabled
      [Ada] Typo corrections and minor reformatting
      [Ada] Implementation of Preelaborable_Initialization attribute for AI12-0409
      [Ada] Presence of abstract operator function causes resolution problems
      [Ada] Assert_Failure on derived type with inherited Default_Initial_Condition
      [Ada] Spurious warning about hiding in generic instantiation
      [Ada] Completion of support for AI12-0409 (attribute Preelaborable_Initialization)
      [Ada] Front-end support for Storage_Model feature
      [Ada] Warning on nonmatching subtypes in fully conforming subprogram specs and bodies
      [Ada] Errors on globals in expressions of predicate aspects in generic bodies
      [Ada] Storage error on untagged prefixed subprogram calls with -gnatX
      [Ada] Allow formal functions to have a default in the form of an expression function
      [Ada] Conformance error on protected subp with anonymous-access-to-tagged formal

Geng Qi (14):
      RISC-V: For '-march' and '-mabi' options, add 'Negative' property mentions itself.
      doc/options.texi: Fix the description of 'Negative'.
      RISC-V: Properly parse the letter 'p' in '-march'.
      C-SKY: Add fpuv3 instructions and CK860 arch.
      C-SKY: Delete LO_REGS and HI_REGS, use HILO_REGS instead.
      C-SKY: Bug fix for bad setting of TARGET_DSP and TARGET_DIV.
      C-SKY: Separate FRAME_POINTER_REGNUM into FRAME_POINTER_REGNUM and HARD_FRAME_POINTER_REGNUM.
      C-SKY: Add cases for csky fpuv3 instructions.
      C-SKY: Add instruction "ld.bs".
      C-SKY: Fix FAIL of gcc.dg/torture/stackalign/builtin-return-2.c.
      C-SKY: Delete definition TARGET_PROMOTE_PROTOTYPES, just use the default definition.
      C-SKY: Support fldrd/fstrd for fpuv2 and fldr.64/fstr.64 for fpuv3.
      C-SKY: Delete TARGET_CAN_CHANGE_MODE_CLASS, use defualt definition.
      RISC-V: Pattern name fix mul*3_highpart -> smul*3_highpart.

Gerald Pfeifer (11):
      libstdc++: Move unix.org reference to https
      Fortran: Fix typo in documentation of BOZ
      libstdc++: Remove "Intel Compilers" bibliography entry
      libiberty: No longer use /usr/tmp
      doc: Convert mingw-w64.org links to https
      doc: Remove details around Itanium on GNU/Linux and Windows
      doc: No longer generate old.html
      include: Allow for our md5.h to defer to the system header
      doc: Remove references to FreeBSD 1 and 2
      doc: Tweak the www.bitwizard.nl reference
      doc: Adjust mingw-w64 download link

Ghjuvan Lacambre (45):
      [Ada] Remove commented code
      [Ada] Don't emit style errors when parens are required
      [Ada] Move Build_And_Insert_CUDA_Initialization to expansion phase
      [Ada] Make Is_OK_Static_Subtype use Is_Static_Subtype
      [Ada] Explain meaning of Non_Std_Executable
      Replace ? with ?? in warning messages
      [Ada] Implement basic support for -fdiagnostics-format=json
      [Ada] Make -gnatU and -gnatw.d the default
      [Ada] Minor reformattings
      [Ada] Address ??? comments
      [Ada] Fix overriding subprogram being incorrectly seen as returning
      [Ada] Print JSON continuation messages as separate messages
      [Ada] Turn GNAT_Annotate into its own pragma
      [Ada] Move overriding rename error message from declaration to use
      [Ada] Fix missing minus sign in literal translation
      [Ada] Fix missing error messages when returning limited type
      [Ada] Warn on statically known empty loop caused by constraint
      [Ada] Prevent crash on inspection point for unfrozen entity
      [Ada] Fix use of single question mark in error message
      [Ada] Duplicated D lines in ali files
      [Ada] par-ch6: do not mark subprogram as missing "is" if imported
      [Ada] usage.adb: make -gnatw.c description clearer
      [Ada] Move Build_And_Insert_Cuda_Initialization to Expand_CUDA_Package
      [Ada] Work around CodePeer bug by declaring variable
      [Ada] Refactor scan_backend_switch to share logic across backends
      [Ada] Capitalize comment
      [Ada] Only assign type to op if compatible
      [Ada] Fix condition in op interpretation resolution
      [Ada] Fix ignored dynamic predicates specified through "predicate" aspect
      [Ada] exp_pakd.adb: work around spurious Codepeer warnings
      [Ada] Replace use of 'Image with use of Error_Msg_Uint
      [Ada] Fix CodePeer warnings
      [Ada] Stub CUDA_Device aspect
      [Ada] Fix CodePeer warnings
      [Ada] Empty CUDA_Global procedures when compiling for host
      [Ada] Implement CUDA_Device
      [Ada] Import binder globals as constant
      [Ada] Fix deleted Compile_Time warnings causing crashes
      [Ada] Initialize variable to Empty
      [Ada] sem_util.adb: fix typos in Accessibility_Level docs
      [Ada] Accessibility fix
      [Ada] Fix Codepeer warning
      [Ada] Do not free task for _parent
      [Ada] Make Timed_Task_Entry_Call's defer_abort nestable
      [Ada] Fix uses of pragma Unreferenced in MinGW runtime unit

Giuliano Belinassi (1):
      Do not abort compilation when dump file is /dev/*

Guo, Xuepeng (1):
      AVX512FP16: Initial support for AVX512FP16 feature and scalar _Float16 instructions.

H.J. Lu (149):
      x86: Use crc32 target option for CRC32 intrinsics
      x86: Add -mmwait for -mgeneral-regs-only
      op_by_pieces_d::run: Change a while loop to a do-while loop
      Generate offset adjusted operation for op_by_pieces operations
      Don't use nullptr return from simplify_gen_subreg
      Update alignment_for_piecewise_move
      GCC_CET_HOST_FLAGS: Check if host supports multi-byte NOPs
      GCC_CET_HOST_FLAGS: Check if host supports multi-byte NOPs
      Add a test for PR tree-optimization/42587
      libsanitizer: cherry-pick from upstream
      Elide expand_constructor if move by pieces is preferred
      x86: Remove MAX_BITSIZE_MODE_ANY_INT
      x86: Update g++.target/i386/pr100885.C
      x86: Don't compile pr82735-[345].c for x32
      Always enable DT_INIT_ARRAY/DT_FINI_ARRAY on Linux
      libgomp: Compile tests with -march=i486 only if needed
      Update doc/tm.texi.in to fix commit 4a0c4eaea32
      x86: Replace ix86_red_zone_size with ix86_red_zone_used
      Add a target calls hook: TARGET_PUSH_ARGUMENT
      x86: Convert CONST_WIDE_INT/CONST_VECTOR to broadcast
      x86: Add vec_duplicate<mode> expander
      soft-fp: Update soft-fp from glibc
      Don't use vec_duplicate on vector in CTOR expansion
      libffi/x86: Always check __x86_64__ for x86 hosts
      x86: Don't enable UINTR in 32-bit mode
      x86: Don't issue vzeroupper if callee returns AVX register
      x86: Enable the GPR only instructions for -mgeneral-regs-only
      libsanitizer: Merge with upstream
      libsanitizer: Apply local patches
      libsanitizer: Update LOCAL_PATCHES
      libsanitizer: Bump asan/tsan versions
      x86: Remove OPTION_MASK_ISA_SSE4_2 from CRC32 _builtin functions
      x86: Don't return hard register when LRA is in progress
      x86: Don't set AVX_U128_DIRTY when zeroing YMM/ZMM register
      x86: Don't enable LZCNT/POPCNT if disabled explicitly
      Add QI vector mode support to by-pieces for memset
      i386: Improve SImode constant - __builtin_clzll for -mno-lzcnt
      x86: Add TARGET_GEN_MEMSET_SCRATCH_RTX
      x86: Avoid stack realignment when copying data
      x86: Update piecewise move and store
      x86: Add AVX2 tests for PR middle-end/90773
      x86: Add tests for piecewise move and store
      x86: Also pass -mno-avx to pr72839.c
      x86: Also pass -mno-avx to cold-attribute-1.c
      x86: Also pass -mno-avx to sw-1.c for ia32
      x86: Update gcc.target/i386/incoming-11.c
      x86: Also pass -mno-sse to vect8-ret.c
      x86: Add testcases for PR target/80566
      x86: Use XMM31 for scratch SSE register
      by_pieces: Pass MAX_PIECES to op_by_pieces_d
      x86: Avoid stack realignment when copying data with SSE register
      x86: Update STORE_MAX_PIECES
      <x86gprintrin.h>: Add pragma GCC target("general-regs-only")
      Add tests for PR tree-optimization/88531
      x86: Optimize load of const FP all bits set vectors
      Enable gcc.target/i386/pr88531-1a.c for all targets
      x86: Broadcast from integer to a pseudo vector register
      x86: Add non-destructive source to @xorsign<mode>3_1
      x86: Enable FMA in unsigned SI to SF expanders
      AVX512FP16: Add tests for vector passing in variable arguments.
      AVX512FP16: Add ABI tests for xmm.
      x86-64: Update AVX512FP16 ABI tests for x32
      AVX512FP16: Enable _Float16 autovectorization
      x86: Add TARGET_AVX256_[MOVE|STORE]_BY_PIECES
      x86: Update -mtune=tremont
      x86: Update memcpy/memset inline strategies for -mtune=tremont
      x86: Properly handle USE_VECTOR_FP_CONVERTS/USE_VECTOR_CONVERTS
      x86: Add TARGET_SSE_PARTIAL_REG_[FP_]CONVERTS_DEPENDENCY
      AVX512FP16: Add scalar/vector bitwise operations, including
      AVX512FP16: Enable FP16 mask load/store.
      x86: Clean up gcc.target/i386/auto-init-* tests
      libsanitizer: Merge with upstream
      libsanitizer: Apply local patches
      libsanitizer: Bump asan/tsan versions
      Update c-c++-common/tsan/atomic_stack.c
      libsanitizer: Update LOCAL_PATCHES
      Use unsigned long long in asm-x86-linux-rdmsr.c
      libsanitizer: Merge with upstream
      libsanitizer: Apply local patches
      libsanitizer: Update LOCAL_PATCHES
      libsanitizer: Add AM_CCASFLAGS to Makefile.am
      Change set_ptr_nonull to set_ptr_nonnull in comments
      387-12.c: Require ia32 target instead of -m32
      gcc-changelog: Add libffi/ to ignored_prefixes
      libffi: Add HOWTO_MERGE, autogen.sh and merge.sh
      libffi: Sync with libffi 3.4.2
      libffi: Integrate build with GCC
      libffi: Integrate testsuite with GCC testsuite
      libffi: Add LOCAL_PATCHES
      libffi: Update ChangeLog.libffi for libffi 3.4.2
      x86: Document -fcf-protection requires i686 or newer
      Move bind-c-intent-out-2.f90 to gfortran.dg/ubsan
      libffi: Update LOCAL_PATCHES
      libsanitizer: Apply local patches
      libffi: Add --enable-cet to configure
      x86: Check leal/addl gcc.target/i386/amxtile-3.c for x32
      libsanitizer: Apply local patches
      Add a testcase for PR tree-optimization/102892
      libsanitizer: Merge with upstream
      libsanitizer: Apply local patches
      libsanitizer: Update LOCAL_PATCHES
      libffi: Update LOCAL_PATCHES
      x86: Add gcc.target/i386/pr103205-2.c
      Check optab before transforming atomic bit test and operations
      Add a missing return when transforming atomic bit test and operations
      x86: Remove "%!" before ret
      x86: Add -mharden-sls=[none|all|return|indirect-branch]
      x86: Add -mindirect-branch-cs-prefix
      pr103194-5.c: Replace long with int64_t
      Add TARGET_IFUNC_REF_LOCAL_OK
      x86: Scan leal in PR target/83782 tests for x32
      x86: Add -mmove-max=bits and -mstore-max=bits
      libsanitizer: Use SSE to save and restore XMM registers
      libsanitizer: Update LOCAL_PATCHES
      x86: Check FUNCTION_DECL before calling cgraph_node::get
      Sync with binutils: GCC: Pass --plugin to AR and RANLIB
      Sync with binutils: Support the PGO build for binutils+gdb
      Revert "Sync with binutils: GCC: Pass --plugin to AR and RANLIB"
      smuldi3_highpart.c: Replace long with long long for -mx32
      i386: Check AX input in any_mul_highpart peepholes
      ix86: Don't use the 'm' constraint for x86_64_general_operand
      x86: Rename -harden-sls=indirect-branch to -harden-sls=indirect-jmp
      x86: Generate INT3 for __builtin_eh_return
      [Ada] Compile s-mmap and 128bit on x86_64-linux-gnux32
      [Ada] Set target_cpu to x32 for x86_64-linux-gnux32
      x86: Properly disable -fsplit-stack support on non-glibc targets
      x86: Also check mode of memory broadcast in bcst_mem_operand
      x86: Check each component of source operand for AVX_U128_DIRTY
      x86: Add -m[no-]direct-extern-access
      x86: Compile PR target/104441 tests with -march=x86-64
      pr104458.c: Replace long with long long for -mx32
      x86: Update PR 35513 tests
      pieces-memset-21.c: Expect vzeroupper for ia32
      Clear currently_expanding_gimple_stmt properly
      x86: Limit PR 35513 tests to Linux
      x86: Always return pseudo register in ix86_gen_scratch_sse_rtx
      x86: Disallow unsupported EH return
      x86: Also check _SOFT_FLOAT in <x86gprintrin.h>
      x86: Properly check FEATURE_AESKLE
      x86: Disable AVX on pr86722.c and pr90356.c
      x86: Disable SSE in ISA2 for -mgeneral-regs-only
      x86: Use -msse2 on gcc.target/i386/pr95483-1.c
      x86: Use x constraint on SSSE3 patterns with MMX operands
      x86: Use x constraint on KL patterns
      x86: Use Yw constraint on *ssse3_pshufbv8qi3
      x86: Also use Yw in *ssse3_pshufbv8qi3 clobber
      libsanitizer: cherry-pick commit b226894d475b from upstream
      x86: Add missing .note.GNU-stack to assembly source
      x86: Add .note.GNU-stack section only for Linux

Hafiz Abid Qadeer (6):
      [amdgcn] Update CFI configuration
      [amdgcn] Use frame pointer for CFA expressions.
      [amdgcn] Add hook for DWARF address spaces.
      Add support for allocate clause (OpenMP 5.0).
      Change kind of integer literal to fix a testcase.
      Fix multiple issue in the testcase allocate-1.f90.

Hans-Peter Nilsson (28):
      reorg.c (fill_slots_from_thread): Reinstate code typoed out in "Remove CC0".
      Fix MMIX breakage; ICE in df_ref_record, at df-scan.c:2598
      fix breakage from "libstdc++: Remove unnecessary uses of <utility>"
      doc: correct documentation of "call" (et al) operand 2.
      MMIX: remove generic placeholders parameters in call insn patterns.
      gcc.dg/uninit-pred-9_b.c: Xfail for MMIX too
      gcc.dg/tree-ssa/ssa-dse-26.c: Skip on mmix-knuth-mmixware
      libstdc++: Tweak timeout for testsuite/std/ranges/iota/max_size_type.cc
      gcc.dg/uninit-pred-9_b.c: Xfail for CRIS too
      gfortran.dg/PR82376.f90: Avoid matching a file-path
      Fix fatal typo in gcc.dg/no_profile_instrument_function-attr-2.c
      libstdc++: Use GCC_TRY_COMPILE_OR_LINK for getentropy, arc4random
      gcc.dg/uninit-pred-9_b.c: Correct last adjustment for cris-elf
      testsuite: Use attribute "noipa" in sibcall tests
      cris: Parenthesize parameter to as_a.
      cris: Avoid format-string-related warnings in calls to error functions
      libstdc++ testsuite: Don't run lwg3464.cc tests on simulators
      cris: Don't default to -mmul-bug-workaround
      cris: For expanded movsi, don't match operands we know will be reloaded
      cris: Remove CRIS v32 ACR artefacts
      cris: Don't discriminate against ALL_REGS in TARGET_REGISTER_MOVE_COST
      cris: Reload using special-regs before general-regs
      toplevel: Makefile.def: Make configure-sim depend on all-readline
      libstdc++-v3 testsuite: Call fesetround(FE_DOWNWARD) only if defined
      reload: Adjust comment in find_reloads about subset, not intersection
      libstdc++-v3 expected: Correct minimal-size test in requirements.cc
      doc/invoke.texi: CRIS: Remove references to cris-axis-linux-gnu
      doc/install.texi: CRIS: Remove gone websites. Adjust CRIS targets

Haochen Gui (9):
      rs6000: Expand PROMOTE_MODE marco in rs6000_promote_function_mode
      rs6000: Disable mode promotion for pseudos
      Fix execution failure of parity_1.f90 on P10 [PR100952]
      Fix failed test cases caused by disabling mode promotion for pseudos [PR100952]
      Optimize the builtin vec_xl_sext
      Disables gimple folding for VSX_BUILTIN_XVMINDP, VSX_BUILTIN_XVMAXDP,ALTIVEC_BUILTIN_VMINFP and ALTIVEC_BUILTIN_VMAXFP when fast-math is not set.
      rs6000: Optimize code generation of vec_reve [PR100868]
      rs6000: Define a pattern for mffscrni.  If the RN is a constant, it can call gen_rs6000_mffscrni directly.
      rs6000: Split pattern for TI to V1TI move [PR103124]

Haochen Jiang (6):
      Add combine splitter to transform vpcmpeqd/vpxor/vblendvps to vblendvps for ~op0
      Add combine splitter to transform vashr/vlshr/vashl_optab to ashr/lshr/ashl_optab for const vector duplicate operand.
      Add combine splitter to transform vpternlogd/vpcmpeqd/vpxor/vblendvps to vblendvps for ~op0
      Fix tdpbf16ps testcase
      Extend predicate of operands[1] from register_operand to vector_operand for andnot insn.
      Optimize a ^ ((a ^ b) & mask) to (~mask & a) | (b & mask).

Harald Anlauf (111):
      Fortran - allow target of pointer from evaluation of function-reference
      PR fortran/100154 - ICE in gfc_conv_procedure_call, at fortran/trans-expr.c:6131
      PR fortran/100274 - ICE in gfc_conv_procedure_call, at fortran/trans-expr.c:6131
      PR fortran/98411 - Pointless warning for static variables
      Fortran: fix passing return value to class(*) dummy argument
      PR fortran/100656 - prevent ICE in gfc_conv_expr_present
      Fortran: Fix erroneous "pointer argument is not associated" runtime error
      Fortran - ICE in inline_matmul_assign
      Fortran - ICE in gfc_check_do_variable, at fortran/parse.c:4446
      Revert "Fortran - ICE in gfc_check_do_variable, at fortran/parse.c:4446"
      Fortran - ICE in gfc_check_do_variable, at fortran/parse.c:4446
      Fortran - fix conversion to result type for the min/max intrinsic
      Fortran - ICE in gfc_conv_expr_present initializing non-dummy class variable
      Fortran: reject FORMAT tag of unknown type.
      Fortran: ICE, OOM while calculating sizes of derived type array components
      Fortran: extend check for array arguments and reject CLASS array elements.
      Fortran: ICE in resolve_allocate_deallocate for invalid STAT argument
      Fortran: ICE with automatic character object, save, and various options
      Fortran: fix checks for STAT= and ERRMSG= arguments of SYNC ALL/SYNC IMAGES
      Fortran - simplify length of substring with constant bounds
      Fortran - use temporary char buffer for passing HOST_WIDE_INT to gfc_error
      Fortran: fix pointless warning for static variables
      Fortran - reject function entries with mismatched characteristics
      Fortran - correct check for constraint F2008:C628 / F2018:C932
      Fortran - fix whitespace issue during parsing of assigned goto
      Fortran - extend set of substring expressions handled in length simplification
      Fortran - improve wording of error message
      Fortran - improve error recovery determining array element from constructor
      Fortran - out of bounds in array constructor with implied do loop
      Fortran - fix handling of substring start and end indices
      Fortran - ensure simplification of bounds of array-valued named constants
      Fortran - fix ICE during error recovery checking entry characteristics
      Fortran - fix handling of optional allocatable DT arguments with INTENT(OUT)
      Fortran - (large) arrays in the main shall be static
      MAINTAINERS: add myself as Fortran reviewer
      Fortran - improve checking for intrinsics allowed in constant expressions
      Fortran: fix error recovery for invalid constructor
      Fortran: fix reference to Fortran standard in comment
      Fortran: resolve expressions during SIZE simplification
      Fortran: accept both old and new-style relational operators in USE, ONLY
      Fortran: handle initialization of derived type parameter arrays from scalar
      Fortran: fix order of checks for the SHAPE intrinsic
      Fortran: generate error message for negative elements in SHAPE array
      Fortran: validate shape of arrays in constructors against declarations
      Fortran: error recovery on initializing invalid derived type array component
      Fortran: do not restrict PDT KIND and LEN type parameters to default integer
      Fortran: [PDT] KIND and LEN type parameters are mutually exclusive
      Fortran: error recovery on invalid code with SELECT TYPE
      Fortran: update gfortran.texi list of frequent reporters
      Fortran: improve formatting of tables in intrinsic.texi
      Fortran: fix descriptions in intrinsic.texi
      Fortran: non-standard intrinsics SHORT and LONG have been removed
      Fortran: remove descriptions of SHORT and LONG in intrinsic.texi
      Fortran: a symbol in a COMMON cannot be a coarray
      Fortran: fix simplification of array-valued parameter expressions
      Fortran: error recovery on rank mismatch of array and its initializer
      Fortran: avoid NULL pointer dereferences
      Fortran: avoid NULL pointer dereference on invalid range in logical SELECT CASE
      Fortran: NULL() is not interoperable
      Fortran: fix lookup for gfortran builtin math intrinsics used by DEC extensions
      Fortran: fix scalarization for intrinsic LEN_TRIM with present KIND argument
      Fortran: do not attempt simplification of [LU]BOUND for pointer/allocatable
      Fortran: improve check of arguments to the RESHAPE intrinsic
      Fortran: check type of SUB argument to IMAGE_INDEX
      Fortran: error recovery when simplifying MINLOC/MAXLOC
      Fortran: improve expansion of constant array expressions within constructors
      Fortran: improve checking of array specifications
      Fortran: add check for type of upper bound in case range
      Fortran: catch failed simplification of bad stride expression
      Fortran: perform array subscript checks only for valid INTEGER bounds
      Fortran: dimensions of an array have to be non-negative
      Fortran: avoid NULL pointer dereference on missing or bad dummy arguments
      Fortran: fix check for pointer dummy arguments with INTENT(IN)
      Fortran: fix checking of elemental functions of type CLASS
      Fortran: PACK intrinsic should not try to read from zero-sized array
      Fortran: prevent NULL pointer dereferences checking do-loop contained stuff
      Fortran: prevent NULL pointer dereference in check of passed do-loop variable
      Fortran: reject BOZ type argument to SIZEOF().
      Fortran: CASE selector expressions must be scalar
      Fortran: BOZ literal constants are not interoperable
      Fortran: avoid several NULL pointer dereferences during error recovery
      Fortran: reject invalid non-constant pointer initialization targets
      Fortran: check arguments of MASKL/MASKR intrinsics before simplification
      Fortran: fix error recovery on bad structure constructor in DATA statement
      Fortran: fix ICE overloading elemental intrinsics
      Fortran: always reject alternate return specifier as argument of intrinsics
      Fortran: fix ICE and wrong code with TRANSFER and CHARACTER(kind=4)
      Fortran: handle expansion of zero-sized array constructors
      Fortran: fix simplification of TRANSFER for zero-sized character array result
      Fortran: optional argument DIM for intrinsics NORM2, PARITY must be scalar
      Fortran: MOLD argument to TRANSFER intrinsic having storage size zero
      Fortran: add missing conversions for result of intrinsics to result type
      Fortran: fix issues with internal conversion between default and wide char
      Fortran: error recovery when simplifying EOSHIFT
      Fortran: reject simplifying TRANSFER for MOLD with storage size 0
      Fortran: try simplifications during reductions of array constructors
      Fortran: improve error recovery on bad array section
      Fortran: improve check of pointer initialization in DATA statements
      Fortran: skip compile-time shape check if constructor shape is not known
      Fortran: frontend code for F2018 QUIET specifier to STOP and ERROR STOP
      Fortran: error recovery after invalid assumed type declaration
      Fortran: do not frontend-optimize MINLOC/MAXLOC for character arrays
      Fortran: improve error recovery on invalid array section
      Fortran: ensure intialization of stride array
      Fortran: character length of pointer assignments in structure constructors
      Fortran: avoid NULL pointer dereference checking elemental procedure args
      Fortran: NULL pointer dereference checking arguments to ASSOCIATED intrinsic
      Fortran: a RECURSIVE procedure cannot be an INTRINSIC
      Fortran: improve error recovery for invalid coarray function declarations
      Fortran: fix checking of coshape specification in ALLOCATE statement
      Fortran: fix error recovery on invalid array section

Hongyu Wang (33):
      Clear odata for aes(enc|dec)(wide)?kl intrinsics when ZF is set.
      MAINTAINERS: Add myself for write after approval
      i386: Fix typos in amxbf16 runtime test.
      i386: Optimize lea with zero-extend. [PR 101716]
      AVX512FP16: Adjust builtin name for FP16 builtins to match AVX512F style
      AVX512FP16: Add expander for smin/maxhf3.
      AVX512FP16: Add fix(uns)?_truncmn2 for HF scalar and vector modes
      AVX512FP16: Add float(uns)?mn2 expander
      AVX512FP16: add truncmn2/extendmn2 expanders
      AVX512FP16: Enable vec_cmpmn/vcondmn expanders for HF modes.
      AVX512FP16: Support cond_op for HFmode
      AVX512FP16: Support basic 64/32bit vector type and operation.
      AVX512FP16: Adjust builtin for mask complex fma
      AVX512FP16: Fix testcase for complex intrinsic
      AVX512FP16: Fix ICE for 2 v4hf vector concat
      AVX512FP16: Enhance vector shuffle builtins
      i386: Fix wrong codegen for V8HF move without TARGET_AVX512F
      Adjust testcase for 128/256 bit HF vector load/store
      AVX512FP16: Optimize _Float16 reciprocal for div and sqrt
      i386: Fix wrong result for AMX-TILE intrinsic when parsing expression.
      i386: Auto vectorize sdot_prod, usdot_prod with VNNI instruction.
      PR target/103069: Relax cmpxchg loop for x86 target
      i386: Fix wrong codegen for -mrelax-cmpxchg-loop
      i386: Relax cmpxchg instruction under -mrelax-cmpxchg-loop [PR103069]
      AVX512F: Add helper enumeration for ternary logic intrinsics.
      i386: Fix V8HF vector init under -mno-avx [PR 104664]
      AVX512FP16: Fix vcvt[u]si2sh runtime tests for Solaris
      i386: Fix pr104551 testcase for solaris
      AVX512FP16: Fix masm=intel output for vfc?(madd|mul)csh [PR 104977]
      AVX512FP16: Fix wrong code for _mm_mask_f[c]madd.*sch [PR 104978]
      i386: Fix infinite loop under -mrelax-cmpxchg-loop [PR 103069]
      i386: Correct target attribute for crc32 intrinsics
      AVX512F: Add missing macro for mask(z?)_scalf_s[sd] [PR 105339]

Hugo Beauzée-Luyssen (1):
      libstdc++: Check for TLS support on mingw cross-compilers

Iain Buclaw (101):
      libphobos: Fix build fails for powerpc-linux
      libphobos: Fix visibility of std.process.searchPathFor
      d: Fix qualifier ignored in alias definition if parentheses are not present
      libphobos: Fix static asserts on NetBSD, FreeBSD, DragonFlyBSD
      d: Revert "Come up with startswith function."
      d: Use startswith function instead of strncmp
      d: Use filename_ncmp instead of strncmp
      d: Fix ICE in gimplify_var_or_parm_decl, at gimplify.c:2755 (PR100882)
      d: Respect explicit align(N) type alignment (PR100935)
      d: TypeInfo error when using slice copy on Structs (PR100964)
      d: Fix ICE in TypeInfoDeclaration, at dmd/declaration.c (PR100967)
      d: foreach over a tuple doesn't work on 16-bit targets (PR100999)
      d: RHS value lost when a target_expr modifies LHS in a cond_expr
      d: Missed RVO optimization with non-POD structs
      d: Change in DotTemplateExp type semantics leading to regression (PR101619)
      d: Compile-time reflection for supported built-ins (PR101127)
      d: __FUNCTION__ doesn't work in core.stdc.stdio functions without cast (PR101441)
      d: fix ICE at convert_expr(tree_node*, Type*, Type*) (PR101490)
      d: Wrong evaluation order of binary expressions (PR101640)
      d: Don't escape quoted format strings in escape_d_format (PR101656)
      d: Remove generated D header files on error (PR101657)
      d: Ensure casting from bool results in either 0 or 1 (PR96435)
      d: Return the correct value for C++ constructor calls (PR101664)
      d: Generate Object class if it doesn't exist during TypeInfo emission (PR101672)
      d: Factor d_nested_class and d_nested_struct into single function.
      d: Drop any field or parameter types that got cached before conversion failed.
      d: Insert null terminator in obstack buffers
      d: Use hasMonitor to determine whether to emit a __monitor field in D classes
      d: Use Identifier::idPool to generate anonymous field name.
      d: Factor aggregate_initializer_decl to set the sinit for aggregate declarations.
      d: Set COMDAT and visibility of thunks only if they are public.
      d: Only handle named enums in enum_initializer_decl
      d: Clarify comment for generating static array assignment with literal.
      d: Don't generate a PREDICT_EXPR when assert contracts are turned off.
      d: Always layout initializer for the m_RTInfo field in TypeInfo_Class
      d: Remove dead code from binary_op.
      d: ICE in gimple_register_canonical_type_1, at lto/lto-common.c:430 (PR102094)
      d: Use POINTER_SIZE for testing whether to predefine D_LP64
      d: Convert convert_for_rvalue switch statement into if condition
      d: Get __c_wchar_t type from build_frontend_type
      d: Use `int` to store class and struct flags
      d: Update comment for TypeInfoVisitor::layout_base
      d: Call the assertp and boundsp variants for assert and array contract failures.
      libiberty: Add support for D `typeof(*null)' types
      libiberty: Add support for demangling D function literals as template value parameters
      libiberty: Add support for demangling local D template declarations
      libphobos: Compile configure tests with -fno-druntime
      libphobos: Don't add zlib when ENABLE_LIBDRUNTIME_ONLY
      libphobos: Update comment for DRUNTIME_OS_SOURCES
      d: Don't include terminating null pointer in string expression conversion (PR102185)
      libphobos: Define main function as extern(C) when compiling without D runtime (PR102476)
      libphobos: Give _Unwind_Exception an alignment that best resembles __attribute__((aligned))
      libphobos: Remove unused variables in gcc.backtrace.
      libphobos: Print stacktrace before terminating program due to uncaught exception.
      libphobos: Select the appropriate exception handler in getClassInfo
      d: Save target node before parsing optimize options in case it changes.
      d: gdc driver ignores -static-libstdc++ when automatically linking libstdc++ library
      d: Fix pr96435.d failing on SPARC and HPPA
      d: Fix regressing test failures on ix86-solaris2.11
      d: Use HOST_WIDE_INT for type size temporaries.
      libphobos: Don't call __gthread_key_delete in the emutls destroy function.
      libphobos: Increase size of defaultStackPages on OSX X86_64 targets.
      d: Import dmd b8384668f, druntime e6caaab9, phobos 5ab9ad256 (v2.098.0-beta.1)
      d: Update documentation of new D language options.
      doc, d: Add note that D front end now requires GDC installed in order to bootstrap.
      darwin, d: Support outfile substitution for libphobos
      d: Prefix object files from the root package with 'root-'
      d: Disable the D runtime garbage collector after initializing (PR103520)
      libphobos: Add missing ControlState variable for AArch64
      libphobos: Push all callee-save registers on the stack before GC scan on ARM
      d: Merge upstream dmd 568496d5b, druntime 178c44ff, phobos 574bf883b.
      d: Align methods to MINIMUM_METHOD_BOUNDARY.
      d: Merge upstream dmd 3982604c5, druntime bc58b1e9, phobos 12329adb6.
      d: Merge upstream dmd 93108bb9e, druntime 6364e010, phobos 575b67a9b.
      d: Merge upstream dmd ad8412530, druntime fd9a4544, phobos 495e835c2.
      libphobos: Add power*-*-freebsd* as supported target
      config: Add check whether D compiler works (PR103528)
      d: Merge upstream dmd 001bfd97b, druntime 759e6023, phobos 468788323.
      d: Merge upstream dmd 52844d4b1, druntime dbd0c874, phobos 896b1d0e1.
      d: Merge upstream dmd cb49e99f8, druntime 55528bd1, phobos 1a3e80ec2.
      d: Remove handling of deleting GC allocated classes.
      d: Merge upstream dmd cf63dd8e5, druntime caf14b0f, phobos 41aaf8c26.
      libphobos: Fix misspelling of msvcUsesUCRT (PR104659)
      d: Remove gdc.test/dhry.d from the testsuite
      d: Merge upstream dmd 423f19b41, druntime 100a608c, phobos a1f8c4c07.
      d: Fix mistakes in strings to be translated [PR104552]
      d: Cache generated import declarations in a hash_map
      d: Merge upstream dmd 02a3fafc6, druntime 26b58167, phobos 16cb085b5.
      d: Merge upstream dmd 2503f17e5, phobos a74fa63e6.
      d: Fix internal compiler error: in build_complex, at tree.c:2358
      d: Merge upstream dmd 47871363d, druntime, c52e28b7, phobos 99e9c1b77.
      d: Remove Wtemplates warnings from the code generation pass
      d: Compile simd_ctfe.d only on avx_runtime or vect_sizes_16B_8B targets
      d: Merge upstream dmd 4d1bfcf14, druntime 9ba9a6ae, phobos c0cc5e917.
      d: Merge upstream dmd eb7bee331, druntime 27834edb, phobos ac296f80c.
      libphobos: Don't call free on the TLS array in the emutls destroy function.
      d: Merge upstream dmd 313d28b3d, druntime e361d200.
      d: Merge upstream dmd 081d61e15, druntime 9c0d4f91, phobos dba1bbe27.
      d: Merge upstream dmd 88de5e369.
      d: Merge upstream dmd a53934d18, phobos 604534d7c.
      d: Fix D lexer sometimes fails to compile code read from stdin

Iain Sandoe (125):
      Darwin, X86 : Fix bootstrap break from flags changes.
      Darwin : Adjust darwin_binds_local_p for PIC code [PR100152].
      Revert "Darwin : Adjust darwin_binds_local_p for PIC code [PR100152]."
      libsanitizer, Darwin : Handle missing __builtin_os_log_format.
      libsanitizer : Update LOCAL_PATCHES.
      Darwin: Define a suitable section name for CTF [PR101283]
      Darwin, BTF: Provide a suitable section name for BTF [PR101283].
      Darwin, CTF, BTF: Do not run the DWARF debug link for BTF/CTF [PR101283].
      Darwin, config : Adjust X86 biarch definitions ordering [PR100269].
      Darwin, configury : Allow for specification and detection of dsymutil.
      Documentation : Describe --with-dsymutil configure option.
      X86: Provide a CTOR for stringop_algs [PR100246].
      Darwin, config: Revise host config fragment.
      Darwin, X86: Adjust call clobbers to allow for lazy-binding [PR 100152].
      coroutines: Fix a typo in rewriting the function.
      coroutines: Factor code. Match original source location in helpers [NFC].
      coroutines: Adjust outlined function names [PR95520].
      c++tools, configury: Configure with C++; test checking status [PR98821].
      Darwin, X86, config: Adjust 'as' command lines [PR100340].
      Darwin: Reset section names table at the end of compile.
      Darwin, libcc1: Handle hosts with mdynamic-no-pic support.
      Darwin: Handle the -rpath command line option.
      libiberty, Darwin : Fix simple-object LTO table for cross-endian case.
      Objective-C: fix crash with -fobjc-nilcheck
      configure: Allow host fragments to react to --enable-host-shared.
      Darwin, jit: Fix build [PR100613].
      JIT, testsuite, Darwin: Initial testsuite fixes.
      testsuite, JIT, Darwin: Adjust asm tests for Mach-O.
      Objective-C, NeXT runtime: Correct the default for fobjc-nilcheck.
      libiberty, Darwin: Fix a build warning.
      configure: Adjust several assembler checks to remove an unused parm.
      testsuite, Darwin : Do not claim 'GAS' for cctools assembler.
      libgfortran: Use the libtool macro to determine libm availability.
      Darwin : Mark the mod init/term section starts with a linker-visible sym.
      Darwin, X86 : Implement __cache_clear.
      testsuite, Darwin : Skip a test requiring strndup in libc.
      Darwin: Fixes for darwin_libc_has_function.
      coroutines: No cleanups on goto statements.
      coroutines : Add a missed begin/finish else clause to the codegen.
      C-family: Add attribute 'unavailable'.
      Objective-C, NeXT: Fix messenging non-aggregate return-in-memory.
      libiberty, configure, Darwin: Avoid detecting deprecated sbrk.
      libgcc, soft-float: Fix strong_alias macro use for Darwin.
      coroutines: Use DECL_VALUE_EXPR instead of rewriting vars.
      coroutines: Add a helper for creating local vars.
      coroutines: Support for debugging implementation state.
      coroutines: Expose implementation state to the debugger.
      coroutines: Make proxy vars for the function arg copies.
      configure: Avoid unnecessary constraints on executables for $build.
      c++tools : Add a simple handler for ModuleCompiledRequest.
      coroutines: Small cleanups to await_statement_walker [NFC].
      configure, jit: Allow for 'make check-gcc-jit'.
      Jit, testsuite: Amend expect processing to tolerate more platforms.
      Darwin, crts: Build Darwin10 unwinder shim as a library.
      libgcc, X86: Exclude rules for libgcc2 __{div,mul}hc3.
      libgcc, X86, Darwin: Handle symbols for HF cases.
      libgcc, Darwin: Remove unused symlinks.
      Driver: Fix bootstrap with DEFAULT_{ASSEMBLER,LINKER,DSYMUTIL}.
      libgcc, X86: Adjust guard for Mach-O code.
      coroutines: Only set parm copy guard vars if we have exceptions [PR 102454].
      libgcc, X86, Darwin: Export cpu_model and indicator.
      Darwin, PPC : Fix R13 for PPC64.
      Darwin, D : Add .d suffix to the list for invoking dsymutil.
      c-family: Fix bootstrap for targets defining TARGET_FORMAT_TYPES.
      coroutines: Look through NOPs for awaiter variables [PR 99575].
      coroutines: Ensure co_await_exprs have TREE_SIDE_EFFECTS set [PR 101133].
      coroutines: Await expressions are not allowed in handlers [PR 99710].
      coroutines: Fail with a sorry when presented with a VLA [PR 101765].
      Darwin, D: Fix bootstrap when target does not support -Bstatic/dynamic.
      collect2: Fix missing cleanups.
      Darwin: Update quotes in driver warning messages.
      Darwin, D: Fix D bootstrap, include tm-dwarf2.h.
      Darwin: Revise handling of some driver opts.
      Darwin: Update specs handling '-r'.
      Darwin, crts: Fix a build warning.
      Darwin, aarch64 : Initial support for the self-host driver.
      Darwin, aarch64 : Ada fixes for hosted tools.
      Darwin : Make trampoline templates linker-visible.
      testsuite, Darwin : Fix tsvc test build on Darwin.
      Ada, Darwin : Use DSYMUTIL_FOR_TARGET in libgnat/gnarl builds.
      testsuite, Darwin: In tsvc.h, use malloc for Darwin <= 9.
      configure, Darwin: Check ld64 support for -platform-version.
      IPA: Provide a mechanism to register static DTORs via cxa_atexit.
      PCH: Make the save and restore diagnostics more robust.
      configure, Darwin: Set appropriate defaults for host-shared.
      libphobos, testsuite: Add prune clauses for two Darwin cases.
      libstdc++, testsuite: Add a prune expression for external tool bug.
      libgcc, emutls: Allow building weak definitions of the emutls functions.
      Darwin: Rework handling for unwinder code in libgcc_s and specs [PR80556].
      gcc, doc: Fix Darwin bootstrap: Amend an @option command to elide a space.
      libitm: Fix bootstrap for targets without HAVE_ELF_STYLE_WEAKREF.
      Darwin: Rewrite host PCH support [PR 55610].
      Objective-C, NeXT: Reorganise meta-data declarations.
      Darwin: Amend pie options when linking mdynamic-no-pic.
      libgcc, Darwin: Build a libgcc_s.1 for backwards compatibility.
      Darwin, PCH: Rework hooks for relocatable implementation [PR71934].
      libgcc, Darwin: Update darwin10 unwinder shim dependencies.
      configure: Account CXXFLAGS in gcc-plugin.m4.
      Darwin, ppc: Additional change for r12-5974.
      Darwin, Driver: Avoid a link line for empty commands.
      libgcc, Darwin: Add missing build dependencies.
      coroutines, c++: Add test for PR 96517.
      coroutines: Pass lvalues to user-defined operator new [PR 100772].
      coroutines: Handle initial awaiters with non-void returns [PR 100127].
      Darwin: Define OBJECT_FORMAT_MACHO.
      Darwin: Check for that flag-reorder-and-partition.
      Darwin: Update rules for handling alignment of globals.
      Darwin: Amend a comment to be more inclusive [NFC].
      libgfortran: Fix bootstrap on targets without static_assert macro.
      Darwin, PPC: Fix bootstrap after GLIBC version changes.
      LRA, rs6000, Darwin: Amend lo_sum use for forced constants [PR104117].
      LRA, rs6000, Darwin: Revise lo_sum use for forced constants [PR104117].
      Darwin, libgcc: Fix build errors on powerpc-darwin8.
      Darwin: Fix a type mismatch warning for a non-GCC bootstrap compiler.
      Darwin: Address a translation comment [PR104552].
      libcody: Do not use a dummy port number in getaddrinfo().
      c++tools: Work around a BSD bug in getaddrinfo().
      testsuite, modules, Darwin: Adjust expected output for older OS versions.
      libgccjit: Fix a bootstrap break for some targets.
      testsuite: Add target requires for ifuncs to mv31.C.
      testsuite,X86: Fix missing USER_LABEL_PREFIX cases.
      c++, coroutines: Make sure our temporaries are in a bind expr [PR105287]
      c++, coroutines: Account for overloaded promise return_value() [PR105301].
      c++, coroutines: Improve check for throwing final await [PR104051].
      c++, coroutines: Partial reversion of r12-8308-g15a176a833f23e [PR105426].

Ian Lance Taylor (69):
      libgo: use Windows line endings in testwinsignal
      libgo: update bzip2 binary test cases to match source repo
      libgo: update configure to current sources
      gofrontend: revert startswith change
      gcc/go/ChangeLog: remove entry for reverted change
      compiler: mark global variables whose address is taken
      gccgo.texi: remove HTML quoting
      libgo: update to Go1.16.5 release
      libbacktrace: improve XCOFF support
      compiler: in composite literals use temps only for interfaces
      go-gcc: set DECL_NAMELESS for temporary variables
      compiler: don't generate temporaries for composite literals
      runtime: remove direct assignments to memory locations
      compiler: avoid aliases in receiver types
      compiler, runtime: support unsafe.Add and unsafe.Slice
      compiler, runtime: allow slice to array pointer conversion
      compiler: check slice to pointer-to-array conversion element type
      compile, runtime: make selectnbrecv return two values
      runtime: extend internal atomics to comply with sync/atomic
      compiler: support export/import of unsafe.Add/Slice
      compiler: don't crash on a, b := int(0)
      compiler: store pointers to go:notinheap types indirectly
      runtime: run gofmt on testdata/testwinsignal/main.go
      libgo: update to Go1.17rc2
      runtime: use C cast syntax in stack.c
      libgo: various fixes for Solaris support
      libgo: update to final Go 1.17 release
      runtime: use hash32, not hash64, for amd64p32, mips64p32, mips64p32le
      compiler: correct condition for calling memclrHasPointers
      compiler: don't pad zero-sized trailing field in results struct
      libgo: update to go1.17.1 release
      runtime: set runtime.GOROOT value at build time
      compiler: avoid calling Expression::type before lowering
      libgcc: use .init_stack for constructors if available
      compiler: permit compiler directives in parenthesized groups
      compiler: traverse func subexprs when creating func descriptors
      compiler, libgo: don't pad sparc64-linux epollevent
      compiler: remove duplication of Named_object traversal
      compiler: permit converting unnamed types when ignoring struct tags
      runtime: build panic32.go on amd64p32
      compiler: accept "any" as an alias for "interface{}"
      compiler, internal/abi: implement FuncPCABI0, FuncPCABIInternal
      compiler: recognize Go 1.18 runtime/internal/atomic methods
      -fgo-dump-spec: really name alignment field "_"
      gccgo: link static libgo against -lrt on GNU/Linux
      compiler: treat notinheap types as not being pointers
      compiler: use nil pointer for zero length string constant
      compiler: don't warn for print()
      libgo: update to Go1.18beta2
      compiler: don't set ptrmask bit for pointer to notinheap type
      runtime: call timer functions via syscall
      libbacktrace: initialize DWARF 5 fields of unit
      libgo: restore building on Solaris
      libbacktrace: gather address ranges from skeleton units
      net: add hurd build tag for setReadMsgCloseOnExec
      libgo: update to Go1.18rc1 release
      libgo: update Hurd support
      runtime/internal/syscall: build dummy package if not Linux
      libgo: update README.gcc
      mkruntimeinc: skip _FILE
      compiler: ignore function type result name in export data
      libgo: update to final Go 1.18 release
      runtime: support PPC32 MUSL register access
      libbacktrace: don't skip initial aligned byte in uncompressed block
      go.test: update issue10441.go to current upstream version
      runtime: use regset indexes for PPC register values
      compiler: revert `for package-scope "a = b; b = x" just set "a = x"`
      libgo: make a couple of sed uses POSIX compliant
      runtime: use correct field name for PPC32 GLIBC registers

Ilya Leoshkevich (10):
      IBM Z: Handle hard registers in s390_md_asm_adjust()
      IBM Z: Remove match_scratch workaround
      IBM Z: Define NO_PROFILE_COUNTERS
      IBM Z: Use @PLT symbols for local functions in 64-bit mode
      IBM Z: Enable LSan and TSan
      IBM Z: Fix 5 tests in 31-bit mode
      reassoc: Do not bias loop-carried PHIs early
      reassoc: Propagate PHI_LOOP_BIAS along single uses
      reassoc: Test rank biasing
      IBM Z: fix `section type conflict` with -mindirect-branch-table

Ilya Lipnitskiy (1):
      configure: define TARGET_LIBC_GNUSTACK on musl

Indu Bhagat (31):
      opts: change write_symbols to support bitmasks
      dwarf: new dwarf_debuginfo_p predicate
      MAINTAINERS: Add myself for write after approval
      PR testsuite/100749 - gcc.dg/pch/valid-1.c fails after r12-949
      dwarf: externalize some DWARF internals for needs of CTF/BTF
      dejagnu: modularize gcc-dg-debug-runtest a bit
      CTF/BTF debug formats
      CTF/BTF testsuites
      CTF/BTF documentation
      Enable BTF generation in the BPF backend
      libiberty: copy over .BTF section when using LTO
      testsuite: Add missing dg-add-options to CTF testcase ctf-skip-types-4.c
      CTF,BTF testsuite: Use -gdwarf-4 for restrict type qualifier [PR101283]
      dwarf2ctf: the unit of sou field location is bits [PR101283]
      CTF testsuite: Remove explicit check on ctv_typeidx
      BTF testsuite: Remove explicit check on btm_type
      testsuite/101269: fix testcase when used with -m32
      debug: Add new function ctf_debuginfo_p
      debug: Allow means for targets to opt out of CTF/BTF support
      debug: Add BTF_WITH_CORE_DEBUG debug format
      bpf: Add new -mco-re option for BPF CO-RE
      dwarf2out: Emit BTF in dwarf2out_finish for BPF CO-RE usecase
      debug/102507: ICE in btf_finalize when compiling with -gbtf
      ctf: Do not warn for CTF not supported for GNU GIMPLE
      ctfc: Free CTF container elements in ctfc_delete_container ()
      dwarf2ctf: fix typo in comment
      ctfc: remove redundant comma in enumerator list
      ctfout: use ctfc_get_num_ctf_vars instead
      ctfc: get rid of the static variable in ctf_list_add_ctf_vars ()
      CTF for extern variable fix [PR105089]
      Refactor and update CTF testcases [PR105089]

Ivan Sorokin (1):
      x86: Build only one __cpu_model/__cpu_features2 variables

Jakub Jelinek (563):
      Bump BASE-VER.
      Update crontab and git_update_version.py
      libstdc++: Update ppc64le baseline_symbols.txt
      Fix AIX libstdc++ semaphore support [PR100164]
      cprop: Fix -fcompare-debug bug in constprop_register [PR100148]
      testsuite: Add -fchecking to dg-ice tests
      libstdc++: Add workaround for ia32 floating atomics miscompilations [PR100184]
      vmsdbgout: Remove useless register keywords
      i386: Improve [QH]Imode rotates with masked shift count [PR99405]
      Update gennews for GCC 10 and GCC 11.
      expand: Expand x / y * y as x - x % y if the latter is cheaper [PR96696]
      match.pd: Add some __builtin_ctz (x) cmp cst simplifications [PR95527]
      cfgcleanup: Fix -fcompare-debug issue in outgoing_edges_match [PR100254]
      Revert "libstdc++: Add workaround for ia32 floating atomics miscompilations [PR100184]"
      veclower: Fix up vec_shl matching of VEC_PERM_EXPR [PR100239]
      aarch64: Fix UB in the compiler [PR100200]
      aarch64: Fix up last commit [PR100200]
      c++: Remove #error for release builds
      c++: Fix up detach clause vs. data-sharing clause checking [PR100319]
      aarch64: Fix ICE in aarch64_add_offset_1_temporaries [PR100302]
      testsuite: Remove dg-options from pr100305.c [PR100305]
      i386: Fix up plugin header install on x86 [PR100336]
      nvptx: Fix up nvptx build against latest libstdc++ [PR100375]
      tree-ssa-dse: Fix up go.test/test/fixedbugs/issue16095.go miscompilation [PR100382]
      phiopt: Optimize (x <=> y) cmp z [PR94589]
      phiopt: Use gphi *phi instead of gimple *phi some more
      i386: Fix up 8-byte vcond* with -mxop [PR100445]
      libcpp: Fix up pragma preprocessing [PR100450]
      openmp: Fix up taskloop reduction ICE if taskloop has no iterations [PR100471]
      match.pd: Optimize (x & y) == x into (x & ~y) == 0 [PR94589]
      expand: Don't reuse DEBUG_EXPRs with vector type if they have different modes [PR100508]
      libcpp: Fix up -fdirectives-only preprocessing of includes not ending with newline [PR100392]
      ix86: Support V{2, 4}DImode arithmetic right shifts for SSE2+ [PR98856]
      openmp: Add testcases to verify OpenMP 5.0 2.14 and OpenMP 5.1 2.17 rules [PR99928]
      Closing of 8 branch.
      testsuite: Add testcase for already fixed PR [PR88872]
      testsuite: Add testcase for already fixed PR [PR90019]
      testsuite: Add testcase for already fixed PR [PR94616]
      testsuite: Add testcase for already fixed PR [PR95226]
      regcprop: Fix another cprop_hardreg bug [PR100342]
      phiopt: Optimize partial_ordering spaceship >= 0 -ffinite-math-only [PR94589]
      function: Set dummy DECL_ASSEMBLER_NAME in push_dummy_function [PR100580]
      regcprop: Avoid DCE of asm goto [PR100590]
      openmp: Handle lastprivate on combined target correctly [PR99928]
      builtins: Fix ICE with unprototyped builtin call [PR100576]
      libcpp: Fix up -fdirectives-only handling of // comments on last line not terminated with newline [PR100646]
      phiopt: Simplify (X & Y) == X -> (X & ~Y) == 0 even in presence of integral conversions [PR94589]
      openmp: Handle explicit linear clause properly in combined constructs with target [PR99928]
      tree-optimization: Improve spaceship_replacement [PR94589]
      openmp: Fix up handling of implicit lastprivate on outer constructs for implicit linear and lastprivate IVs [PR99928]
      openmp: Fix up firstprivate+lastprivate clause handling [PR99928]
      openmp: Fix reduction clause handling on teams distribute simd [PR99928]
      Update copyright years in c++tools
      c++tools: Include <cstdlib> for exit [PR100731]
      c++: Avoid -Wunused-value false positives on nullptr passed to ellipsis [PR100666]
      openmp: Fix up handling of target constructs in offloaded routines [PR100573]
      Remove useless register keywords
      libgomp: Add openacc_{cuda,cublas,cudart} effective targets and use them in openacc testsuite
      openmp: Fix up handling of reduction clause on constructs combined with target [PR99928]
      openmp: Add shared to parallel for linear on parallel master taskloop simd [PR99928]
      testsuite: Add -Wno-psabi -w to g++.dg/ext/builtin-shufflevector-1.C
      xtensa: Fix 2 warnings during xtensa build [PR100841]
      openmp: Assorted depend/affinity/iterator related fixes [PR100859]
      c++: Fix up attribute handling in methods in templates [PR100872]
      x86: Fix ix86_expand_vector_init for V*TImode [PR100887]
      openmp: Call c_omp_adjust_map_clauses even for combined target [PR100902]
      openmp: Add testcase for scan directive with nested functions
      tree-inline: Fix up __builtin_va_arg_pack handling [PR100898]
      fold-const: Fix up fold_read_from_vector [PR100887]
      testsuite: Add -Wno-psabi -w to pr100887.c test [PR100943]
      openmp: Fix ICE on depend(source) clause during cdtor cloning [PR100957]
      openmp: Gimplify OMP_CLAUSE_SIZE during gfc_omp_finish_clause [PR100965]
      ifcvt: Fix -fcompare-debug bug [PR100852]
      testsuite: Fix up libgomp.fortran/pr100981-2.f90 testcase [PR100981]
      testsuite: Uncomment __cpp_consteval test
      i386: Fix up *vec_concat<mode>_0_1 [PR101007]
      simplify-rtx: Fix up simplify_logical_relational_operation for vector IOR [PR101008]
      c++: Add C++23 consteval if support - P1938R3 [PR100974]
      expr: Fix up VEC_PACK_TRUNC_EXPR expansion [PR101046]
      libffi: Fix up x86_64 classify_argument
      stor-layout: Create DECL_BIT_FIELD_REPRESENTATIVE even for bitfields in unions [PR101062]
      testsuite: Use noipa attribute instead of noinline, noclone
      stor-layout: Don't create DECL_BIT_FIELD_REPRESENTATIVE for QUAL_UNION_TYPE [PR101062]
      inline-asm: Fix ICE with bitfields in "m" operands [PR100785]
      i386: Use xor to write zero to memory with -Os even for more than 4 stores [PR11877]
      fold-const: Return corresponding integral type for OFFSET_TYPE in range_check_type [PR101162]
      expand: Fix up empty class return optimization [PR101160]
      testsuite: Add testcase for recently fixed PR [PR101159]
      openmp: Fix up *_reduction clause handling with UDRs on PARM_DECLs [PR101167]
      openmp: in_reduction clause support on target construct
      stor-layout: Avoid DECL_BIT_FIELD_REPRESENTATIVE with NULL TREE_TYPE [PR101172]
      df: Fix up handling of paradoxical subregs in debug insns [PR101170]
      c: Fix C cast error-recovery [PR101171]
      c: Fix up c_parser_has_attribute_expression [PR101176]
      match.pd: Avoid (intptr_t)x eq/ne CST to x eq/ne (typeof x) CST opt in GENERIC when sanitizing [PR101210]
      openmp - Fix up && and || reductions [PR94366]
      dwarf2out: Handle COMPOUND_LITERAL_EXPR in loc_list_from_tree_1 [PR101266]
      i386: Punt on broadcasts from TImode integers [PR101286]
      openmp: Reject #pragma omp atomic update, [PR101297]
      openmp: Initial support for OpenMP directives expressed as C++11 attributes
      libgomp: Don't include limits.h instead of hidden visibility block
      passes: Fix up subobject __bos [PR101419]
      godump: Fix -fdump-go-spec= reproduceability issue [PR101407]
      gimplify: Fix endless recursion on volatile empty type reads/writes [PR101437]
      c++: Optimize away NULLPTR_TYPE comparisons [PR101443]
      rs6000: Fix up easy_vector_constant_msb handling [PR101384]
      c++: Ensure OpenMP reduction with reference type references complete type [PR101516]
      openmp: Fix up omp_check_private [PR101535]
      openmp: Diagnose invalid mixing of the attribute and pragma syntax directives
      openmp: Add support for __has_attribute(omp::directive) and __has_attribute(omp::sequence)
      expmed: Fix store_integral_bit_field [PR101562]
      openmp: Add support for omp attributes section and scan directives
      gimple-fold: Fix up __builtin_clear_padding on classes with virtual inheritence [PR101586]
      i386: Improve AVX2 expansion of vector >> vector DImode arithm. shifts [PR101611]
      match.pd: Fix up recent __builtin_bswap16 simplifications [PR101642]
      ubsan: Fix ICEs with DECL_REGISTER tests [PR101624]
      testsuite: Fix up two tests for recent libstdc++ header changes [PR101647]
      c++: Accept C++11 attribute-definition [PR101582]
      c++: Fix up attribute rollbacks in cp_parser_statement
      c++: Implement P0466R5 __cpp_lib_is_pointer_interconvertible compiler helpers [PR101539]
      i386: Improve extensions of __builtin_clz and constant - __builtin_clz for -mno-lzcnt [PR78103]
      openmp: Handle OpenMP directives in attribute syntax in attribute-declaration
      analyzer: Fix ICE on MD builtin [PR101721]
      libgcc: Fix duplicated content of config/t-slibgcc-fuchsia
      testsuite: Fix duplicated content of gcc.c-torture/execute/ieee/pr29302-1.x
      c++: Fix up #pragma omp declare {simd,variant} and acc routine parsing
      libgcc: Honor LDFLAGS_FOR_TARGET when linking libgcc_s
      libcpp: Fix makeucnid bug with combining values [PR100977]
      libcpp: Regenerate ucnid.h using Unicode 13.0.0 files [PR100977]
      openmp: Add support for declare simd and declare variant in a attribute syntax
      i386: Improve single operand AVX512F permutations [PR80355]
      i386: Allow some V32HImode and V64QImode permutations even without AVX512BW [PR80355]
      openmp: Fix up cp/parser.c build with GCC 4.8 to 6
      sanitizer: Cherry-pick realpath fix
      c++: Optimize constinit thread_local vars [PR101786]
      c++: Fix up parsing of attributes for using-directive
      openmp: Diagnose omp::directive/sequence on using-directive
      c++: Fix ICE on defaulted spaceship with pointer return type [PR94162]
      openmp: Diagnose another case of mixing parameter and attribute syntax
      openmp: Diagnose syntax mismatches between declare target and end declare target
      i386: Fix up V32HImode permutations with -mno-avx512bw [PR101860]
      libcpp: Fix ICE with -Wtraditional preprocessing [PR101638]
      openmp: Add support for OpenMP 5.1 masked construct
      i386: Fix ICE with V64QImode broadcast permutation with -mavx512f -mno-avx512bw
      c++: Add C++20 #__VA_OPT__ support
      openmp: Implement OpenMP 5.1 scope construct
      c++: Implement P0466R5 __cpp_lib_is_layout_compatible compiler helpers [PR101539]
      openmp: Actually ignore pragma_stmt pragmas for which c_parser_pragma returns false
      openmp: Add nothing directive support
      openmp: For C++ ensure nothing directive has no operands
      openmp: Fix ICE on requires clause with atomic_default_mem_order (
      expand: Add new clrsb fallback expansion [PR101950]
      openmp: Diagnose some superfluous commas in OpenMP parsing
      openmp: Implement the error directive
      openmp: Add support for strict modifier on grainsize/num_tasks clauses
      dwarf2out: Emit DW_AT_location for global register vars during early dwarf [PR101905]
      bswap: Recognize (int) __builtin_bswap64 (arg) idioms or __builtin_bswap?? (arg) & mask [PR86723]
      c++: Fix up value initialization of structs with zero width bitfields [PR102019]
      tree-ssa-ccp: Fix up bit_value_binop on RSHIFT_EXPR [PR102134]
      testsuite: Fix gcc.dg/vect/pr101145* tests [PR101145]
      bswap: Fix up bswap_view_convert handling [PR102141]
      vectorizer: Fix up vectorization using WIDEN_MINUS_EXPR [PR102124]
      libcpp: __VA_OPT__ p1042r1 placemarker changes [PR101488]
      libcpp: Implement C++23 P1949R7 - C++ Identifier Syntax using Unicode Standard Annex 31
      match.pd: Demote IFN_{ADD,SUB,MUL}_OVERFLOW operands [PR99591]
      c++, abi: Set DECL_FIELD_CXX_ZERO_WIDTH_BIT_FIELD on C++ zero width bitfields [PR102024]
      openmp: Improve expand_omp_atomic_pipeline
      match.pd: Fix up __builtin_*_overflow arg demotion [PR102207]
      c++: Fix up constexpr evaluation of deleting dtors [PR100495]
      i386: Fix up @xorsign<mode>3_1 [PR102224]
      libgcc, i386: Export *hf* and *hc* from libgcc_s.so.1
      i386: Fix up xorsign for AVX [PR89984]
      openmp: Implement OpenMP 5.1 atomics, so far for C only
      testsuite: Fix c-c++-common/auto-init-* tests
      openmp: Add testing checks (whether lhs appears in operands at all) to more trees
      testsuite: Use sync_long_long instead of sync_int_long for atomic-29.c test
      c++: Fix __is_*constructible/assignable for templates [PR102305]
      c++: Update DECL_*SIZE for objects with flexible array members with initializers [PR102295]
      c++: Fix handling of decls with flexible array members initialized with side-effects [PR88578]
      openmp: Add support for OpenMP 5.1 atomics for C++
      libgomp: Spelling error fix in OpenMP 5.1 conformance section
      openmp: Allow private or firstprivate arguments to default clause even for C/C++
      openmp: Handle unconstrained and reproducible modifiers on order(concurrent)
      openmp: Add support for allocator and align modifiers on allocate clauses
      openmp: Fix OpenMP expansion of scope with non-fallthrugh body [PR102415]
      openmp: Diagnose omp::directive attribute without balanced token argument [PR102413]
      openmp: Don't call omp_finish_clause on implicitly added private clauses on simd [PR102492]
      i386: Don't emit fldpi etc. if -frounding-math [PR102498]
      openmp: Disallow reduction with var private in containing parallel even on scope [PR102504]
      openmp: Add omp_aligned_{,c}alloc and omp_{c,re}alloc
      c++: Fix handling of __thread/thread_local extern vars declared at function scope [PR102496]
      openmp: Add alloc_align attribute to omp_aligned_*alloc and testcase for omp_realloc
      openmp: Avoid PLT relocations for omp_* symbols in libgomp
      openmp: Differentiate between order(concurrent) and order(reproducible:concurrent)
      ubsan: Move INT_MIN / -1 instrumentation from -fsanitize=integer-divide-by-zero to -fsanitize=signed-integer-overflow [PR102515]
      c++: Fix apply_identity_attributes [PR102548]
      c++: defaulted <=> with bitfields [PR102490]
      libcpp: Implement C++23 P2334R1 - #elifdef/#elifndef
      c++: Implement C++23 P2242R3 - Non-literal variables (and labels and gotos) in constexpr functions [PR102612]
      openmp: Optimize for OpenMP atomics 2x__builtin_clear_padding+__builtin_memcmp if possible
      c++: Add testcase for C++23 P2316R2 - consistent character literal encoding [PR102615]
      openmp: Fix up declare target handling for vars with DECL_LOCAL_DECL_ALIAS [PR102640]
      openmp: Add support for OpenMP 5.1 structured-block-sequences
      var-tracking: Fix a wrong-debug issue caused by my r10-7665 var-tracking change [PR102441]
      openmp: Add omp_set_num_teams, omp_get_max_teams, omp_[gs]et_teams_thread_limit
      vectorizer: Fix up -fsimd-cost-model= handling
      libgomp: alloc* test fixes [PR102628, PR102668]
      openmp: Add testsuite coverage for omp_{get_max,set_num}_threads and omp_{s,g}et_teams_thread_limit
      openmp: Fix up warnings on libgomp.info build
      openmp: Add documentation for omp_{get_max, set_num}_threads and omp_{s, g}et_teams_thread_limit
      openmp: Avoid calling clear_type_padding_in_mask in the common case where there can't be any padding
      openmp: Add support for OMP_PLACES=ll_caches
      openmp: Add support for OMP_PLACES=numa_domains
      openmp: Fix up handling of OMP_PLACES=threads(1)
      openmp: Fix up strtoul and strtoull uses in libgomp
      openmp: Handle OpenMP 5.1 simplified OMP_PLACES syntax
      openmp: Improve testsuite/libgomp.c/affinity-1.c testcase
      openmp: Fix handling of numa_domains(1)
      c++: Don't reject calls through PMF during constant evaluation [PR102786]
      c++: Fix up push_local_extern_decl_alias error recovery [PR102642]
      openmp: Fix up struct gomp_work_share handling [PR102838]
      openmp: For default(none) ignore variables created by ubsan_create_data [PR64888]
      testsuite: Fix up gfortran.dg/gomp/strictly*.f90 testcases
      c++: Diagnose taking address of an immediate member function [PR102753]
      c++: Reject addresses of immediate functions in constexpr vars inside of immediate functions or consteval if [PR102753]
      openmp: Don't reject some valid initializers or conditions of non-rectangular loops [PR102854]
      openmp: Allow non-rectangular loops with pointer iterators
      openmp: Document that non-rect loops are not supported in Fortran yet
      testsuite: Fix up gcc.dg/pr102897.c testcase [PR102897]
      match.pd: Optimize MIN_EXPR <addr1, addr2> etc. addr1 < addr2 would be simplified [PR102951]
      c++: Implement DR2351 - void{} [PR102820]
      gimple-fold: Preserve location in gimple_fold_builtin_memset
      openmp: Diagnose threadprivate OpenMP loop iterators
      openmp: Add testcase for threadprivate random access class iterators
      ia32: Disallow mode(V1TI) [PR103020]
      dwarf2out: Fix up CONST_WIDE_INT handling once more [PR103046]
      x86: Make stringop_algs::stringop_strategy ctor constexpr [PR100246]
      c++: Fix ICE on complex constant with -frounding-math [PR103114]
      rs6000, libgcc: Fix up -Wmissing-prototypes warning on rs6000/linux-unwind.h
      openmp: Add support for 2 argument num_teams clause
      dwarf2out: Fix up field_byte_offset [PR101378]
      libgomp: Use TLS storage for omp_get_num_teams()/omp_get_team_num() values
      openmp: Honor OpenMP 5.1 num_teams lower bound
      libgomp: Unbreak gcn offload build
      libgomp: Add a testcase for omp_get_num_teams inside of target inside of host teams
      libgomp, nvptx: Honor OpenMP 5.1 num_teams lower bound
      i386: Fix up x86 atomic_bit_test* expanders for !TARGET_HIMODE_MATH [PR103205]
      openmp: Add support for thread_limit clause on target
      testsuite: Add testcase for already fixed PR [PR100469]
      waccess: Fix up pass_waccess::check_alloc_size_call [PR102009]
      openmp: Regimplify operands of GIMPLE_COND in a few more places [PR103208]
      libgomp: Mark thread_limit clause to target construct as implemented
      ranger: Fix up fold_using_range::range_of_address [PR103255]
      lim: Reset flow sensitive info even for pointers [PR103192]
      libcpp: Fix up handling of block comments in -fdirectives-only mode [PR103130]
      libgomp: Fix up aligned_alloc arguments [PR102838]
      libgomp: Ensure that either gomp_team is properly aligned [PR102838]
      libsanitizer: Fix bootstrap on FreeBSD [PR102675]
      c++: Fix up -fstrong-eval-order handling of call arguments [PR70796]
      c++: Avoid adding implicit attributes during apply_late_template_attributes [PR101180]
      i386: Fix up handling of target attribute [PR101180]
      fortran, debug: Fix up DW_AT_rank [PR103315]
      openmp: Handle OMP_MASKED in potential_constant_expression_1 [PR103349]
      openacc: Fix up C++ #pragma acc routine handling [PR101731]
      libcpp: Fix _Pragma stringification [PR103165]
      openmp: Fix up handling of reduction clauses on the loop construct [PR102431]
      inliner: Remove unused transform_lang_insert_block hook
      bswap: Fix up symbolic merging for xor and plus [PR103376]
      attribs: Fix ICEs on attributes starting with _ [PR103365]
      openmp: Fix up handling of kind(host) and kind(nohost) in ACCEL_COMPILERs [PR103384]
      c++: Implement C++23 P2128R6 - Multidimensional subscript operator [PR102611]
      c++: Return early in apply_late_template_attributes if there are no late attribs [PR101180]
      bswap: Improve perform_symbolic_merge [PR103376]
      match.pd: Fix up the recent bitmask_inv_cst_vector_p simplification [PR103417]
      c++: Fix up taking address of an immediate function diagnostics [PR102753]
      bswap: Fix UB in find_bswap_or_nop_finalize [PR103435]
      x86: Fix up x86_{,64_}sh{l,r}d patterns [PR103431]
      libstdc++: Implement std::byteswap for C++23
      c++: Small incremental tweak to source_location::current() folding
      libcpp: Enable P1949R7 for C++11 and up as it was a DR [PR100977]
      libstdc++: Add [[nodiscard]] to std::byteswap
      libcpp: Fix up #__VA_OPT__ handling [PR103415]
      simplify-rtx: Punt on simplify_associative_operation with large operands [PR102356]
      libcpp: Enable P1949R7 for C++98 too [PR100977]
      i386: Fix up some minor formatting issues and one inconsistency
      pch: Add support for PCH for relocatable executables [PR71934]
      x86: Speed up target attribute handling by using a cache
      testsuite: Fix up pr103456.c testcase [PR103456]
      libcpp: Fix up handling of deferred pragmas [PR102432]
      c++: Allow indeterminate unsigned char or std::byte in bit_cast - P1272R4
      i386, ipa-modref: Comment spelling fix
      avr: Fix AVR build [PR71934]
      pch: Add support for relocation of the PCH data [PR71934]
      pch: Fix up Darwin and HPUX pch_use_address hooks [PR71934]
      pch: Fix aarch64 build [PR71934]
      libstdc++: Some time_get fixes [PR78714]
      libstdc++: Add std::time_get %r support [PR71367]
      pch: Small cleanup
      c: Fix ICE on deferred pragma in unknown attribute arguments [PR103587]
      libstdc++: Poor man's case insensitive comparisons in time_get [PR71557]
      openmp: Avoid calling operand_equal_p on OMP_CLAUSEs [PR103704]
      dwarf2cfi: Improve cfa_reg comparisons [PR103619]
      testsuite: Fix up cpp23/auto-fncast11.C testcase [PR103408]
      i386: Fix handling of SUBREGs in divv2sf3 [PR103842]
      optabs: Fix up checking for CALLs in newly added code by double-word divmod [PR103838]
      loop-invariant: Fix -fcompare-debug failure [PR103837]
      fold-const: Fix up fold_truth_andor_1 shift handling [PR103813]
      tree-ssa-dce: Fix up -fcompare-debug failures in make_forwarders_with_degenerate_phis [PR103742]
      shrink-wrapping: Fix up prologue block discovery [PR103860]
      c-family: Use BULTINS_LOCATION for predefined macros changed upon optimize or target pragmas [PR103012]
      emit-rtl: Fix a -fcompare-debug issue due to var-tracking [PR103808]
      libcpp: Fix up ##__VA_OPT__ handling [PR89971]
      regrename: Fix -fcompare-debug issue in find_rename_reg [PR103756]
      objc: Fix handling of break stmt inside of switch inside of ObjC foreach [PR103639]
      testsuite: Adjust gcc.misc-tests/godump-1.c testcase
      Rotate ChangeLog files - part 1 - add ChangeLog-2021.
      Rotate ChangeLog files - step 2 - remove 2021 entries from ChangeLog files.
      Update copyright dates.
      Update Copyright in ChangeLog files
      Add University of Illinois as external author
      Update copyright years.
      c++: Support &typeid(x) == &typeid(y) and typeid(x) == typeid(y) in constant evaluation [PR103600]
      symtab: Fold &a == &b to 0 if folding_initializer [PR94716]
      i386, fab: Optimize __atomic_{add,sub,and,or,xor}_fetch (x, y, z) {==,!=,<,<=,>,>=} 0 [PR98737]
      shrink-wrapping: Don't call can_get_prologue unnecessarily [PR103860]
      testsuite: Fix gcc.target/i386/pr103895.c testcase [PR103895]
      gimple-fold: Remove incorrect folding of debug stmts [PR103691]
      ifcvt: Check for asm goto at the end of then_bb/else_bb in ifcvt [PR103908]
      expr: Workaround profiledbootstrap uninit false positive [PR103899]
      c++, match.pd: Evaluate in constant evaluation comparisons like &var1 + 12 == &var2 + 24 [PR89074]
      libstdc++: Add %j, %U, %w, %W time_get support, fix %y, %Y, %C, %p [PR77760]
      x86_64: Ignore zero width bitfields in ABI and issue -Wpsabi warning about C zero width bitfield ABI changes [PR102024]
      c++: Ensure some more that immediate functions aren't gimplified [PR103912]
      c-family: Fix up -W*conversion on bitwise &/|/^ [PR101537]
      c++: Fix ICEs with OBJ_TYPE_REF pretty printing [PR101597]
      libgfortran: Small progress on the library side
      gfortran: Introduce gfc_type_abi_kind
      libquadmath: Use -mno-gnu-attribute in libquadmath
      fortran, libgfortran: -mabi=ieeelongdouble I/O
      libgfortran: -mabi=ieeelongdouble I/O fix
      fortran, libgfortran: Assorted -mabi=ieeelongdouble I/O fixes
      fortran, libgfortran: Add remaining missing *_r17 symbols
      testsuite: Fix pr47614.f test
      libgfortran: Avoid using libquadmath APIs on powerpc64le on glibc 2.32+
      libgfortran: Make sure glibc < 2.32 built powerpc64le-linux libgfortran doesn't use __*ieee128 APIs
      power-ieee128: Fix up byte-swapping for IBM extended real(kind=16)
      testsuite: Fix up c-c++-common/builtin-shufflevector-3.c testcase [PR101530]
      libgfortran: Fix build on non-glibc targets
      c++: Silence -Wuseless-cast warnings during move [PR103480]
      inliner: Don't emit copy stmts for empty type parameters [PR103989]
      libgfortran: Fix Solaris version file creation [PR104006]
      toplevel: Remove incorrectly added file
      forwprop: Canonicalize atomic fetch_op op x to op_fetch or vice versa [PR98737]
      c++: Reject in constant evaluation address comparisons of start of one var and end of another [PR89074]
      c++: Avoid some -Wreturn-type false positives with const{expr,eval} if [PR103991]
      libgfortran: Partly revert my r12-6498 change to fix Solaris build [PR104006]
      widening_mul, i386: Improve spaceship expansion on x86 [PR103973]
      c++: Fix cp_genericize_target_expr for TARGET_EXPRs created for global initialization [PR104031]
      c++: Fix handling of temporaries with consteval ctors and non-trivial dtors [PR104055]
      i386: Fix GLC tuning with -masm=intel [PR104104]
      i386: Fix *aes<aeswideklvariant>u8
      fold-const: Optimize &"foo"[0] == "foo" [PR89074]
      gimple-ssa-warn-access: Fix up asan_test.C -Wdangling-pointer regression [PR104103]
      rs6000: Fix bootstrap
      testsuite: Test evrp-trans.c also with unsigned types [PR104115]
      match.pd, optabs: Avoid vectorization of {FLOOR,CEIL,ROUND}_{DIV,MOD}_EXPR [PR102860]
      testsuite: Add -Wno-psabi to pr47639.C testcase
      dwarf2out: Fix -gsplit-dwarf on riscv [PR103874]
      optabs: Don't create pseudos in prepare_cmp_insn when not allowed [PR102478]
      warn-access: Fix up warning_at arguments
      c-family: Fix up a -Wformat regression [PR104148]
      toplevel: Remove accedentally checked in file
      ootstrap: Fix bootstrap with --disable-plugin [PR104176]
      properly disable -fsplit-stack on non-glibc targets [PR104170]
      options: Add EnumSet and Set property support [PR104158]
      options: Fix up -fsanitize-coverage= [PR104158]
      fortran: Extend -fconvert= option for ppc64le r16_ieee and r16_ibm
      options: Add EnumBitSet property support [PR104158]
      rs6000: Remove GCC 8.1 U10__float128 mangling compatibility [PR104172]
      libfortran: Provide fallback __issignalingl for IBM extended long double
      testsuite: Fix up pr104188.c testcase for i686-linux [PR104188]
      c++: Fix up handling of vector CONSTRUCTORs with vectors in it in constexpr.cc [PR104226]
      dwarf2out: For ppc64le IEEE quad long double, emit DW_TAG_typedef to _Float128 [PR104194]
      rs6000: Fix up #include <immintrin.h> or <x86gprintrin.h> [PR104239]
      rs6000: Fix up *intrin.h for C89 [PR104239]
      reassoc: Fix up inter-bb range optimization [PR104196]
      cfgrtl: Fix up locus comparison in unique_locus_on_edge_between_p [PR104237]
      store-merging: Fix up a -fcompare-debug bug in get_status_for_store_merging [PR104263]
      match.pd: Fix up 1 / X for unsigned X optimization [PR104280]
      testsuite: Fix up tree-ssa/divide-7.c testcase [PR95424]
      testsuite: Fix up tree-ssa/pr103514.c testcase [PR103514]
      rs6000: Fix up build of non-glibc/aix/darwin powerpc* targets [PR104298]
      veclower: Fix up -fcompare-debug issue in expand_vector_comparison [PR104307]
      rs6000: Fix up PCH on powerpc* [PR104323]
      libcpp: Avoid PREV_WHITE and other random content on CPP_PADDING tokens
      libcpp: Fix up padding handling in funlike_invocation_p [PR104147]
      openmp, fortran: Improve !$omp atomic checks [PR104328]
      ranger: Fix up wi_fold_in_parts for small precision types [PR104334]
      arm: Fix up help.exp regression
      rs6000: Fix up -D_FORTIFY_SOURCE* with -mabi=ieeelongdouble [PR104380]
      match.pd: Fix x * 0.0 -> 0.0 folding [PR104389]
      c++: Further address_compare fixes [PR89074]
      testsuite: Fix up testsuite/gcc.c-torture/execute/builtins/lib/chk.c for powerpc [PR104380]
      libgomp: Fix segfault with posthumous orphan tasks [PR104385]
      rs6000: Fix up vspltis_shifted [PR102140]
      c++: Remove superflous assert [PR104403]
      c++: Don't emit repeated -Wshadow warnings for templates/ctors [PR104379]
      dwarf2out: Don't call expand_expr during early_dwarf [PR104407]
      c: Fix up __builtin_assoc_barrier handling in the C FE [PR104427]
      testsuite: Fix up g++.dg/warn/Wuninitialized-32.C test for ilp32 [PR104373]
      df: Don't set bbs dirty because of debug insn moves [PR104459]
      combine: Fix ICE with substitution of CONST_INT into PRE_DEC argument [PR104446]
      c++: Fix up constant expression __builtin_convertvector folding [PR104472]
      middle-end: Small __builtin_clear_padding improvements
      match.pd: Fix up (X & Y) CMP 0 -> X CMP2 ~Y simplifications [PR104499]
      i386: Fix up cvtsd2ss splitter [PR104502]
      asan: Fix up address sanitizer instrumentation of __builtin_alloca* if it can throw [PR104449]
      c++: Don't reject GOTO_EXPRs to cdtor_label in potential_constant_expression_1 [PR104513]
      openmp: Make finalize_task_copyfn order reproduceable [PR104517]
      sanitizer: Use glibc _thread_db_sizeof_pthread symbol if present
      fold, simplify-rtx: Punt on non-representable floating point constants [PR104522]
      cygwin: Fix up -Werror=format-diag errors [PR104536]
      c-family: Fix up shorten_compare for decimal vs. non-decimal float comparison [PR104510]
      openmp: For min/max omp atomic compare forms verify arg types with build_binary_op [PR104531]
      combine: Fix up -fcompare-debug issue in the combiner [PR104544]
      testsuite: Add testcase for already fixed PR [PR104448]
      openmp: Ensure proper diagnostics for -> in map/to/from clauses [PR104532]
      valtrack: Avoid creating raw SUBREGs with VOIDmode argument [PR104557]
      rs6000: Fix up posix_memalign call in _mm_malloc [PR104598]
      asan: Mark instrumented vars addressable [PR102656]
      i386: Fix up copysign/xorsign expansion [PR104612]
      ranger: Fix up REALPART_EXPR/IMAGPART_EXPR handling [PR104604]
      libiberty: Fix up debug.temp.o creation if *.o has 64K+ sections [PR104617]
      warn-recursion: Don't warn for __builtin_calls in gnu_inline extern inline functions [PR104633]
      sccvn: Fix visit_reference_op_call value numbering of vdefs [PR104601]
      match.pd: Don't create BIT_NOT_EXPRs for COMPLEX_TYPE [PR104675]
      internal-fn: Call do_pending_stack_adjust in expand_SPACESHIP [PR104679]
      warning-control: Comment spelling fix
      i386: Use a new temp slot kind for splitter to floatdi<mode>2_i387_with_xmm [PR104674]
      testsuite: Move pr104540.C test to g++.target/i386/
      rs6000: Use rs6000_emit_move in movmisalign<mode> expander [PR104681]
      match.pd: Further complex simplification fixes [PR104675]
      warn-access: Comment spelling fixes
      warn-access: Fix up check_pointer_uses [PR104715]
      modref: Comment spelling fixes
      strlen: Comment spelling fixes
      testsuite: Add testcases for already fixed PR [PR100541]
      cfgrtl: Fix up -g vs. -g0 code generation -flto differences in fixup_reorder_chain [PR104589]
      cfg: Dump goto_locus if -fdump-*-*-blocks-details
      testsuite: Fix up pr104637 testcase [PR104637]
      calls: When bypassing emit_push_insn for 0 sized arg, emit at least anti_adjust_stack for alignment pad if needed [PR104558]
      openmp: Disable SSA form during gimplification on OMP_SIMD clauses and body [PR104757]
      tree: Fix up warn_deprecated_use [PR104627]
      gimplify: Clear TREE_READONLY on automatic vars being stored into [PR104529]
      waccess: Remove visited bitmap and stop on EDGE_ABNORMAL
      i386: Fix up cond_{and,ior,xor,mul}* [PR104779]
      s390: Fix up *cmp_and_trap_unsigned_int<mode> constraints [PR104775]
      Fix up duplicated duplicated words in comments
      Add missing space in various string literals
      c++: Don't suggest cdtor or conversion op identifiers in spelling hints [PR104806]
      simplify-rtx: Fix up SUBREG_PROMOTED_SET arguments [PR104839]
      c, c++, c-family: -Wshift-negative-value and -Wshift-overflow* tweaks for -fwrapv and C++20+ [PR104711]
      x86: Define LIBGCC2_UNWIND_ATTRIBUTE on ia32 [PR104781]
      contrib: Fix up git-descr.sh regression [PR102664]
      rs6000: Fix up __SIZEOF_{FLOAT,IBM}128__ defines [PR99708]
      c++: allow variadic operator[] for C++23 [PR103460]
      Spelling fix - cannott -> cannot [PR104899]
      i386: Fix up _mm_loadu_si{16,32} [PR99754]
      c++: Reject __builtin_clear_padding on non-trivially-copyable types with one exception [PR102586]
      lra: Fix up debug_p handling in lra_substitute_pseudo [PR104778]
      ifcvt: Punt if not onlyjump_p for find_if_case_{1,2} [PR104814]
      c++: Fix up cp_parser_skip_to_pragma_eol [PR104623]
      i386: Use no-mmx,no-sse for LIBGCC2_UNWIND_ATTRIBUTE [PR104890]
      riscv: Allow -Wno-psabi to turn off ABI warnings [PR91229]
      aarch64: Fix up RTL sharing bug in aarch64_load_symref_appropriately [PR104910]
      gimplify: Emit clobbers for TARGET_EXPR_SLOT vars later [PR103984]
      libatomic: Improve 16-byte atomics on Intel AVX [PR104688]
      openmp: Fix up gomp_affinity_init_numa_domains
      c++: Fix up constexpr evaluation of new with zero sized types [PR104568]
      Allow (void *) 0xdeadbeef accesses without warnings [PR99578]
      c-family: Fix up ICE during pretty-printing of PMF related expression [PR101515]
      i386: Don't emit pushf;pop for __builtin_ia32_readeflags_u* with unused lhs [PR104971]
      libstdc++: Work around clang misdesign in time_get<>::get [PR104990]
      calls: Fix error recovery after sorry differently [PR104989]
      testsuite: Add testcase for no longer failing PR [PR102645]
      lto-plugin: Use GNU ld or Solaris ld version script in preference to -export-symbols-regex [PR102426]
      testsuite: Add testcase for already fixed PR [PR102489]
      testsuite: Fix up sse2-v1ti-shift-3.c test [PR102986]
      c++: extern thread_local declarations in constexpr [PR104994]
      fold-const: Handle C++ dependent COMPONENT_REFs in operand_equal_p [PR105035]
      testsuite: Add compat.exp testcase for most common zero width bitfld ABI passing [PR102024]
      fortran: Fix up initializers of param(0) PARAMETERs [PR103691]
      c++: Fix up __builtin_{bit_cast,convertvector} parsing
      Add another commit to ignore
      Manually add entry for r12-7818-g3ab5c8cd03d92bf4ec41e351820349d92fbc40c4
      ecog: Return 1 from insn_invalid_p if REG_INC reg overlaps some stored reg [PR103775]
      predcom: Fix up component::component [PR105056]
      c++: Fox template-introduction tentative parsing in class bodies clear colon_corrects_to_scope_p [PR105061]
      openmp: Ensure DECL_CONTEXT of OpenMP iterators in templates [PR105092]
      store-merging: Avoid ICEs on roughly ~0ULL/8 sized stores [PR105094]
      ubsan: Fix ICE due to -fsanitize=object-size [PR105093]
      testsuite: Change pr80334.C testcase to dg-do compile [PR102772]
      Revert "testsuite: Change pr80334.C testcase to dg-do compile [PR102772]"
      contrib: Fix up spelling of loongarch-str.h dependency [PR105114]
      testsuite: Add further zero size elt passing tests [PR102024]
      phiopt: Improve value_replacement [PR104645]
      libstdc++: Tweak source_location for clang trunk [PR105128]
      i386: Fix up ix86_expand_vector_init_general [PR105123]
      aarch64: Fix aarch64-tune.md (re)generation [PR105144]
      aarch64: Restrict aarch64-tune.md regeneration to --enable-maintainer-mode [PR105144]
      gimple.cc: Adjust gimple_call_builtin_p and gimple_call_combined_fn [PR105150]
      gimple.cc: Follow-up to adjust gimple_call_builtin_p and gimple_call_combined_fn [PR105150]
      sh: Fix up __attribute__((optimize ("Os"))) handling on SH [PR105069]
      c++: Fix up ICE when cplus_decl_attributes is called with error_mark_node attributes [PR104668]
      combine: Don't record for UNDO_MODE pointers into regno_reg_rtx array [PR104985]
      tree.cc: Add tree_builtin_call_types_compatible_p [PR105150]
      c++: Handle __builtin_clear_padding on non-trivially-copyable types [PR102586]
      fold-const: Fix up make_range_step [PR105189]
      c: Error on va_arg with function type [PR105149]
      testsuite: Fix up 20050113-1.c test for i686-linux [PR105187]
      c-family: Initialize ridpointers for __int128 etc. [PR105186]
      phiopt: Optimize (x != cst1 ? x : cst2) != cst3 [PR104639]
      phiopt: Fix up debug handling in the (x != cst1 ? x : cst2) != cst3 opt [PR105218]
      builtins: Fix up expand_builtin_int_roundingfn_2 [PR105211]
      i386: Fix ICE caused by ix86_emit_i387_log1p [PR105214]
      i386: i386-expand formatting fixes
      libgomp: Fix a documentation typo
      scev: Fix a comment typo
      attribs: Restrict decl_attributes DECL_FUNCTION_SPECIFIC_TARGET changes to targets that care about target attributes/pragmas [PR105234]
      c++: Treat alignas align_expr and aligned attribute's operand as manifestly constant evaluation [PR105233]
      tree.cc: Use useless_type_conversion_p in tree_builtin_call_types_compatible_p while in gimple form [PR105253]
      simplify-rtx: Don't assume shift count has the same mode as the shift [PR105247]
      c++: Fix up CONSTRUCTOR_PLACEHOLDER_BOUNDARY handling [PR105256]
      sparc: Preserve ORIGINAL_REGNO in epilogue_renumber [PR105257]
      cgraph: Fix up semantic_interposition handling [PR105306]
      emit-rtl: Fix -fcompare-debug bug with label references in debug insns [PR105203]
      rtlanal: Fix up replace_rtx [PR105333]
      i386: Improve ix86_expand_int_movcc [PR105338]
      fortran: Fix up gfc_trans_oacc_construct [PR104717]
      libgomp: Fix up two non-GOMP_USE_ALIGNED_WORK_SHARES related issues [PR105358]
      testsuite: Improve unlimited_polymorphic_3.f03 [PR103662]
      i386: Fix up ICE with -mveclibabi={acml,svml} [PR105367]
      testsuite: Fix up g++.target/i386/vec-tmpl1.C testcase [PR65211]
      reassoc: Don't call fold_convert if !fold_convertible_p [PR105374]
      ifcvt: Improve noce_try_store_flag_mask [PR105314]
      asan: Fix up asan_redzone_buffer::emit_redzone_byte [PR105396]
      libstdc++: Update {x86_64,i?86,aarch64,s390x,ppc{,64,64le}} baseline_symbols.txt
      testsuite: Add testcase for dangling pointer equality bogus warning [PR104492]
      i386: Fix up ix86_gimplify_va_arg [PR105331]
      cgraph: Don't verify semantic_interposition flag for aliases [PR105399]
      Set DEV-PHASE to prerelease.
      system.h: Include <initializer_list> in system.h unconditionally
      Update gennews for GCC 12.
      Update ChangeLog and version files for release
      Bump BASE-VER
      c++: Don't emit deprecated warnings or unavailable errors on lambda declarations
      isel: Fix up gimple_expand_vec_set_expr [PR105528]
      libgomp: Clarify that omp_display_env is fully implemented
      pointer-query: Fix ICE with non-pointer param [PR105635]
      asan: Fix up instrumentation of assignments which are both loads and stores [PR105714]
      fold-const: Fix up -fsanitize=null in C++ [PR105729]
      libgomp: Don't define GOMP_HAVE_EFFICIENT_ALIGNED_ALLOC for _aligned_malloc [PR105745]
      libcpp: Ignore CPP_PADDING tokens in _cpp_parse_expr [PR105732]

Jan Hubicka (106):
      Implement EAF_NOT_RETURNED tracking in ipa-modref
      Support EAF_NOT_RETURNED in tree-ssa-structalias
      Fix min_flags handling in mod-ref
      Fix condition testing void functions in ipa-split.
      Introduce EAF_NOREAD and cleanup EAF_UNUSED + ipa-modref
      Add EAF_NOREAD check to tree-ssa-uninit
      Clear EAF_NOCLOBBER for indirect calls
      Improve return slot handling in ipa-modref
      Fix previous ipa-modref patch
      Fix template in g++.dg/tree-ssa/modref-1.C
      Avoid redundant entries in modref access lists.
      Merge load/stores in ipa-modref summaries
      Fix off-by-one error in try_merge_with
      Add full stop to params.opt.
      Improve handling of modref params.
      Fix ipa-modref verification ices
      Improve handling of table overflows in modref_ref_node
      Fix access node merging
      Commonize ipa-pta constraint generation for calls
      Revert accidental change in ipa-modref-tree.h
      Fix ICE in insert_access.
      Fix wrong code in ldost-strlen-1.c
      cleanup compute_points_to_sets
      handle retslot in modref
      Improve handling of return slot in ipa-pure-const and modref.
      addS EAF_NOT_RETURNED_DIRECTLY
      Static chain support in ipa-modref
      ipa-modref cleanup
      Revert accidental commit.
      Fix wrong code caulsed by retslot EAF flags propagation [PR103040]
      Workaround ICE in gimple_call_static_chain_flags
      Avoid left shift of negative value in ipa-modref-tree.h
      Fix ice in insert_access
      Fix can_be_discarded_p wrt partitioned functions.
      Implement intra-procedural dataflow in ipa-modref flags propagation.
      Fix inter-procedural EAF flags propagation with respect to !binds_to_current_def_p
      Limit range of modref-max-depth
      Add loads/stores relative to static chain in ipa-modref
      Move uncprop after modref
      Improve handling of some builtins.
      Remove workaround allowing interposition of nested functions.
      Merge IPA solution with local one in ipa-modref
      Fix modref_tree::remap_params
      Make EAF flags more regular (and expressive)
      Fix typo in modref-13.c
      Extend modref by side-effect analysis
      Fix noreturn discovery.
      Fix recursion discovery in ipa-pure-const
      Fix some side cases of side effects discovery
      Enable pure-const discovery in modref.
      Fix gfortran.dg/inline_matmul_17.f90 template.
      Fix ipa-modref pure/const discovery
      Fix ICE in tree-ssa-structalias.c
      Fix exit condition in ipa_make_function_pure
      Fix ipa-pure-const
      Fix wrong code with pure functions
      Fix wrong code with modref and some builtins.
      Enable ipa-sra with fnspec attributes
      Remember fnspec based EAF flags in modref summary.
      Whitelity type attributes for function signature change
      Add finalize method to modref summary.
      modref_access_node cleanup
      Fix checking disabled build.
      Implement DSE of dead functions calls storing memory.
      More ipa-modref-tree.h cleanups
      Fix bug in ipa-pure-const and add debug counters
      Cleanup tree-ssa-alias and tree-ssa-dse use of modref summary
      Extend modref to track kills
      Track nondeterminism and interposable calls in ipa-modref
      Fix uninitialized access in merge_call_side_effects
      Use modref summaries for byte-wise dead store elimination.
      Fix clearing of to_info_lto in ipa_merge_modref_summary_after_inlining
      Add very basic IPA part of modref-kill analysis
      Fix modref summary streaming
      Fix modref wrt __builtin_assume_aligned
      Turn -fsemantic-interposition to optimization flag
      Use modref even for nested functions in ref_maybe_used_by_call_p_1
      Fix looping flag discovery in ipa-pure-const
      Fix ignore_nondeterminism_p in ipa-modref
      Refactor load/store/kill analysis in ipa-modref
      Fix failure merge_block.c testcase
      Improve base tracking in ipa-modref
      Improve bytewise DSE
      Remove duplicated param valud in modref tree
      Fix handling of static chain in ipa_merge_modref_summary_after_inlining
      Do not check gimple_static_cahin in ref_maybe_used_by_call_p_1
      Initialize node_is_self_scc in ipa_node_params::ipa_node_params
      Remove forgotten early return in ipa_value_range_from_jfunc
      Fix handling of in_flags in update_escape_summary_1
      Fix failure in inlline-9.c testcase
      Minor ipa-modref tweaks
      Improve -fprofile-report
      Compare guessed and feedback frequencies during profile feedback stream-in
      Limit inlining functions called once
      Fix handling of thunks in ipa-modref
      Avoid updating hot bb threshold in call speculation code
      Terminate BB analysis on NULL memory access in ipa-pure-const and ipa-modref
      Do not ICE on ternary expressions when calculating value ranges
      Add -fipa-strict-aliasing
      Determine global memory accesses in ipa-modref
      Fix early exit in modref_merge_call_site_flags
      Fix handling of deferred SSA names in modref dataflow
      Disable gathers for znver3 for vectors with 2 or 4 elements
      Propagate nondeterministic and side_effects flags in modref summary after inlining
      Update semantic_interposition flag at analysis time
      Fix overflows in ipa-modref-tree.cc

Jan-Benedict Glaw (6):
      arc: Remove useless register keyword
      pdp11: Fix signednedd warnings, remove "register" keywords
      Fix multi-statment macro
      cr16-elf is now obsoleted
      Fix redefinition warning
      Mark argument as unused

Jason Merrill (230):
      c++: unexpanded pack in enum in lambda [PR100109]
      c++: -Wdeprecated-copy and using operator= [PR92145]
      c++: unset COMPOUND_LITERAL_P [PR100079]
      c++: constant expressions are evaluated [PR93314]
      c++: ICE with anonymous union [PR97974]
      c++: Fix friend attributes [PR51344]
      c++: Use empty field in constexpr eval.
      c++: Add using-declaration testcase
      c++: C++11 range-for and ovl/lkp_iterator
      c++: don't call 'rvalue' in coroutines code
      c++: avoid non-TARGET_EXPR class prvalues
      c++: reject class lvalues in 'rvalue'
      c++: ICE casting class to vector [PR100517]
      intl: add comments to _, N_, and G_
      c++: simplify enclosing_instantiation_of [PR95870]
      c++: "perfect" implicitly deleted move [PR100644]
      c++: non-static member, decltype, {} [PR100205]
      c++: template template parm pack expansion [PR100372]
      c++: ICE with bad definition of decimal32 [PR100261]
      c++: implicit deduction guides, protected access
      c++: ICE with <=> fallback [PR100367]
      c++: ICE with using and enum [PR100659]
      c++: _Complex template parameter [PR100634]
      c++: designated init with anonymous union [PR100489]
      c++: designators in single-element init lists
      c++: argument pack with expansion [PR86355]
      c++: 'this' adjustment for devirtualized call
      tree-iterator: C++11 range-for and tree_stmt_iterator
      c++: -Wdeprecated-copy and #pragma diagnostic [PR94492]
      c++: no clobber for C++20 destroying delete [PR91859]
      MAINTAINERS: Add DCO section
      c++: missing dtor with -fno-elide-constructors [PR100838]
      MAINTAINERS: Add DCO version number.
      c++: alias member template [PR100102]
      c++: fix modules binfo merging
      c++: alias with same name as base fn [PR91706]
      c++: preserve BASELINK from lookup [PR91706]
      c++: braced-list overload resolution [PR100963]
      c++: Add test for C++23 narrowing conv to bool
      c++: Test for whitespace and line splice
      c++: Test for mixed string literal concatenation
      c++: update diagnostic messages
      c++: remove redundant warning [PR100879]
      c++: speed up looking up the current class
      c++: constexpr and array[0] [PR101029]
      c-family: don't warn for [[maybe_unused]] on data member
      c: adjust [[maybe_unused]] testcase
      libcpp: location comparison within macro [PR100796]
      c++: static memfn from non-dependent base [PR101078]
      c++: Tweak PR101029 fix
      mklog: add subject line skeleton
      c++: deleted after first declaration [PR101106]
      expand: empty class return optimization [PR88529]
      c++: constexpr aggr init of empty class [PR101040]
      except: remove dwarf2out.h dependency
      c++: don't treat member var as var template
      c++: concepts TS and explicit specialization [PR101098]
      c++: enable -fdelete-dead-exceptions by default
      vec: use auto_vec in a few more places
      c++: fix tree_contains_struct for C++ types [PR101095]
      c++: Reject anonymous struct with bases
      c++: pretty-print TYPE_PACK_EXPANSION better
      c++: ICE on anon struct with base [PR96636]
      c++: Set type on dependent ARROW_EXPR
      c++: Add warning about missing 'requires'
      c++: fold function template args sooner [PR101460]
      c++: preserve location through constexpr
      c++: limit instantiation with ill-formed class [PR96286]
      c++: Improve error recovery with constexpr [PR92193]
      c++: use iloc_sentinel in another place
      c++: Various small fixes
      libcpp: __VA_OPT__ tweak
      c++: Avoid bogus -Wunused with recent change
      tree: Change error_operand_p to an inline function
      c++: implement C++17 hardware interference size
      c++: Fix warning on 32-bit x86
      c++: tweak C++20 destructor template-id rule
      c++: correct object scope handling
      c++: don't predeclare std::type_info [PR48396]
      c++: don't warn about internal interference sizes
      c++: add parsing_function_declarator predicate
      c++: Small location tweak
      c++: fix comment typo
      c++: improve lookup of member-qualified names
      c++: One more spaceship test.
      c++: instantiate less for constant folding
      c++: array cv-quals and template specialization [PR101402]
      c++: improve template/crash90.C
      c++: tweak parsing of invalid types
      c++: use range-for more
      c++: constexpr virtual and vbase thunk
      c++: don't do constexpr folding in unevaluated context
      c++: c++20 constexpr default ctor and array init
      c++: is_this_parameter and coroutines proxies
      c++: check constexpr constructor body
      c++: location of lambda object and conversion call
      c++: split_nonconstant_init and flexarrays
      c++: Add -fimplicit-constexpr
      c++: improve print_node of PTRMEM_CST
      c-family: don't cache large vecs
      doc: document -fimplicit-constexpr
      c++: improved return expression location
      c++: remember pointer-to-member location
      timevar: Add auto_cond_timevar class
      c++: don't fold away 'if' with constant condition
      c++: constexpr, fold, weak redecl, fp/0 [PR103310]
      c++: avoid redundant scope in diagnostics
      symtab: fix comment typo
      libstdc++: check length in string append [PR103534]
      c++: layout of aggregate base with DMI [PR103681]
      c++: tweak comment
      c++: ICE on enum with bool value [PR99968]
      c++: don't wrap cleanups that can't throw
      c++: fix array cleanup with throwing temp dtor
      tree-pretty-print: still indent unhandled codes
      c++: add emacs c++-mode marker
      c++: add begin/end to releasing_vec
      c++: don't preevaluate new-initializer
      c++: loop over array elts w/o explicit init [PR92385]
      c++: temporary lifetime with aggregate init [PR94041]
      c++: temporary lifetime with array aggr init [PR94041]
      c++: EH and partially constructed aggr temp [PR66139]
      c++: don't cleanup the last aggregate elt
      c++: keep destroying array after one dtor throws [PR66451]
      c++: clean up ref-extended temp on throwing dtor [PR53868]
      c++: destroy retval on throwing cleanup in try [PR33799]
      c++: nested catch in ctor fn-try-block [PR61611]
      c++: when delegating constructor throws [PR103711]
      c++: temporarily restore VEC_INIT_EXPR gimplify [PR103936]
      c++: check delete access with trivial init [PR20040]
      c++: destroying delete, throw in new-expr [PR100588]
      c++: default mem-init of array [PR103946]
      diagnostic: avoid repeating include path
      c++: new (nothrow) array cleanup [PR104007]
      c++: input_location and lookahead [PR104025]
      c++: Use -std=c++20 in testsuite default std list
      c++: fix PR104025 change
      c++: template-id with current inst qualifier [PR102300]
      c++: designator for base class member [PR101405]
      c++: [[no_unique_address]] and virtual base [PR104139]
      c++: class array new checking [PR104084]
      c++: explain failing static_assert
      c++: constexpr and -fno-elide-constructors [PR101072]
      c++: array temporary at file scope [PR104182]
      c++: assignment to temporary [PR59950]
      c++: alias template and typename [PR103057]
      c++: ->template and using-decl [PR104235]
      c++: vector compound literal [PR104206]
      c++: dependent and non-dependent attributes [PR104245]
      c++: pack in enumerator in lambda [PR100198]
      tree: move tree_vec_map_cache_hasher into header
      c++: lambda in template default argument [PR103186]
      c++: dependent array bounds completion [PR104302]
      c++: add comment
      c++: assignment, aggregate, array [PR104300]
      c++: cleanup constant-init'd members [PR96876]
      c++: P2493 feature test macro updates
      c++: modules and explicit(bool) [PR103752]
      c++: ICE on xtreme-header_a.H
      c++: TTP in member alias template [PR104107]
      c++: avoid duplicate deprecated warning [PR90451]
      tree: tweak warn_deprecated_use
      c++: inlining explicit instantiations [PR104539]
      c++: (*(fn))() [PR104618]
      c++: tweak to (*(fn))() patch [PR104618]
      c++: using lookup within class defn [PR104476]
      tree: Add comment.
      c++: designator and anon struct [PR101767]
      c++: designated init and aggregate members [PR103337]
      c++: initialized array of vla [PR58646]
      c++: using from enclosing class template [PR105006]
      c++: tweak PR105006 fix
      c++: tweak PR103337 fix
      c++: delayed parse DMI [PR96645]
      c++: ICE with alias in pack expansion [PR103769]
      c++: mangling union{1} in template [PR104847]
      c++: missing aggregate base ctor [PR102045]
      c++: CTAD and member function references [PR103943]
      c++: member alias declaration [PR103968]
      c++: CTAD and member alias template [PR102123]
      c++: visibility of local extern [PR103291]
      c++: low -faligned-new [PR102071]
      c++: hash table ICE with variadic alias [PR105003]
      c++: add comment
      c++: Fix __has_trivial_* docs [PR59426]
      c++: parse trivial DMI immediately [PR96645]
      Revert "c++: delayed parse DMI [PR96645]"
      c++: alias-tmpl equivalence and default targs [PR103852]
      c++: repeated friend template [PR101894]
      c++: adjust testcase
      c++: elaborated-type-spec in requires-expr [PR101677]
      c++: alias template equivalence and CTAD [PR103852]
      c++: -Wshadow=compatible-local type vs var [PR100608]
      c++: -Wunused-value and array init [PR104702]
      c++: vector compound literal [PR105187]
      c++: nested generic lambda in DMI [PR101717]
      c++: conversion with trailing return type [PR101051]
      c++: friend implicit template instantiation [PR91618]
      c++: constexpr non-trivial aggregate init [PR105191]
      c++: -Wplacement-new and anon union member [PR100370]
      c++: operator new lookup [PR98249]
      ipa: fix comment typos
      c++: using operator= [PR105223]
      c++: rodata and defaulted ctor [PR104142]
      c++: non-array new alignment [PR102071]
      c++: local function versioning [PR104669]
      c++: empty base constexpr -fno-elide-ctors [PR105245]
      c++: add test [PR105265]
      c++: NRV and ref-extended temps [PR101442]
      c++: template conversion op [PR101698]
      c++: local fn and generic lambda [PR97219]
      c++: alignment of local typedef in template [PR65211]
      c++: lambda and the current instantiation [PR82980]
      c++: constexpr trivial -fno-elide-ctors [PR104646]
      c++: using in diagnostics [PR102987]
      c++: unsigned int32_t enum promotion [PR102804]
      c++: generic lambda fn parm pack [PR104624]
      c++: pack init-capture of unresolved overload [PR102629]
      c++: add comments
      c++: typeid and instantiation [PR102651]
      c++: alias CTAD and member alias templates [PR104470]
      c++: array {}-init [PR105589]
      c++: constexpr ref to array of array [PR102307]
      c++: deduction from auto fn [PR105623]
      c++: CTAD with alias and nested template [PR105655]
      c++: lambda in concept [PR105652]
      c++: auto function as function argument [PR105779]
      c++: auto and dependent member name [PR105734]
      c++: constexpr empty aggr [PR105795]
      c++: redeclared hidden friend [PR105761]

Javier Miranda (14):
      [Ada] Wrong membership test computation for interface type
      [Ada] ACATS 4.1R-c611a04: Class-wide preconditions in dispatching calls
      [Ada] ACATS 4.1R-c611a04: Class-wide preconditions in dispatching calls
      [Ada] Ada2020: Special handling of types derived from runtime
      [Ada] Ada2020: AI12-0195 overriding class-wide pre/post conditions
      [Ada] Interface behaves differently from abstract tagged null
      [Ada] Wrappers of access-to-subprograms with pre/post conditions
      [Ada] Ada2022: AI12-0195 overriding class-wide pre/postconditions
      [Ada] Entities in E_Loop scopes are not library-level entities
      [Ada] Fix latent problem in Sem_Ch8.Build_Class_Wide_Wrapper
      [Ada] Ada 2022: Class-wide types and formal abstract subprograms
      [Ada] Crash in class-wide pre/postconditions
      [Ada] Spurious error caused by order of interfaces in full view
      [Ada] Crash in class-wide pre/postconditions

Jeff Law (69):
      Fix nios2 build failure
      Fix test results on cr16 and xstormy16
      Fix test results on or1k
      Fix test results on rx
      Fix xstormy16 selector
      Fix expected output for lm32 and bfin
      Fix expected output for nds32le and m32r
      Make bfin-elf build again
      Remove NOTICE_UPDATE_CC remnants on cr16
      Remove cc0 remnants from avr port
      [committed][PR bootstrap/100730] Fix warnings in H8 target files
      Fix minor bugs in H8 port logical ops.  Prepare for more compare/test removal
      Fix split conditions in H8/300 port
      * MAINTAINERS: Add myself to DCO section with both email addresses.
      Fix maintainers-verify.sh
      Use moves to eliminate redundant test/compare instructions
      Further improve redundant test/compare removal on the H8
      Finish last change
      Revert "Finish last change"
      Use memory loads and extensions to eliminate redundant test/compare insns
      [committed] More improvements to H8 logicals for test/compare elimination
      Minor improvement to compare elimination
      [committed] More useless code elimination on the H8
      Use more logicals to eliminate useless test/compare instructions
      Use right shifts to eliminate redundant test/compare insns on the H8
      Fix xstormy16 target specific fallout from recent int->bool changes
      Fix frv target specific fallout from recent int->bool changes
      Fix m32r target specific fallout from recent int->bool changes
      Preparing to use shifts to eliminate redundant test/compare insns on H8
      Use shift instructions to eliminate redundant compare/test instructions on the H8
      Remove redundant compare in shift loop on H8
      Use H8 nop moves as tst insns
      Further improvements to H8 variable shift patterns
      Attach MEM_EXPR information when flushing BLKmode args to the stack - V2
      Fix argument to pthread_join
      Reinstate branch-on-bit insns for H8
      Fix c6x test compromised by recent improvements to bswap & rotates
      Improve many SImode shifts on the H8/300H
      Drop embeded stabs from rl78 port
      Improve SImode shifts for H8
      Drop stabs from h8/300 and v850 ports
      Further improvements to constant shifts for the H8
      Add tailcall/sibcall support to the H8
      Reduce vector comparison of uniform vectors to a scalar comparison
      Support limited setcc for H8
      More stabs removal.
      Restore intent of data-sym-multi-pool test
      Call reduce_vector_comparison_to_scalar_comparison earlier
      Improve handling of C bit for setcc insns
      [committed] Make test names unique for a couple of goacc tests
      Fix more testsuite fallout from computed goto changes
      Fix s390 test to have pointer type for computed goto
      Fix predcom-3.c on arc-elf after vectorizer changes
      Fix mips testsuite fallout from vectorizer changes
      Trivial fix to gil-1.c when analyzer is not enabled
      Fixup MAINTAINERS file
      Avoid overly-greedy match in dejagnu regexp.
      Minor optimization of variable bit testing
      Fix two mips target tests compromised by recent IPA work
      Fix MIPS test after recent match.pd changes
      Clobber the condition code in the bfin doloop patterns
      [committed] Fix expected output for various MIPS multiplication tests
      Fix expected output for s390 tests
      Avoid using predefined insn name for instruction with different semantics
      Fix testsuite fallout from pr104960 change
      [committed][PR target/104987] Avoid "likely" forms of bbi[n] on iq2000.
      [committed] Minor bfin codegen bugfix
      [committed] exec-stack warning for test which wants executable stacks
      [committed] Fix more problems with new linker warnings

Jia-Wei Chen (2):
      RISC-V: Change default ISA version into 20191213
      testsuite: Skip target not support -pthread [PR104676].

Jiang Haochen (1):
      i386: Add missing BMI intrinsic to align with clang

Jim Wilson (6):
      RISC-V: Enable riscv attributes by default for all riscv targets.
      RISC-V: Implement instruction patterns for ZBA extension.
      RISC-V: Implement instruction patterns for ZBB extension.
      RISC-V: Use li and rori to load constants.
      RISC-V: Implement instruction patterns for ZBS extension.
      Update my email address.

Jiufu Guo (5):
      Use preferred mode for doloop IV [PR61837]
      Analyze niter for until-wrap condition [PR101145]
      Set bound/cmp/control for until wrap loop.
      Update dg-require-effective-target for pr101145 cases
      Update the type of control.base after changed

JoJo R (1):
      regrename: Skip renaming if instruction is noop move.

Joel Brobecker (1):
      [Ada] Makefile.rtl:ADA_EXCLUDE_SRCS update after some System.GCC unit renames

Joel Hutton (1):
      pr103523: Check for PLUS/MINUS support

Joel Sherrill (1):
      Obsolete m32c-rtems target

Joel Teichroeb (1):
      analyzer: Fix tests for glibc 2.35 [PR101081]

Joern Rennecke (6):
      Avoid outputting corrupt string constructor when host/target chars mismatch.
      Improve message for wrong number of alternatives.
      libstdc++: Disable floating_to_chars.cc on 16 bit targets
      Fix bug in the define_subst handling that made match_scratch unusable for multi-alternative patterns.
      Fix match_dup bug of define_cond_exec.
      Recognize popcount also when a double width operation is needed.

Joffrey Huguet (2):
      [Ada] Fix layout of contracts
      [Ada] Add Default_Initial_Condition to type Unbounded_String

Johannes Kliemann (3):
      [Ada] Add ghost code version of Ada.Numerics.Big_Numbers.Big_Integers
      [Ada] Define __wrs_rtp_base in linker spec
      [Ada] Add gcc specs with vxworks7 base addresses for cert

John David Anglin (22):
      Use libiberty snprintf and vsnprintf on hppa*-*-hpux*.
      Require target lra for tests using asm goto
      Define STAGE1_LIBS to link against libcl.a in stage1 on hpux.
      Don't warn when alignment of global common data exceeds maximum alignment.
      Don't build libgcc_stub.a on hppa[12]*-*-hpux11*.
      Fix libgfortran build on hppa*-hp-hpux[01]*
      Default to dwarf version 4 on hppa64-hpux
      Add support for 32-bit hppa targets in muldi3 expander
      Fix TARGET_SOFT_FLOAT patterns in pa.md
      Consistently use "rG" constraint for copy instruction in move patterns
      Don't use 'G' constraint in integer move patterns
      Revise -mdisable-fpregs option and add new -msoft-mult option
      Fix warnings building linux-atomic.c and fptr.c on hppa64-linux
      Move PREFERRED_DEBUGGING_TYPE define in pa64-hpux.h to pa.h
      Support TI mode and soft float on PA64
      Fix typo in t-dimode
      Improve atomic store implementation on hppa-linux.
      Use optab_libfunc to access sync_lock_test_and_set libfunc on hppa-linux.
      Generate illegal instruction fault if LWS syscall returns -EFAULT.
      Skip gcc.dg/guality/example.c on hppa-linux.
      Adjust shadd-2 and shadd-3 scan counts.
      Fix declarations of _DINFINITY, _SINFINITY and _SQNAN

John Eivind Helset (1):
      coroutines: Fix ICE with an invalid await_suspend type [PR100673].

John Ericson (1):
      Factor out `find_a_program` helper around `find_a_file`

Jojo R (1):
      RISC-V: Add tune info for T-HEAD C906.

Jonathan Wakely (671):
      libstdc++: Define __cpp_lib_to_chars for C++20 [PR 100146]
      libstdc++: Disable tests that fail after atomic wait/notify rewrite
      libstdc++: Fix whitespace in license boilerplate
      libstdc++: Remove #error from <semaphore> implementation [PR 100179]
      libstdc++: Reject std::make_shared<T[]> [PR 99006]
      libstdc++: Fix typo in comment
      libstdc++: Add options for libatomic to test
      libstdc++: Fix semaphore to work with system_clock timeouts
      libstdc++ Simplify definition of net::socket_base constants
      libstdc++: Clarify argument to net::io_context::async_wait
      libstdc++: Allow net::io_context to compile without <poll.h> [PR 100180]
      libstdc++: Add missing 'inline' specifiers to net::ip functions [PR 100259]
      libstdc++: Add missing headers for errno and std::terminate
      libstdc++: Simplify definition of net::ip::resolver_base constants
      libstdc++: Fix socket option classes
      libstdc++: Fix internet socket option classes
      libstdc++: Define net::socket_base::message_flags operators as friends [PR 100285]
      libstdc++: Better preprocessor conditions in net::ip [PR 100286]
      libstdc++: Minor refactoring in <experimental/internet>
      libstdc++: Add missing noexcept on std::thread member function [PR 100298]
      libstdc++: Reduce output of 'make doc-pdf-doxygen'
      libstdc++: Define __cpp_lib_constexpr_string macro
      libstdc++: Deprecate non-standard std::pair constructors [PR 99957]
      libstdc++: Simplify std::pair constraints using concepts
      libstdc++: Add testcase for std::pair as a structural type [PR 97930]
      libstdc++: Define effective-target for net::ip features [PR 100351]
      libstdc++: Use <sys/socket.h> features conditionally [PR 100285]
      libstdc++: Implement LWG 1203 for rvalue iostreams
      libstdc++: Use std::addressof to avoid ADL for operator& [PR 60497]
      libstdc++: Remove GLIBCXX_CHECK_INT64_T checks
      libstdc++: Fix inconsistent feature test macros
      libstdc++: Remove _GLIBCXX_USE_INT128 autoconf macro
      libstdc++: Do not use deduced return type for std::visit [PR 100384]
      libstdc++ Fix undefined behaviour in testsuite
      libstdc++: Fix null dereference in pb_ds containers
      libstdc++: Fix undefined behaviour in std::string
      libstdc++: Fix null dereferences in std::promise
      libstdc++: Use unsigned char argument to std::isdigit
      libstdc++: Add tests for std::invoke feature test macro
      Revert "libstdc++: Use unsigned char argument to std::isdigit"
      libstdc++: Fix definition of std::remove_cvref_t
      libstdc++: Improve static assert messages
      libstdc++: Fix constraints for rvalue stream insertion/extraction
      libstdc++: Rename test type to avoid clashing with std::any
      libstdc++: Adjust expected errors in tests when compiled as C++20
      libstdc++: Remove redundant -std=gnu++17 options from PSTL tests
      libstdc++: Remove redundant -std=gnu++17 options from filesystem tests
      libstdc++: Remove redundant -std=gnu++17 option from any/optional/variant tests
      libstdc++: Remove redundant -std=gnu++17 option from concurrency tests
      libstdc++: Remove redundant -std=gnu++17 option from PMR tests
      libstdc++: Remove redundant -std=gnu++17 option from strings tests
      libstdc++: Remove redundant -std=gnu++17 option from containers tests
      libstdc++: Remove redundant -std=gnu++17 option from algorithm tests
      libstdc++: Remove redundant -std=gnu++17 option from remaining tests
      libstdc++: Implement proposed resolution to LWG 3548
      libstdc++: Remove TODO comment
      libstdc++: Fix missing members in std::allocator<void>
      libstdc++: Fix tests that fail in C++98 mode
      libstdc++: Fix some problems in PSTL tests
      libstdc++: Allow lualatex to be used for Doxygen PDF
      libstdc++: Fix std::jthread assertion and re-enable skipped test
      libstdc++: Fix filesystem::path constraints for volatile [PR 100630]
      c++: Fix diagnostic for binding lvalue reference to volatile rvalue [PR 100635]
      gcc-changelog: Remove use of non-strict mode
      doc: Update description of __GXX_EXPERIMENTAL_CXX0X__
      c++: Add new warning options for C++ language mismatches
      libstdc++: Use __builtin_unreachable for constexpr assertions [PR 100676]
      libstdc++: Do not use static_assert without message in C++11
      libstdc++: Qualify functions used in tests
      libstdc++: Change [range.iter.op] functions to function objects [PR 100768]
      libstdc++: Fix installation of python hooks [PR 99453]
      libstdc++: Fix return value of std::ranges::advance [PR 100833]
      libstdc++: Fix new test for C++98 mode [PR 89728]
      libstdc++: Fix effective target for new tests [PR 96088]
      libstdc++: Improve punctuation in implementation status docs
      libstdc++: Fix tests for COW std::string [PR 96088]
      libstdc++: Value-initialize objects held by EBO helpers [PR 100863]
      libstdc++: Add feature test macro for heterogeneous lookup in unordered containers
      libstdc++: Fix value categories used by ranges access CPOs [PR 100824]
      libstdc++: Fix helper concept for ranges::data [PR 100824]
      libstdc++: Implement LWG 3403 for std::ranges::ssize
      libstdc++: Fix return type of ranges::ssize for 128-bit integer [PR 100824]
      libstdc++: Constrain three-way comparison for std::optional [PR 98842]
      libstdc++: Finish implementing LWG 3413 for propagate_const
      libstdc++: Add warnings for some C++23 deprecations
      libstdc++: Fix constraint on std::optional assignment [PR 100982]
      libstdc++: Fix filesystem::path comparisons for C++23
      libstdc++: Use reserved name for attribute [PR101055]
      libstdc++: Change [cmp.alg] assertions to constraints
      libstdc++: Implement LWG 3465 for std::compare_partial_order_fallback [PR101056]
      libstdc++: Add explicit -std=gnu++17 option to test
      libstdc++: Fix std::any constraints [PR101034]
      libstdc++: Only run Filesystem TS test if supported
      c-family: Add fix-it suggestions for more <stdlib.h> names [PR101052]
      libstdc++: Fix common_reference for non-reference results [PR100894]
      libstdc++: Fix noexcept-specifier for ranges::empty
      libstdc++: Use function object for __decay_copy helper
      libstdc++: Remove precondition checks from ranges::subrange
      libstdc++: Add noexcept specifiers to some range adaptors
      libstdc++: Make ranges CPOs final and not addressable
      libstdc++: Revert final/non-addressable changes to ranges CPOs
      libstdc++: Use named struct for __decay_copy
      libstdc++: Simplify constexpr checks in std::char_traits [PR 91488]
      libstdc++: Suppress -Wstringop-overread warning in test
      libstdc++: Replace incorrect static assertion in std::reduce [PR95833]
      libstdc++: Improve std::lock algorithm
      libstdc++: Implement LWG 3422 for std::seed_seq
      libstdc++: Remove garbage collection support for C++23 [P2186R2]
      libstdc++: Simplify std::try_lock and std::lock further
      libstdc++: Avoid "__lockable" name defined as macro by newlib
      libstdc++: Fix comment in chrono::year::is_leap()
      libstdc++: Implement LWG 2762 for std::unique_ptr::operator*
      libstdc++: Fix typos and markdown errors in new simd/README.md
      libstdc++: More workarounds in 17_intro/names.cc test [PR 97088]
      libstdc++: Remove noexcept from syncbuf::swap (LWG 3498)
      libstdc++: Fix exception handling in std::ostream seek functions
      libstdc++: Implement LWG 581 for std:ostream::flush()
      libstdc++: Avoid intercepting exception in ostream::write
      libstdc++: Implement LWG 415 for std::ws
      libstdc++: Allow unique_ptr<Incomplete[]>::operator[] [PR 101236]
      libstdc++: Fix backwards logic in 17_intro/names.cc test [PR 97088]
      libstdc++: Remove redundant explicit instantiations
      libstdc++: Suppress redundant definitions of static members in <random>
      libstdc++: Make <experimental/simd> depend on C++17
      libstdc++: Improve Doxygen documentation groups [PR 101258]
      libstdc++: Improvements to Doxygen markup
      libstdc++: Revert changes to std::unique_ptr<T[]>::operator[] [PR 101271]
      libstdc++: Constrain std::as_writable_bytes [PR101411]
      libstdc++: Remove duplicate #include in <string_view>
      libstdc++: Simplify basic_string_view::ends_with [PR 101361]
      libstdc++: Add noexcept-specifier to basic_string_view(It, End)
      libstdc++: Add noexcept to __replacement_assert [PR101429]
      libstdc++: Fix std::get<T> for std::tuple [PR101427]
      libstdc++: Suppress pedantic warnings about __int128
      libstdc++: Adjust doxygen markup for variable templates group [PR101307]
      libstdc++: Adjust doxygen markup for unique_ptr grouping
      libstdc++: Use __extension__ instead of diagnostic pragmas
      libstdc++: Modernize <bits/random.h> helpers
      libstdc++: Simplify numeric_limits<__max_size_type>
      libstdc++: Fix ChangeLog entry for commit r12-2326
      libstdc++: Improve diagnostics for std::get with invalid tuple index
      libstdc++: Add more tests for filesystem::create_directory [PR101510]
      libstdc++: fix is_default_constructible for hash containers [PR 100863]
      libstdc++: Fix create_directories to resolve symlinks [PR101510]
      libstdc++: Make __gnu_cxx::sequence_buffer move-aware [PR101542]
      libstdc++: Restore __gnu_debug::array [PR100682]
      libstdc++: Initialize all subobjects of std::function
      libstdc++: Use std::addressof in ranges::uninitialized_xxx [PR101571]
      libstdc++: Use __builtin_operator_new when available [PR94295]
      libstdc++: Fix non-default constructors for hash containers [PR101583]
      libstdc++: Update documentation comments for namespace rel_ops
      libstdc++: Reduce headers included by <future>
      libstdc++: Reduce header dependencies on <array> and <utility>
      libstdc++: Remove unnecessary uses of <utility>
      libstdc++: Move COW string definitions to separate header
      libstdc++: Adjust whitespace in <bits/cow_string.h>
      testsuite: Add missing C++ includes to tests [PR101646]
      libstdc++: Simplify std::optional::value()
      libstdc++: Use secure_getenv for filesystem::temp_directory_path() [PR65018]
      Add missing descriptions gcc/testsuite/ChangeLog
      libstc++: Add dg-error for additional error in C++11 mode
      libstdc++: Fix filesystem::temp_directory_path [PR101709]
      libstdc++: Avoid using std::unique_ptr in <locale>
      libstdc++: Reduce header dependencies in <regex>
      libstdc++: Add testsuite proc for testing deprecated features
      libstdc++: Deprecate std::random_shuffle for C++14
      libstdc++: Remove trailing whitespace in some tests
      libstdc++: Specialize allocator_traits<pmr::polymorphic_allocator<T>>
      libstdc++: Replace TR1 components with C++11 ones in test utils
      libstdc++: Suppress redundant definitions of inline variables
      libstdc++: Add [[nodiscard]] to iterators and related utilities
      libstdc++: Add [[nodiscard]] to sequence containers
      libstdc++: Move attributes that follow requires-clauses [PR101782]
      testsuite: Fix warning introduced by nodiscard in libstdc++
      libstdc++: Add [[nodiscard]] to <compare>
      libstdc++: Move [[nodiscard]] attributes again [PR101782]
      libstdc++: Also move the [[nodiscard]] attributes in <compare>
      libstdc++: Make allocator equality comparable in tests
      libstdc++: Reduce use of debug containers in <regex>
      libstdc++: Fix missing descriptions in ChangeLog entries
      libstdc++: Define std::is_pointer_interconvertible_base_of for C++20
      libstdc++: Fix test that fails randomly [PR101866]
      libstdc++: Add #error to some files that depend on a specific standard mode
      libstdc++: Add [[nodiscard]] to experimental::randint
      libstdc++: Make some #error strings consistent with other tests
      libstdc++: Add additional overload of std::lerp [PR101870]
      libstdc++: Install GDB pretty printers for debug library
      libstdc++: Use qualified-id for class member constant [PR101937]
      libstdc++: Add pretty printer for std::error_code and std::error_condition
      libstdc++: Add conditional noexcept to std::exchange
      libstdc++: Rename __detail::__not_same_as helper
      libstdc++: Only define basic_string::contains for C++23
      libstdc++: Optimize std::function move constructor [PR101923]
      libstdc++: Remove pretty printer committed by mistake
      libstdc++: Test std::seed_seq construction from input iterators
      libstdc++: Fix vector<bool> printer tests to work in debug mode
      libstdc++: Fix CTAD for debug sequence containers
      libstdc++: Minor optimization for min/max/minmax
      libstdc++: Simplify n-ary arithmetic promotion traits
      libstdc++: Enable doxygen processing for C++20 components
      libstdc++: Improve doxygen comments in <bits/stl_function.h>
      libstdc++: Improve doxygen documentation for std::unique_ptr
      libstdc++: Tweak whitespace
      libstdc++: Improve overflow check for file timestamps
      libstdc++: Improve doxygen docs for smart pointers
      libstdc++: Document P1739R4 status [PR100139]
      libstdc++: Fix move construction of std::tuple with array elements [PR101960]
      libstdc++: Don't check always-true condition [PR101965]
      libstdc++: Update Doxygen config template to Doxygen 1.9.2
      libstdc++: Move status table entry to be with other ranges papers
      libstdc++: Skip filesystem tests that depend on permissions [PR90787]
      libstdc++: Make permissions_are_testable function inline [PR90787]
      libstdc++: Use __builtin_expect in __dynamic_cast
      libstdc++: Add default template argument to basic_istream_view
      libstdc++: Fix mismatched class-key tags
      libstdc++: Add std::is_layout_compatible trait for C++20
      libstdc++: Update C++20 status table for layout-compatibility traits
      libstdc++: Remove __gnu_cxx::rope::erase(size_type) [PR102048]
      libstdc++: Fix conditions for optimizing uninitialized algos [PR102064]
      libstdc++: Fix non-reserved names in <valarray>
      libstdc++: Fix names.cc test failures on Windows
      libstdc++: Add another non-reserved name to tests
      libstdc++: Make Networking TS headers more portable [PR100285]
      libstdc++: Add static assertions for std::function requirements
      libstdc++: Avoid a move in std::function construction (LWG 2447)
      libstdc:: Use markdown for Doxygen comments in std::function
      libstdc++: Name std::function template parameter
      libstdc++: Fix inefficiency in filesystem::absolute [PR99876]
      libstdc++: Fix comment typo
      libstdc++: Fix std::allocator<void> for versioned namespace
      libstdc++: Fix 17_intro/names.cc failures on Solaris
      libstdc++: Fix ip::tcp::resolver test failure on Solaris
      libstdc++: Improve error handling in Net TS name resolution
      libstdc++: Add missing return for atomic timed wait [PR102074]
      libstdc++: Remove redundant noexcept-specifier on definitions
      libstdc++: Fix broken autoconf check for O_NONBLOCK
      libstdc++: Add valid range checks to std::span constructors [PR98421]
      libstdc++: Define std::invoke_r for C++23 (P2136R3)
      libstdc++: Remove "no stronger" assertion in compare exchange [PR102177]
      libstdc++: Tweak whitespace in <atomic>
      libstdc++: Implement std::atomic<T*>::compare_exchange_weak
      c++: Fix docs on assignment of virtual bases [PR60318]
      libstdc++: Use "test.invalid." for invalid hostname
      libstdc++: Add noexcept to unique_ptr accessors
      libstdc++: Add noexcept to std::to_string overloads that don't allocate
      libstdc++: Fix recipes for C++11-compiled files in src/c++98
      libstdc++: Add missing constraint to std::span deduction guide [PR102280]
      libstdc++: Add missing 'constexpr' to std::tuple [PR102270]
      libstdc++: Remove non-deducible parameter for std::advance overload
      libstdc++: Add noexcept to std::nullopt_t constructor
      libstdc++: Update documentation that only refers to c++98 and c++11
      libstdc++: Increase timeout factor for slow pb_ds tests
      libstdc++: Regenerate the src/debug Makefiles as needed
      libstdc++: Rename tests with incorrect extension
      libstdc++: Fix last std::tuple constructor missing 'constexpr' [PR102270]
      libstdc++: Add 'noexcept' to path::iterator members
      configure: Update --help output for --with-multilib-list
      libstdc++: std::system_category should know meaning of zero [PR102425]
      libstdc++: Improvements to standard error category objects
      libstdc++: Make std::system_category() recognize Windows error codes
      libstdc++: Disable PCH for test that depends on a macro being defined
      libstdc++: Remove c++20-specific dg-error directives in test
      libstdc++: Remove redundant 'inline' specifiers
      libstdc++: Fix mismatched noexcept-specifiers in filesystem::path [PR102499]
      libstdc++: Improve std::forward static assert message
      libstdc++: Specialize std::pointer_traits<__normal_iterator<I,C>>
      libstdc++: Fix _OutputIteratorConcept checks in algorithms
      libstdc++: Fix tests that use invalid types in ordered containers
      libstdc++: Improve types used as iterators in testsuite
      libstdc++: Fix concept checks for iterators
      libstdc++: Skip tests that fail with _GLIBCXX_CONCEPT_CHECKS
      libstdc++: Skip container adaptor tests that fail concept checks
      libstdc++: Define macro before it is first checked
      libstdc++: Add noexcept to functions in <regex>
      libstdc++: Tweaks to <regex> to avoid warnings
      libstdc++: Remove obfuscating typedefs in <regex>
      libstdc++: Fix return values for atomic wait on futex
      libstdc++: Simplify std::basic_regex construction and assignment
      libstdc++: std::basic_regex should treat '\0' as an ordinary char [PR84110]
      libstdc++: Check for invalid syntax_option_type values in <regex>
      libstdc++: Implement std::regex_constants::multiline (LWG 2503)
      MAINTAINERS: Add myself to DCO section
      libstdc++: Fix preprocessor check for C++17
      libstdc++: Replace try-catch in std::list::merge to avoid O(N) size
      libstdc++: Fix _ForwardIteratorConcept for __gnu_debug::vector<bool>
      libstdc++: Add noexcept to istream_iterator and ostream_iterator
      libstdc++: Add missing header to test
      libstdc++: Define basic_regex::multiline for non-strict modes
      libstdc++: Implement std::clamp with std::min and std::max [PR 96733]
      libstdc++: Do not allocate a zero-size vector<bool> [PR 100153]
      libstdc++: Use conditional noexcept in std::reverse_iterator [PR 94418]
      libstdc++: Add noexcept to common_iterator proxy operators
      libstdc++: Make move ctor noexcept for fully-dynamic string
      libstdc++: Simplify __normal_iterator converting constructor
      libstdc++: Allow visiting inherited variants [PR 90943]
      libstdc++: Optimize std::visit for the common case [PR 78113]
      libstdc++: Add std::__conditional_t alias template
      libstdc++: Add utility for creating std::error_code from OS errors
      libstdc++: Avoid unconditional use of errc::not_supported [PR 99327]
      libstdc++: Fix narrowing conversion in std::visit
      libstdc++: Simplify __throw_out_of_range_fmt for freestanding
      libstdc++: Remove useless base classes in pb_db tests
      libstdc++: Remove unary_function base classes from std::thread tests
      libstdc++: Implement LWG 3392 for std::ranges::distance
      libstdc++: Implement LWG 3522 for std::priority_queue
      libstdc++: Implement LWG 3529 for std::priority_queue
      libstdc++: Implement LWG 3506 for std::priority_queue
      libstdc++: Add container adaptor constructors taking iterators (P1425R4)
      libstdc++: Make std::jthread support pointers to member functions [PR 100612]
      libstdc++: Allow stateful allocators in std::list::sort [PR 66742]
      libstdc++: Reduce header dependencies for C++20 std::erase [PR92546]
      libstdc++: Restore printing of assertion messages [PR102100]
      libstdc++: Fix typos in std::filesystem code
      libstdc++: Disable std::string{,_view} construction from nullptr (P2166R1)
      libstdc++: Add missing noexcept to std::variant helper
      libstdc++: Implement P1518R2 for container deduction guides
      libstdc++: Update __cpp_lib_adaptor_iterator_pair_constructor value
      libstdc++: Support printing volatile pointers (P1147R1)
      libstdc++: Add noexcept to some std::function internals
      libstdc++: Fix testcase for newly-implemented C++20 semantics [PR102535]
      libstdc++: Improve test for printing volatile pointers
      libstdc++: Add test for std::cmp_greater
      libstdc++: Simplify constraints for std::any construction
      libstdc++: Ensure std::span and std::string_view are trivially copyable (P2251R1)
      libstdc++: Implement std::move_only_function for C++23 (P0288R9)
      c++: Do not warn about lifetime of std::initializer_list<T>& [PR102482]
      libstdc++: Avoid debug checks in uniform container erasure functions
      libstdc++: Avoid use of hardware interference non-constant [PR102377]
      libstdc++: Move C++14 <chrono> components to new <bits/chrono.h> header
      libstdc++: Implement ostream insertion for chrono::duration
      libstdc++: Restore debug checks in uniform container erasure functions
      libstdc++: Reduce header dependencies of <algorithm> in C++20 [PR 92546]
      libstdc++: Detect miscompilation of src/c++11/limits.cc
      libstdc++: Avoid instantiation of _Hash_node before it's needed
      libstdc++: Access std::pair members without tuple-like helpers
      libstdc++: Replace uses of _GLIBCXX_USE_INT128 in testsuite
      libstdc++: Add missing _GLIBCXX_USE_WCHAR_T checks in testsuite
      libstdc++: Move test that depends on wchar_t I/O to wchar_t sub-directory
      libstdc++: Always define typedefs and hash functions for wide strings [PR 98725]
      libstdc++: Enable vstring for wchar_t unconditionally [PR98725]
      libstdc++: Enable type traits for wchar_t unconditionally [PR98725]
      libstdc++: Define std::wstring_convert unconditionally [PR 98725]
      libstdc++: Define deleted wchar_t overloads unconditionally [PR 98725]
      libstdc++: Remove unnecessary uses of _GLIBCXX_USE_WCHAR_T in testsuite [PR98725]
      ChangeLog: Remove incorrect PR reference
      libstdc++: Fix std::match_results::end() for failed matches [PR102667]
      libstdc++: Add valid range assertions to std::basic_regex [PR89927]
      libstdc++: Fix std::numeric_limits::lowest() test for strict modes
      libstdc++: Simplify std::basic_regex::assign
      libstdc++: Add wrapper for internal uses of std::terminate
      libstdc++: Improve diagnostics for misuses of output iterators
      libstdc++: Fix move construction of std::tuple with array elements [PR101960]
      libstdc++: Fix test that fails for C++20
      libstdc++: Ensure language linkage of std::__terminate()
      libstdc++: Fix dangling string_view in filesystem::path [PR102592]
      libstdc++: Refactor filesystem::path encoding conversions
      libstdc++: Rename files with the wrong extensions
      libstdc++: Fix regression in memory use when constructing paths
      libstdc++: Add missing constexpr to std::optional (P2231R1)
      libstdc++: Fix test for feature test macro
      libstdc++: Use more descriptive feature test macro
      libstdc++: Fix brainwrong in path::_S_convert(T) [PR102743]
      libstdc++: Make filesystem::path(path&&) always noexcept
      libstdc++: Simplify variant access functions
      libstdc++: Remove unused functions in std::variant implementation
      libstdc++: Remove try/catch overhead in std::variant::emplace
      libstdc++: Add missing constexpr to std::variant (P2231R1)
      libstdc++: Make non-propagating-cache fully constexpr [PR101263]
      libstdc++: Define std::basic_string::resize_and_overwrite for C++23 (P1072R10)
      libstdc++: Fix error in filesystem::path with Clang
      libstdc++: Fix mem-initializer in std::move_only_function [PR102825]
      libstdc++: Implement monadic operations for std::optional (P0798R8)
      libstdc++: Fix std::stack deduction guide
      libstdc++: Change std::variant union member to empty struct
      libstdc++: Fix doxygen generation to work with relative paths
      libstdc++: Implement std::random_device::entropy() for other sources
      doc: Fix typo in name of PowerPC __builtin_cpu_supports built-in
      doc: Remove broken link to old.html docs
      doc: Fix documentation around 'asm' keyword in C++
      libstdc++: Add missing test for std::optional::transform(F&&)
      libstdc++: Remove constraints from std::optional monadic ops [PR102863]
      libcody: Avoid double-free
      libstdc++: Suppress Doxygen docs for more implementation details
      libstdc++: Add Doxygen comments to contents of <functional>
      libstdc++: Improve generated man pages for libstdc++
      libstdc++: Constrain std::make_any [PR102894]
      c++tools: Fix memory leak
      libstdc++: Fix typo in std::stack test
      libstdc++: Fix range access for empty std::valarray [PR103022]
      libstdc++: Reorder constraints on std::span::span(Range&&) constructor.
      libstdc++: Missing constexpr for __gnu_debug::__valid_range etc
      libstdc++: Add some noexcept to std::valarray
      libstdc++: Fix regression in std::list::sort [PR66742]
      libstdc++: Fix handling of const types in std::variant [PR102912]
      libstdc++: Optimize std::variant traits and improve diagnostics
      libstdc++: Refactor emplace-like functions in std::variant
      libstdc++: Optimize std::tuple_element and std::tuple_size_v
      libstdc++: Consolidate duplicate metaprogramming utilities
      libstdc++: Deprecate std::unexpected and handler functions
      libstdc++: Fix pretty printing of std::unique_ptr [PR103086]
      libstdc++: Add xfail to pretty printer tests that fail in C++20
      libstdc++: Add support for POWER9 DARN instruction to std::random_device
      libstdc++: Add [[unlikely]] attributes to std::random_device routines
      libstdc++: Fix pack expansions in tuple_size_v specializations
      libstdc++: Fix inconsistent noexcept-specific for valarray begin/end
      libstdc++: Make spurious std::random_device FAIL less likely
      libstdc++: Support getentropy and arc4random in std::random_device
      libstdc++: Do not use 64-bit DARN on 32-bit powerpc [PR103146]
      libstdc++: Make test print which random_device tokens work
      libstdc++: Disable gthreads weak symbols for glibc 2.34 [PR103133]
      libstdc++: Fix test for libstdc++ not including <unistd.h> [PR100117]
      libstdc++: Remove public std::vector<bool>::data() member
      libstdc++: Make pmr::memory_resource::allocate implicitly create objects
      libstdc++: Fix debug containers for C++98 mode
      libstdc++: Implement constexpr std::vector for C++20
      libstdc++: Print assertion messages to stderr [PR59675]
      libstdc++: Implement std::spanstream for C++23
      libstdc++: Fix typos in tests
      libstdc++: Fix out-of-bound array accesses in testsuite
      libstdc++: Use hidden friends for vector<bool>::reference swap overloads
      libstdc++: Fix tests for constexpr std::string
      libstdc++: Fix std::type_info::before for ARM [PR103240]
      libstdc++: Set active member of union in std::string [PR103295]
      libstdc++: Simplify std::string constructors
      libstdc++: Use std::construct_at in net::ip::address
      libstdc++: Fix author name in ChangeLog
      libstdc++: Replace AC_CACHE_VAL with AC_CACHE_CHECK
      libstdc++: Fix std::char_traits<C>::move for constexpr
      libstdc++: Begin lifetime of chars in constexpr std::string [PR103295]
      libstdc++: Suppress -Wstringop warnings [PR103332]
      libstdc++: One more change for Clang to support constexpr std::string [PR103295]
      libstdc++: Use __is_single_threaded in locale initialization
      libstdc++: Improve tests for stringstream constructors in C++20
      libstdc++: Fix condition for definition of _GLIBCXX14_DEPRECATED
      libstdc++: Fix circular dependency for bitmap_allocator [PR103381]
      libstdc++: Add effective-target for std::allocator implementation
      libstdc++: Add another testcase for std::unique_ptr printer [PR103086]
      libstdc++: Replace hyphens in effective target keywords
      libstdc++: Add xfail to some printer tests for debug mode
      libstdc++: Do not use memset in constexpr calls to ranges::fill_n [PR101608]
      libstdc++: Make std::pointer_traits SFINAE-friendly [PR96416]
      libstdc++: Remove dg-error that no longer happens
      libstdc++: Move std::to_address tests to more appropriate place
      libstdc++: Remove redundant xfail selectors in dg-do compile tests
      libstdc++: Fix dg-do directive for tests supposed to be run
      libstdc++: Ensure dg-add-options comes after dg-options
      libstdc++: Remove workaround for FE bug in std::tuple [PR96592]
      libstdc++: Fix trivial relocation for constexpr std::vector
      libstdc++: Fix test that fails in C++20 mode
      libstdc++: Use gender-agnostic pronoun in docs
      libstdc++: Make Asan detection work for Clang [PR103453]
      libstdc++: Skip tag dispatching for _S_relocate in C++17
      libstdc++: Ensure C++20 std::stringstream definitions use correct ABI
      libstdc++: Fix fully-dynamic-string build
      libstdc++: Fix tests that fail with fully-dynamic-string
      libstdc++: Avoid unwanted allocations in filesystem::path
      libstdc++: Optimize ref-count updates in COW std::string
      libstdc++: Define std::__is_constant_evaluated() for internal use
      libstdc++: Clear RB tree after moving elements [PR103501]
      libstdc++: Restore unconditional atomic load in COW std::string
      libstdc++: Remove broken std::allocator base classes [PR103340]
      libstdc++: Allow exception classes to move fully-dynamic strings
      Fix typos in libstdc++-v3/ChangeLog
      libstdc++: Simplify emplace member functions in _Rb_tree
      libstdc++: Initialize member in std::match_results [PR103549]
      libstdc++: Fix undefined shift when _Atomic_word is 64-bit
      libstdc++: Fix non-reserved name in std::allocator base class [PR64135]
      libstdc++: Disable over-zealous warnings about std::string copies [PR103332]
      libstdc++: Do not leak empty COW strings
      libstdc++: Avoid unnecessary allocations in std::map insertions [PR92300]
      libstdc++: Allow std::condition_variable waits to be cancelled [PR103382]
      libstdc++: Implement std::ios_base::noreplace for C++23 [PR59769]
      libstdc++: Fix std::exception_ptr regressions [PR103630]
      libstdc++: Make std::make_exception_ptr work with -fno-exceptions [PR85813]
      libstdc++: Remove bogus dg-error for effective-target c++20
      libstdc++: Fix ambiguous comparisons for iterators in C++20
      libstdc++: Fix diagnostic pragma push that should be pop
      libstdc++: Fix definition of _GLIBCXX_NO_SLEEP config macro
      libstdc++: Guard mutex and condvar with gthreads macro [PR103638]
      Replace gnu::unique_ptr with std::unique_ptr
      libstdc++: Fix std::regex_replace for strings with embedded null [PR103664]
      libstdc++: Make ranges::size and ranges::empty check for unbounded arrays
      libstdc++: Add support for '?' in linker script globs
      libstdc++: Fix non-reserved name in <regex> header
      libstdc++: Simplify definition of std::regex_constants variables
      libstdc++: Simplify typedefs by using __UINTPTR_TYPE__
      libstdc++: Fix handling of invalid ranges in std::regex [PR102447]
      libstdc++: Support old and new T_FMT for en_HK locale [PR103687]
      libstdc++: Improve std::regex_error::what() strings
      libstdc++: Compare match_results for failed regex_match
      libstdc++: Reduce template instantiations in <regex>
      libstdc++: Fix example preprocessor command in FAQ [PR103877]
      libstdc++: Simplify std::allocator_traits<allocator<void>>::construct
      libstdc++: Avoid -Wzero-as-null-pointer-constant warning [PR103848]
      libstdc++: Fix comments in std::forward_list tests
      libstdc++: Add pretty printer for std::regex internals
      libstdc++: Fix std::error_code pretty printer for versioned namespace
      libstdc++: Improvements to standard error category objects (part deux)
      libstdc++: Implement P1328 "Making std::type_info::operator== constexpr"
      libstdc++: Fix overconstrained std::string constructor [PR103919]
      libstdc++: Do not use std::isdigit in <charconv> [PR103911]
      libstdc++: Increase timeout for pthread7-rope.cc test
      libstdc++: Adjust friend declarations to work with Clang
      libstdc++: Add -nostdinc++ for c++17 sources [PR100017]
      libstdc++: Update default -std option in manual
      libstdc++: Add dg-timeout-factor to some more regex tests
      libstdc++: Fix and simplify freestanding configuration [PR103866]
      libstdc++: Make std::common_iterator completely constexpr-able (LWG 3574)
      libstdc++: Make std::variant work with Clang in C++20 mode [PR103891]
      libstdc++: Optimize std::ostream inserters for single characters
      libstdc++: Install <coroutine> header for freestanding [PR103726]
      libstdc++: Make copyable-box completely constexpr (LWG 3572)
      libstdc++: Add missing noexcept to lazy_split_view iterator (LWG 3593)
      libstdc++: Install <source_location> header for freestanding [PR103726]
      libstdc++: Document new std::random_device tokens
      libstdc++: Use std::construct_at in std::common_iterator [PR103992]
      libstdc++: Ignore cv-quals when std::allocator<void> constructs
      libstdc++: Add C++20 std::make_shared enhancements (P0674R1)
      libstdc++: Add attribute to features deprecated in C++17 [PR91260]
      libstdc++: Ignore deprecated warnings [PR104037]
      libstdc++: Implement C++20 atomic<shared_ptr> and atomic<weak_ptr>
      libstdc++: Update C++20 status table
      libstdc++: Add 'typename' to dependent types in atomic<shared_ptr<T>>
      libstdc++: Rename non-reserved macros in config header [PR103650]
      libstdc++: Document final option names for enabling C++20
      libstdc++: Define <stacktrace> header for C++23
      libstdc++: Improve comments describing --enable-fully-dynamic-string
      libstdc++: Update status tables in manual
      libstdc++: Fix deduction failure for std::min call [PR104080]
      libstdc++: Use GCC's predefined macro for endianness [PR104080]
      libstdc++: Define <stdatomic.h> for C++23
      libstdc++: Fix suggested alternative to std::ptr_fun
      libstdc++: Fix ambiguous std::pair constructors [PR101124]
      libstdc++: Use __cpp_lib_concepts in std::reverse_iterator [PR104098]
      libstdc++: Limit new basic_string(nullptr_t) constructor to C++23 [PR104099]
      libstdc++: Fix std::atomic<std::shared_ptr<T>> for AIX [PR104101]
      libstdc++: Remove unused std::pair helper function
      libstdc++: Fix deprecated attribute for std::get_temporary_buffer
      libstdc++: Update documentation for C++17 deprecations
      libstdc++: Fix libbacktrace build files
      libstdc++: Include <stddef.h> for size_t and ptrdiff_t [PR104123]
      libstdc++: Remove -gdwarf-4 from flags for debug library
      libstdc++: Only add valid -L paths to testsuite linker options
      libstdc++: Use Clang attribute instead of __constinit
      libstdc++: Fix constexpr constructor for atomic<shared_ptr<T>>
      libstdc++: Fix condition for __cpp_lib_shared_ptr_arrays
      libstdc++: Ensure all feature test macros have type long [PR87193]
      libstdc++: Fix typo in comment
      libstdc++: Fix aliasing violation in std::shared_ptr [PR104019]
      libstdc++: Restore support for unordered_map<const T, ...> [PR104174]
      libstdc++: Use fast_float for long double if it uses binary64 format
      libstdc++: Fix std::spanstream move assignment [PR104032]
      libstdc++: Avoid symlink race in filesystem::remove_all [PR104161]
      libstdc++: Define _GNU_SOURCE for secure_getenv on Cygwin [PR104217]
      libstdc++: Avoid some more warnings [PR104019]
      libstdc++: Avoid overflow in ranges::advance(i, n, bound)
      libstdc++: Prevent -Wstringop-overread warning in std::deque [PR100516]
      libstdc++: Improve config output for --enable-cstdio [PR104301]
      libstdc++: Fix doxygen comment for filesystem::perms operators
      libstdc++: Reset filesystem::recursive_directory_iterator on error
      libstdc++: Add more tests for filesystem directory iterators
      libstdc++: Do not use dirent::d_type unconditionally
      libstdc++: Fix link failure in _OutputIteratorConcept
      libstdc++: Fix invalid instantiations in tests
      libstdc++: Fix -Wunused-variable warning for -fno-exceptions build
      libstdc++: Add suggestion to std::uncaught_exception() warning
      doc: Update references to "C++2a" in cpp.texi
      libstdc++: Fix filesystem::remove_all races [PR104161]
      libstdc++: Remove un-implementable noexcept from Filesystem TS operations
      libstdc++: Allow Clang to use <stdatomic.h> before C++23
      libstdc++: Fix std::filesystem build failure for Windows
      libstdc++: Fix filesystem::remove_all for Windows [PR104161]
      libstdc++: Adjust Filesystem TS test for Windows
      libstdc++: Add comment to acinclude.m4
      libstdc++: Simplify resource management in directory iterators
      libstdc++: Fix directory iterator build for newlib
      libstdc++: Add atomic_fetch_xor to <stdatomic.h>
      libstdc++: Fix test failures at -O0
      libstdc++: Fix FAIL: 20_util/temporary_buffer.cc for C++14
      libstdc++: Fix std::to_chars for IEEE128 long double
      libstdc++: Fix typo in pragma
      libstdc++: Use __cpp_concepts instead of custom macro [PR103891]
      libstdc++: Fix stream extraction of IEEE128 long double [PR100912]
      libstdc++: Add missing constexpr to uses-allocator construction utilities [PR104542]
      c-family: Remove names of unused parameters
      libstdc++: Make std::error_code printer more robust
      libstdc++: Deprecate non-standard std::vector<bool>::insert(pos) [PR104559]
      libstdc++: Fix cast in source_location::current() [PR104602]
      libstdc++: Fix -Wmaybe-uninitialized false positive [PR103984]
      libstdc++: Implement std::strong_order for floating-point types [PR96526]
      libstdc++: Fix test failure on AIX
      libstdc++: Use non-debug vector in constexpr test [PR104748]
      libstdc++: Fix -Wunused-local-typedefs warning in <compare>
      libstdc++: Ensure __glibcxx_assert_fail has default visibility
      libstdc++: Use visibility pragmas instead of attributes [PR104807]
      doc: Remove redundant sentence about modules being in C++20
      libstdc++: Remove incorrect copyright notice from header
      contrib: Fix gcc-descr script [PR102664]
      contrib: Fix non-portable sed commands in gcc-descr [PR102664/]
      contrib: Fix non-portable shell commands in gcc-git-customization.sh [PR102664]
      libstdc++: Support VAX floats in std::strong_order
      libstdc++: Fix std::strong_order to handle NaN on VAX
      libstdc++: Do not use fast_float for 16-bit size_t [PR104870]
      top-level: Fix comment about --enable-libstdcxx in configure
      libstdc++: Fix reading UTF-8 characters for 16-bit targets [PR104875]
      libstdc++: Ensure that std::from_chars is declared when supported
      libstdc++: Fix symbol versioning for Solaris 11.3 [PR103407]
      libstdc++: Fix comment in testsuite utility
      libstdc++: Rewrite __moneypunct_cache::_M_cache [PR104966]
      libstdc++: Avoid including <algorithm> in <filesystem> [PR92546]
      libstdc++: Reduce header dependencies from PSTL headers [PR92546]
      libstdc++: Simplify constraints for std::any construction [PR104242]
      testsuite: Add missing <vector> header to test
      libstdc++: Disable atomic wait for freestanding [PR105021]
      libstdc++: Fix feature test macros in <version> for freestanding
      libstdc++: Add missing constraints to std::bit_cast [PR105027]
      libstdc++: Add more doxygen comments in <bit>
      libstdc++: Define std::expected for C++23 (P0323R12)
      libstdc++: Fix typos in comments in tests
      libstdc++: Fix incorrect preprocessor conditions in <version>
      libstdc++: Workaround for missing 'using enum' in Clang 12
      testsuite: Disable tests for C++23 that depend on std::unexpected
      testsuite: Allow setting gpp_std_list in configuration files
      libstdc++: Add comment about memalign requirements
      libstdc++: Fix mismatched noexcept-specifiers in Filesystem TS
      libstdc++: Implement std::unreachable() for C++23 (P0627R6)
      libstdc++: Fix std::bad_expected_access constructor [PR105146]
      libstdc++: Fix std::expected<void, E>::swap(expected&) [PR105154]
      libstdc++: Fix constraints on std::expected<void, E> constructor [PR105153]
      libstdc++: Move Filesystem TS path definitions out of class body
      libstdc++: Move stacktrace tests to 19_diagnostics directory
      libstdc++: Improve behaviour of std::stacktrace::current
      libstdc++: Fix std::basic_stacktrace special members [PR105031]
      libstdc++: Fix incorrect branch prediction hint in std::stacktrace
      libstdc++: Reduce memory usage in std::stacktrace::current
      libstdc++: Use nothrow new in std::stacktrace
      libstdc++: Use allocator to construct std::stacktrace_entry objects
      libstdc++: shrink-to-fit in std::basic_stacktrace::current(skip, max)
      libstdc++: Prefer to use mmap instead of malloc in libbacktrace
      libstdc++: Fix missing and incorrect feature test macros [PR105269]
      libstdc++: Add new headers to <bits/stdc++.h> PCH
      libstdc++: Fix incorrect IS number in doc comment
      libstdc++: Fix syntax error in libbacktrace configuration
      libstdc++: Use LTLIBICONV when linking libstdc++.so [PR93602]
      libstdc++: Fix macro checked by test
      libstdc++: Remove bogus assertion in std::from_chars [PR105324]
      libstdc++: Add deduction guides for std::packaged_task [PR105375]
      libstdc++: Implement constexpr std::unique_ptr for C++23 (P2273R3)
      libstdc++: Define std::hash<std::filesystem::path> (LWG 3657)
      libstdc++: Add std::atomic<shared_ptr>(nullptr_t) constructor (LWG 3661)
      libstdc++: Add pretty printer for std::atomic
      doc: Remove misleading text about multilibs for IEEE long double
      libstdc++: Fix error reporting in filesystem::copy [PR99290]
      libstdc++: Update docs for release branch
      libstdc++: Add missing exports for ppc64le --with-long-double-format=ibm [PR105417]
      libstdc++: Fix deserialization for std::normal_distribution [PR105502]
      libstdc++: Fix test that fails on Solaris [PR104731]
      libstdc++: Add <syncstream> declarations to <iosfwd> [PR105284]
      libstdc++: Add <spanstream> declarations to <iosfwd> [PR105284]
      libstdc++: Fix status docs for <bit> support
      libstdc++: Add C++23 status docs
      libstdc++: Update C++23 status docs
      libstdc++: Fix hyperlink in docs
      libstdc++: Add noexcept to std::launch operators
      libstdc++: Fix typo in doxygen @headerfile command
      libstdc++: Skip tests that fail for the versioned namespace
      libstdc++: Reduce <random> test iterations for simulators
      libstdc++: Implement LWG 3683 for pmr::polymorphic_allocator
      libstdc++: Add constexpr to std::counted_iterator post-increment (LWG 3643)
      libstdc++: Fix printing of std::atomic<shared_ptr<T>> for versioned namespace
      libstdc++: Fix atomic and error_code printers for versioned namespace

Jonathan Wright (81):
      aarch64: Use RTL builtins for vq[r]dmulh[q]_n intrinsics
      aarch64: Use RTL builtins for vpaddq intrinsics
      aarch64: Use RTL builtins for [su]paddl[q] intrinsics
      aarch64: Use RTL builtins for vpadal_[su]32 intrinsics
      aarch64: Use RTL builtins for polynomial vsli[q]_n intrinsics
      aarch64: Use RTL builtins for polynomial vsri[q]_n intrinsics
      aarch64: Use RTL builtins for v[q]tbl intrinsics
      aarch64: Use RTL builtins for v[q]tbx intrinsics
      aarch64: Use RTL builtins for vcvtx intrinsics
      aarch64: Update attributes of arm_fp16.h intrinsics
      aarch64: Update attributes of arm_acle.h intrinsics
      aarch64: Remove unspecs from [su]qmovn RTL pattern
      aarch64: Use RTL builtins for vmull[_high]_p8 intrinsics
      aarch64: Use RTL builtins for FP ml[as]_n intrinsics
      aarch64: Use RTL builtins for FP ml[as] intrinsics
      aarch64: Use RTL builtins for FP ml[as][q]_lane intrinsics
      aarch64: Use RTL builtins for FP ml[as][q]_laneq intrinsics
      testsuite: aarch64: Add fusion tests for FP vml[as] intrinsics
      aarch64: Relax aarch64_<sur><addsub>hn2<mode> RTL pattern
      aarch64: Relax aarch64_<sur>q<r>shr<u>n2_n<mode> RTL pattern
      aarch64: Relax aarch64_sqxtun2<mode> RTL pattern
      aarch64: Refactor aarch64_<sur>q<r>shr<u>n_n<mode> RTL pattern
      testsuite: aarch64: Add tests for high-half narrowing instructions
      aarch64: Use an expander for quad-word vec_pack_trunc pattern
      aarch64: Use correct type attributes for RTL generating XTN(2)
      testsuite: aarch64: Add zero-high-half tests for narrowing shifts
      aarch64: Model zero-high-half semantics of XTN instruction in RTL
      aarch64: Model zero-high-half semantics of SQXTUN instruction in RTL
      aarch64: Model zero-high-half semantics of [SU]QXTN instructions
      aarch64: Model zero-high-half semantics of ADDHN/SUBHN instructions
      gcc: Add vec_select -> subreg RTL simplification
      testsuite: aarch64: Fix failing SVE tests on big endian
      aarch64: Refactor TBL/TBX RTL patterns
      aarch64: Use memcpy to copy vector tables in vqtbl[234] intrinsics
      aarch64: Use memcpy to copy vector tables in vqtbx[234] intrinsics
      aarch64: Use memcpy to copy vector tables in vtbl[34] intrinsics
      aarch64: Use memcpy to copy vector tables in vtbx4 intrinsics
      aarch64: Use memcpy to copy vector tables in vst4[q] intrinsics
      aarch64: Use memcpy to copy vector tables in vst3[q] intrinsics
      aarch64: Use memcpy to copy vector tables in vst2[q] intrinsics
      aarch64: Use memcpy to copy vector tables in vst1[q]_x4 intrinsics
      aarch64: Use memcpy to copy vector tables in vst1[q]_x3 intrinsics
      aarch64: Use memcpy to copy vector tables in vst1[q]_x2 intrinsics
      simplify-rtx: Push sign/zero-extension inside vec_duplicate
      aarch64: Don't include vec_select element in SIMD multiply cost
      aarch64: Don't include vec_select high-half in SIMD multiply cost
      aarch64: Don't include vec_select high-half in SIMD add cost
      aarch64: Don't include vec_select high-half in SIMD subtract cost
      aarch64: Use memcpy to copy structures in vst4[q]_lane intrinsics
      aarch64: Use memcpy to copy structures in vst3[q]_lane intrinsics
      aarch64: Use memcpy to copy structures in vst2[q]_lane intrinsics
      aarch64: Use memcpy to copy structures in bfloat vst* intrinsics
      testsuite: aarch64: Fix failing vector structure tests on big-endian
      testsuite: aarch64: Fix invalid SVE tests
      aarch64: Remove macros for vld2[q]_lane Neon intrinsics
      aarch64: Remove macros for vld3[q]_lane Neon intrinsics
      aarch64: Remove macros for vld4[q]_lane Neon intrinsics
      aarch64: Fix float <-> int errors in vld4[q]_lane intrinsics
      aarch64: Fix type qualifiers for qtbl1 and qtbx1 Neon builtins
      aarch64: Fix pointer parameter type in LD1 Neon intrinsics
      aarch64: Remove redundant struct type definitions in arm_neon.h
      aarch64: Move Neon vector-tuple type declaration into the compiler
      gcc/expr.c: Remove historic workaround for broken SIMD subreg
      gcc/expmed.c: Ensure vector modes are tieable before extraction
      aarch64: Add machine modes for Neon vector-tuple types
      gcc/lower_subreg.c: Prevent decomposition if modes are not tieable
      aarch64: Pass and return Neon vector-tuple types without a parallel
      aarch64: Use type-qualified builtins for unsigned MLA/MLS intrinsics
      aarch64: Use type-qualified builtins for PMUL[L] Neon intrinsics
      aarch64: Use type-qualified builtins for XTN[2] Neon intrinsics
      aarch64: Use type-qualified builtins for [R]SHRN[2] Neon intrinsics
      aarch64: Use type-qualified builtins for UADD[LW][2] Neon intrinsics
      aarch64: Use type-qualified builtins for USUB[LW][2] Neon intrinsics
      aarch64: Use type-qualified builtins for U[R]HADD Neon intrinsics
      aarch64: Use type-qualified builtins for UHSUB Neon intrinsics
      aarch64: Use type-qualified builtins for [R]ADDHN[2] Neon intrinsics
      aarch64: Use type-qualified builtins for [R]SUBHN[2] Neon intrinsics
      aarch64: Use type-qualified builtins for ADDP Neon intrinsics
      aarch64: Use type-qualified builtins for ADDV Neon intrinsics
      aarch64: Use type-qualified builtins for LD1/ST1 Neon intrinsics
      aarch64: Use type-qualified builtins for vcombine_* Neon intrinsics

Jonathan Yong (4):
      gcc.c-torture/execute: Fix tmpnam issue on Windows
      cygming-crtend.c: fix build warnings
      extend.texi: add note about reserved ctor/dtor priorities
      libgcc: Fix __gthr_i486_lock_cmp_xchg clobber for Windows

Jose E. Marchesi (3):
      dwarf2ctf: fix typo in comment
      bpf: mark/remove unused arguments and remove an unused function
      bpf: do not --enable-gcov for bpf-*-* targets

Joseph Myers (47):
      Regenerate gcc.pot.
      Update gcc .po files.
      c: C2x changes to function type compatibility
      Update gcc fr.po.
      preprocessor: Handle digit separators in #line [PR82359]
      Update gcc sv.po.
      preprocessor: Fix pp-number lexing of digit separators [PR83873, PR97604]
      preprocessor: Enable digit separators for C2X
      preprocessor: Fix cpp_avoid_paste for digit separators
      Update gcc ja.po.
      preprocessor: Support C2X #elifdef, #elifndef
      bootstrap: Include memmodel.h in btfout.c and ctfout.c before tm_p.h
      Regenerate .pot files.
      Update gcc .po files.
      Update gcc de.po.
      Update gcc fr.po.
      Update cpplib de.po
      Update gcc sv.po.
      testsuite: Use explicit -ftree-cselim in tests using -fdump-tree-cselim-details
      testsuite: Allow .sdata in more cases in gcc.dg/array-quals-1.c
      c-family: Support format checking C2X %b, %B formats
      c-family: Support DFP printf/scanf formats for C2X
      c: Fold implicit integer-to-floating conversions in static initializers with -frounding-math [PR103031]
      Update cpplib es.po
      i18n: fix exgettext handling of C++ sources
      preprocessor: Extract messages from cpp_*_at calls for translation
      Regenerate .pot files.
      Update .po files
      Update gcc de.po
      Update gcc fr.po, sv.po
      c: Revert C2x changes to function type compatibility
      Update gcc de.po, fr.po, sv.po
      Update gcc sv.po
      Update gcc sv.po
      Update gcc hr.po
      Update gcc hr.po
      Update gcc hr.po
      Regenerate gcc.pot
      Update gcc sv.po
      Update gcc .po files
      Update gcc de.po, fr.po, sv.po
      Update gcc sv.po
      Update gcc sv.po
      Update cpplib es.po
      Regenerate gcc.pot
      Update gcc .po files
      Update gcc hr.po

José Rui Faustino de Sousa (2):
      Fortran: Fix double function call with -fcheck=pointer [PR]
      Fortran: Fix some issues with pointers to character.

Julian Brown (19):
      Add 'libgomp.oacc-c-c++-common/loop-gwv-2.c'
      openacc: Add support for gang local storage allocation in shared memory [PR90115]
      amdgcn: Use unsigned types for udivsi3/umodsi3 libgcc helper args/return
      amdgcn: Mark s_mulk_i32 as clobbering SCC
      amdgcn: Add [us]mulsi3_highpart SGPR alternatives
      amdgcn: Add [us]mulsid3/muldi3 patterns
      amdgcn: Add clrsbsi2/clrsbdi2 implementation
      amdgcn: Enable support for TImode for AMD GCN
      Fortran: Re-enable 128-bit integers for AMD GCN
      Fix OpenACC "ephemeral" asynchronous host-to-device copies
      openacc: Middle-end worker-partitioning support
      amdgcn: Enable OpenACC worker partitioning for AMD GCN
      Add 'libgomp.oacc-c-c++-common/broadcast-many.c'
      openacc: Turn off worker partitioning if num_workers==1
      openacc: Shared memory layout optimisation
      openacc: Remove unnecessary barriers (gimple worker partitioning/broadcast)
      libgomp: Release device lock on cbuf error path
      Wait at end of OpenACC asynchronous kernels regions
      Test cases for references in OpenACC 'private' clauses

Justin Squirek (40):
      [Ada] Missing access-to-discriminated conversion check
      [Ada] Spurious accessibility error on call in return statement
      [Ada] Expansion in _postconditions confusing CodePeer
      [Ada] Incorrect accessibility level on actual in procedure call
      [Ada] Spurious constraint error on conversion of access types
      [Ada] Implement aspect No_Controlled_Parts
      [Ada] Spurious accessibility error on "for of" loop parameter
      [Ada] Non-static Interrupt_Priority allowed with restriction Static_Priorities
      [Ada] Mixing of positional and named entries allowed in enum rep
      [Ada] Removal of technical debt
      [Ada] INOX: prototype "when" constructs
      [Ada] Fix crash when printing error message
      [Ada] INOX: prototype alternative accessibility model
      [Ada] Return when not working for procedures
      [Ada] Spurious initialization of element iterators in "for of" loops
      [Ada] Return_when_statement not working for non identifier return values
      [Ada] Incremental patch for restriction No_Dynamic_Accessibility_Checks
      [Ada] Crash on inlined separate subprogram
      [Ada] Crash on expansion of BIP construct in -gnatf mode
      [Ada] Spurious accessibility error on allocator in generic instance
      [Ada] Spurious dynamic accessibility check on allocator
      [Ada] Removal of technical debt
      [Ada] Crash on renaming within declare expression
      [Ada] Spurious accessibility error on renamed expression
      [Ada] Crash on allocator in alternative accessibility modes
      [Ada] Spurious non-variable error on implicitly dereferenced in-mode formal
      [Ada] Incremental patch for restriction No_Dynamic_Accessibility_Checks
      [Ada] Crash on object of protected type with defaulted access component
      [Ada] Missing accessibility check when returning discriminated types
      [Ada] Crash on expansion of tagged membership test
      [Ada] Hang on compilation of unit with type extension in body
      [Ada] Invalid GPR_PROJECT_PATH_FILE confuses gnatls
      [Ada] Spurious warning when using 'Type_Key on generic formal
      [Ada] Invalid memory access on finalization of class-wide type
      [Ada] Removal of technical debt
      [Ada] Spurious error when using current instance of type
      [Ada] Cleanup and modification of unreferenced warnings
      [Ada] Task arrays trigger spurious unreferenced warnings
      [Ada] Task arrays trigger spurious unreferenced warnings
      [Ada] Include generic instance names in non-visible entity errors

Kewen Lin (69):
      rs6000: Move rs6000_vect_nonmem into target cost_data
      vect: Add costing_for_scalar parameter to init_cost hook
      rs6000: Guard density_test only for vector version
      vect: Replace hardcoded inner loop cost factor
      arm: Fix build failure by adding includes
      forwprop: Enhance vec perm fed by CTOR and CTOR/CST [PR99398]
      arc: Remove define_insn_and_split *bbit_di
      cris: Update unexpected empty split condition
      i386: Update unexpected empty split condition
      arm: Update unexpected empty split condition
      m68k: Update unexpected empty split condition
      mips: Update unexpected empty split condition
      or1k: Update unexpected empty split condition
      sparc: Update unexpected empty split condition
      sh: Update unexpected empty split condition
      predcom: Adjust some unnecessary update_ssa calls
      predcom: Enabled by loop vect at O2 [PR100794]
      rs6000: Support more short/char to float conversion
      rs6000: Fix typos in float128 ISA3.1 support
      predcom: Refactor more by encapsulating global states
      ira: Support more matching constraint forms with param [PR100328]
      i386: Disable param ira-consider-dup-in-all-alts [PR100328]
      test/rs6000: Add cases to cover vector multiply
      test/rs6000: Add case to cover vector division
      rs6000: Support [u]mod<mode>3 for vector modulo insns
      vect: Recog mul_highpart pattern [PR100696]
      rs6000: Support [u]mul<mode>3_highpart for vector
      predcom: Refactor more using auto_vec
      vect: Fix wrong check in vect_recog_mulhs_pattern [PR101596]
      Use range-based for loops for traversing loops
      tree-cfg: Fix typos on dloop in move_sese_region_to_fn
      cfgloop: Make loops_list support an optional loop_p root
      vect: Add extraction cost for slp reduc
      rs6000: Add vec_unpacku_{hi,lo}_v4si
      rs6000: Add missing unsigned info for some P10 bifs
      rs6000: Make some BIFs vectorized on P10
      rs6000: Remove typedef for struct rs6000_cost_data
      rs6000: Add load density heuristic
      rs6000: Remove useless toc-fusion option
      ipa-fnsummary: Remove inconsistent bp_pack_value
      rs6000: Parameterize some const values for density test
      testsuite: Add missing comment for some dg-warning
      rs6000/test: Adjust test cases due to O2 vect [PR102658]
      vect: Don't update inits for simd_lane_access DRs [PR102789]
      forwprop: Remove incorrect assertion [PR102897]
      rs6000: Fix ICE of vect cost related to V1TI [PR102767]
      rs6000/doc: Rename future cpu with power10
      visium: Fix non-robust split condition in define_insn_and_split
      i386: Fix non-robust split condition in define_insn_and_split
      xtensa: Fix non-robust split condition in define_insn_and_split
      rs6000/test: Add emulated gather test case
      visium: Revert commit r12-5332
      rs6000: Modify the way for extra penalized cost
      rs6000: Remove builtin mask check from builtin_decl [PR102347]
      pragma: Update target option node when optimization changes [PR103515]
      ipa-inline: Add target info into fn summary [PR102059]
      rs6000: Remove useless code related to -mno-power10
      vect: Check partial vector param for supports_partial_vectors [PR104015]
      rs6000: Use known constant for GET_MODE_NUNITS and similar
      testsuite: Adjust possibly fragile slp-perm-9.c [PR104015]
      rs6000: Fix an assertion in update_target_cost_per_stmt [PR103702]
      rs6000: Disable MMA if no VSX support [PR103627]
      rs6000: Move the hunk affecting VSX/ALTIVEC ahead [PR103627]
      rs6000: Skip overload instances with NULL fntype [PR104967]
      rs6000: Support UN[GL][ET] in rs6000_maybe_emit_maxc_minc [PR105002]
      rs6000/test: Adjust p9-vec-length-{full,epil}-7.c [PR103196]
      testsuite: Skip pr105250.c for powerpc and s390 [PR105266]
      rs6000: Move V2DI vec_neg under power8-vector [PR105271]
      testsuite: Add test case for pack/unpack bifs at soft-float [PR105334]

Kito Cheng (27):
      testuite: Check pthread for omp module testing
      RISC-V: Pass -mno-relax to assembler
      testuite: Add pthread check to dg-module-cmi for omp module testing
      docs: Add 'S' to Machine Constraints for RISC-V
      RISC-V: Detect python and pick best one for calling multilib-generator
      Revert "RISC-V: Detect python and pick best one for calling multilib-generator"
      RISC-V: Allow multi-lib build with different code model
      [PR/target 100316] Allow constant address for __builtin___clear_cache.
      RISC-V: Minimal support of bitmanip extension
      RISC-V: Cost model for zba extension.
      RISC-V: Cost model for zbb extension.
      RISC-V: Cost model for ZBS extension.
      RISC-V: Handle zi* extension correctly for arch-canonicalize script
      RISC-V: Fix wrong predicator for zero_extendsidi2_internal pattern
      [PR/target 102957] Allow Z*-ext extension with only 2 char.
      RISC-V: Fix wrong zifencei handling in riscv_subset_list::to_string
      RISC-V: Allow extension name contain digit
      RISC-V: Minimal support of vector extensions
      RISC-V: Do not emit zcisr and zifencei if i-ext is 2.0
      RISC-V: Fix testcase after bump isa spec version
      RISC-V: Always pass -misa-spec to assembler [PR104219]
      RISC-V: Fix detection of zifencei support for binutils
      RISC-V: Add version info for zk, zkn and zks
      RISC-V: Implement misc macro for vector extensions.
      RISC-V: Sync arch-canonicalize and riscv-common.cc
      RISC-V: Support -misa-spec for arch-canonicalize and multilib-generator. [PR104853]
      RISC-V: Fix wrong expansion for arch-canonicalize

Kwok Cheung Yeung (8):
      openmp: Notify team barrier of pending tasks in omp_fulfill_event
      openmp, fortran: Add support for OpenMP declare variant directive in Fortran
      openmp: Mark declare variant directive in documentation as supported in Fortran
      openmp: Add additional tests for declare variant in Fortran
      Fix c-c++-common/goacc/routine-4.c and c-c++-common/goacc/routine-4-extern.c testcases
      [OpenACC] Allow gang reductions inside serial constructs
      amdgcn: Tune default OpenMP/OpenACC GPU utilization
      openmp, fortran: Check that the type of an event handle in a detach clause is suitable [PR104131]

Kyrylo Tkachov (14):
      aarch64: Handle V4BF V8BF modes in vwcore attribute
      aarch64: Merge sqdmlal2 and sqdmlsl2 expanders
      aarch64: Make sqdmlal2 patterns match canonical RTL
      aarch64: Add attributes for builtins specified in aarch64-builtins.c
      aarch64: Add smov alternative to sign_extend pattern
      aarch64: PR target/102252 Invalid addressing mode for SVE load predicate
      aarch64: Add command-line support for Armv8.7-a
      aarch64: Improve size optimisation heuristic for setmem expansion
      aarch64: Improve size heuristic for cpymem expansion
      aarch64: Fix cpymem-size.c test for ILP32
      aarch64: Add support for Armv8.8-a memory operations and memcpy expansion
      aarch64: Add memmove expansion for +mops
      aarch64: Use +mops to inline memset operations
      aarch64: Add command-line support for Armv8.8-a

Lancelot SIX (1):
      libiberty: support digits in cpp mangled clone names

LevyHsu (1):
      RISC-V: Add patterns for builtin overflow.

Lewis Hyatt (1):
      diagnostics: Support for -finput-charset [PR93067]

LiaoShihua (3):
      RISC-V: fixed testcase riscv/pr103302.c
      RISC-V: Update testcases info with new implement info
      RISC-V: Handle combine extension in canonical ordering.

Liu, Hongtao (1):
      AVX512FP16: Add vaddsh/vsubsh/vmulsh/vdivsh.

Luc Michel (1):
      libstdc++: Fix testsuite for skipping gdb tests on remote/non-native target

Lucas A. M. Magalhaes (1):
      rs6000: Remove LINK_OS_EXTRA_SPEC{32,64} from --with-advance-toolchain

Lulu Cheng (2):
      LoongArch: Add '(clobber (mem:BLK (scratch)))' to PLV instruction templates.
      LoongArch: Add fdiv define_expand template.

Luís Ferreira (7):
      libiberty: prevent buffer overflow when decoding user input
      libiberty: prevent null dereferencing on dlang_type
      libiberty: testsuite: add missing format on d-demangle-expected
      libiberty: d-demangle: remove parenthesis where it is not needed
      libiberty: d-demangle: add test cases for simple special mangles
      libiberty: d-demangle: Add test case for function literals
      d-demangle: properly skip anonymous symbols

Maciej W. Rozycki (17):
      ifcvt: Fall through to NCE if getting the CE condition failed
      VAX: Remove dead `adjacent_operands_p' function
      VAX: Fix ill-formed `jbb<ccss>i<mode>' insn operands
      VAX: Accept ASHIFT in address expressions
      MAINTAINERS: Add myself as a VAX port maintainer
      RISC-V: Fix build errors with shNadd/shNadd.uw patterns in zba cost model
      RISC-V: Fix register class subset checks for CLASS_MAX_NREGS
      MAINTAINERS: Clarify the policy WRT the Write After Approval list
      VAX: Add the `setmemhi' instruction
      VAX: Implement the `-mlra' command-line option
      PR middle-end/103059: reload: Also accept ASHIFT with indexed addressing
      RISC-V: Fix use-after-free error in `parse_multiletter_ext'
      RISC-V: Document `auipc' and `bitmanip' `type' attributes
      RISC-V: Add target machine headers as a dependency for riscv-sr.o
      doc: RISC-V: Document the `-misa-spec=' option
      RISC-V/testsuite: Run target testing over all the usual optimization levels
      [Ada] PR ada/98724: Alpha/Linux/libada: Use wraplf for Aux_Long_Long_Float

Maged Michael (1):
      libstdc++: Skip atomic instructions in shared_ptr when both counts are 1

Manfred Schwarb (2):
      fortran: Silence conversion warnings for MIN1 and MAX1
      testsuite: Silence conversion warnings for MIN1 and MAX1

Marc Nieper-Wißkirchen (1):
      gcc: pass-manager: Fix memory leak. [PR jit/63854]

Marc Poulhiès (10):
      [Ada] Do not clear Analyzed flag in expand if already set by preanalysis
      [Ada] Fix type conversion handling in validity checks
      [Ada] Use bracket aggregates in Ada2022
      [Ada] Fix obsolete array aggregate warning being triggered by expanded code
      [Ada] Remove obsolete a-assert
      MAINTAINERS: Add myself to write after approval
      [Ada] Remove Compiler_Unit[_Warning] pragmas
      [Ada] Remove obsolete s-sopco* and s-strops units
      testsuite: fixup pr97521.c and pr96713.c on i686-*
      testsuite: Check fpic support in pr103275.c

Marcel Vollweiler (11):
      OpenMP: Add support for 'close' in map clause
      MAINTAINERS: Add myself for write after approval
      Fortran/OpenMP: Add support for 'close' in map clause
      gcc/configure.ac: fix register issue for global_load assembler functions
      Add support for device-modifiers for 'omp target device'.
      Add support for device-modifiers for 'omp target device'.
      C, C++, Fortran, OpenMP: Add support for 'flush seq_cst' construct.
      libgomp: Add tests for omp_atv_serialized and deprecate omp_atv_sequential.
      libgomp, OpenMP: Fix issue for omp_get_device_num on gcn targets.
      C, C++, Fortran, OpenMP: Add 'has_device_addr' clause to 'target' construct.
      OpenMP, Fortran: Bugfix for omp_set_num_teams.

Marek Polacek (83):
      c++: Don't allow defining types in enum-base [PR96380]
      c++: Prevent bogus -Wtype-limits warning with NTTP [PR100161]
      c++: Add testcase for already fixed PR [PR94102]
      c++: Remove GCC12 FIXME for DR1312
      c++: Fix ICE with invalid requires-expression [PR100055]
      c++: Disable -Wint-in-bool-context in instantiations
      c++: Check attributes on friend declarations [PR99032]
      c++: Prune dead functions.
      c++: Relax attribute on friend declaration checking [PR100596]
      c++: explicit() ignored on deduction guide [PR100065]
      c++: Extend std::is_constant_evaluated in if warning [PR100995]
      c++: Failure to delay noexcept parsing with ptr-operator [PR100752]
      c++: DR2397 - auto specifier for * and & to arrays [PR100975]
      c++: Fix noexcept with unevaluated operand [PR101087]
      c++: constexpr array reference and value-initialization [PR101371]
      c++: Don't hide narrowing errors in system headers
      c++: Add test for DR 2126
      include: Fix -Wundef warnings in ansidecl.h
      c++: Reject ordered comparison of null pointers [PR99701]
      c++: Add test for fixed PR [PR101592]
      c-family: Implement -Warray-compare [PR97573]
      c++: P2360R0: Extend init-stmt to allow alias-decl [PR102617]
      testsuite: Fix g++.dg/opt/pr102970.C
      ipa: Fix typo in ipa-modref.c
      c++: Skip unnamed bit-fields more
      attribs: Implement -Wno-attributes=vendor::attr [PR101940]
      libcpp: Implement -Wbidi-chars for CVE-2021-42574 [PR103026]
      c++: Implement C++23 P0849R8 - auto(x) [PR103049]
      c++: Implement -Wuninitialized for mem-initializers (redux) [PR19808]
      c++: Fix cpp0x/lambda/lambda-nested9.C with C++11
      libcpp: Use [[likely]] conditionally
      c++: Add static in g++.dg/warn/Waddress-5.C
      c++: -Wuninitialized for mem-inits and empty classes [PR19808]
      c++: Fix missing NSDMI diagnostic in C++98 [PR103347]
      c++: ICE with unnamed tparm and concept [PR103408]
      c++: Fix bogus error with __integer_pack [PR94490]
      c++: Fix for decltype(auto) and parenthesized expr [PR103403]
      c++: Add fixed test [PR93614]
      c++: Fix for decltype and bit-fields [PR95009]
      c++: Fix decltype-bitfield1.C on i?86
      c++: Handle auto(x) in parameter-declaration-clause [PR103401]
      c++: Add test for C++23 auto(x)
      c++: Allow constexpr decltype(auto) [PR102229]
      c++: delayed noexcept in member function template [PR99980]
      c++: Improve diagnostic for class tmpl/class redecl [PR103749]
      attribs: Fix wrong error with -Wno-attribute=A::b [PR103649]
      c++: Avoid narrowing in make_char_string_pack
      c-family: Have -Wformat-diag accept "decl-specifier" [PR103758]
      Avoid more -Wformat-diag warnings [PR103758]
      c++: Add test for fixed PR [PR102338]
      c++: ICE with noexcept and canonical types [PR101715]
      preprocessor: -Wbidi-chars and UCNs [PR104030]
      warn-access: Prevent -Wuse-after-free on ARM [PR104213]
      c++: new-expr of array of deduced class tmpl [PR101988]
      doc: Update -Wbidi-chars documentation
      c++: Reject union std::initializer_list [PR102434]
      c++: ICE with auto[] and VLA [PR102414]
      c++: Add fixed test [PR70077]
      c++: Add new test [PR79493]
      c++: ICE with attribute on enumerator [PR104667]
      c++: Lost deprecated/unavailable attr in class tmpl [PR104682]
      rtl: ICE with thread_local and inline asm  [PR104777]
      c++: Attribute deprecated/unavailable divergence
      c++: Wrong error with alias template in class tmpl [PR104108]
      c++: ICE with operator delete [PR104846]
      c++: Don't allow type-constraint auto(x) [PR104752]
      c++: ->template and implicit typedef [PR104608]
      c++: alias template and empty parameter packs [PR104008]
      c: -Wmissing-field-initializers and designated inits [PR82283, PR84685]
      c++: FIX_TRUNC_EXPR in tsubst [PR102990]
      c++: ICE with template code in constexpr [PR104284]
      c++: alignas and alignof void [PR104944]
      gimple: Wrong -Wimplicit-fallthrough with if(1) [PR103597]
      c++: ICE with aggregate assignment and DMI [PR104583]
      c-family: ICE with -Wconversion and A ?: B [PR101030]
      c++: ambiguous call not diagnosed after DR2352 [PR97296]
      c++: wrong error with variadic concept [PR105268]
      c++: wrong error with constexpr COMPOUND_EXPR [PR105321]
      c++: Remove unused parameter
      c++: __builtin_shufflevector with value-dep expr [PR105353]
      c++: enum in generic lambda at global scope [PR105398]
      c++: global-namespace-qualified var after class def [PR90107]
      c++: Fix ICE with -Wmismatched-tags [PR105725]

Marius Hillenbrand (3):
      IBM Z: Fix error checking for builtin vec_permi
      IBM Z: Avoid bash-specific substitution in configure
      IBM Z: Fix vector intrinsics vec_double and vec_floate

Mark Wielaard (1):
      libiberty rust-demangle, ignore .suffix

Martin Jambor (43):
      ipa-sra: Release dead LHS SSA_NAME when removing it (PR 99951)
      ipa-sra: Do not bail out when callers cannot be cloned
      ipa: Get rid of IPA_NODE_REF and IPA_EDGE_REF
      tree-sra: Avoid refreshing into const base decls (PR 100453)
      Revert "tree-sra: Avoid refreshing into const base decls (PR 100453)"
      tree-sra: Do not refresh readonly decls (PR 100453)
      tree-inline: Fix TREE_READONLY of parameter replacements
      ipa-sra: Restructure how cloning and call redirection communicate (PR 93385)
      ipa-sra: Introduce a mini-DCE to tree-inline.c (PR 93385)
      ipa-sra: Fix thinko when overriding safe_to_import_accesses (PR 101066)
      Change the type of return value of profile_count::value to uint64_t
      ipa: Adjust references to identify read-only globals
      ipa: Fix testsuite/gcc.dg/ipa/remref-6.c
      cgraph: Do not warn about caller count mismatches of removed functions
      ipa: Fix ICE when speculating calls from inlined functions (PR 102388)
      ipa-cp: Propagation boost for recursion generated values
      Add forgotten documentation of param ipa-cp-recursive-freq-factor
      sra: Fix corner case of total scalarization with virtual inheritance (PR 102505)
      sra: Fix the fix for PR 102505 (PR 102886)
      ipa-cp: Fix updating of profile counts and self-gen value evaluation
      ipa-cp: Select saner profile count to base heuristics on
      ipa-cp: Use profile counters (or not) based on local availability
      ipa-sra: Improve debug info for removed parameters (PR 93385)
      ipa: Do not require RECORD_TYPE for ancestor jump functions
      ipa: Unshare expresseions before putting them into debug statements (PR 103099, PR 103107)
      ipa: Fix segfault when remapping debug_binds with expressions (PR 103132)
      Introduce build_debug_expr_decl
      Fortran: Use build_debug_expr_decl to create DEBUG_DECL_EXPRs
      ipa-sra: Testcase that removing a "returns_nonnull" retval works
      Replace more DEBUG_EXPR_DECL creations with build_debug_expr_decl
      options: Make -Ofast switch off -fsemantic-interposition
      ipa: Teach IPA-CP transformation about IPA-SRA modifications (PR 103227)
      ipa: Fix CFG fix-up in IPA-CP transform phase (PR 103441)
      ipa-param-manip: Be careful about a reallocating hash_map
      ipa-sra: Check also ECF_LOOPING_CONST_OR_PURE when evaluating calls
      params: Remove repeated word "that" in parameter description
      ipa-cp: Avoid adjusting references through self-recursion (PR 104813)
      ipa: Create LOAD references when necessary during inlining (PR 103171)
      ipa-cp: Do not create clones for values outside known value range (PR 102513)
      ipa: Careful processing ANCESTOR jump functions and NULL pointers (PR 103083)
      testsuite: Increase auto-inlining param in gcc.dg/ipa/remref-7.c (PR 105183)
      ipa: Release body of clone_of when removing its last clone (PR 100413)
      ipa: Check cst type when propagating controled uses info

Martin Liska (343):
      Document ranger-logical-depth in invoke.texi
      Bump version to 12.
      Fix typo in param description.
      Test simlified call in cgraph_node::analyze().
      Support LABEL_DECL in %qD directive.
      Use flags in dump_decl.
      Revert "Use flags in dump_decl."
      Remove DEF_ENUM from stringop.def.
      Generate PTA features from a def file.
      Overhaul in isa_flags and handling it.
      Remove TARGET_foo (ix86_tune == PROCESSOR_foo) macros.
      Fix clang warnings.
      Use std::thread::hardware_concurrency in lto-wrapper.c.
      Fix clang warning (-Wstring-plus-int)
      LTO: fallback to -flto=N if -flto=jobserver does not work.
      Call toplev::finalize in CHECKING_P mode.
      Revert "Use std::thread::hardware_concurrency in lto-wrapper.c."
      Fix various typos.
      c++: Use STATIC_ASSERT for OVL_OP_MAX.
      Remove not feasible FIXME
      Use genversion to generate version.h.
      Remove __cplusplus >= 201103
      c++: remove redundand NULL check.
      gcc-changelog: Remove components that will be removed.
      Come up with startswith function.
      LTO plugin: use startswith function.
      Fix genversion linker error.
      gcc_update: fix check for local source tree.
      Revert "gcc-changelog: Remove components that will be removed."
      gcc-changelog: remove newlines in git_email.py --help
      Fix missing version_string in Ada
      gcc-changelog: Accept ref_name argument in GitCommit.
      gcc-changelog: Remove non-strict mode.
      Remove BRIG front-end.
      Remove libhsail-rt.
      Remove dead components from MAINTAINERS.
      gcc-changelog: respect branch in git_update_version.py.
      ada: do not use binary mode in conf.py
      Remove version.h from object files
      lto-wrapper: Use vec<cl_decoded_option> data type.
      Print warning diagnostics for -flto issues.
      LTO: merge -flto=arg from object files.
      lto-wrapper: silent warnings in tests
      testsuite: prune new LTO warning
      libsanitizer: merge from master
      libsanitizer: Apply local patches.
      libsanitizer: update LOCAL_PATCHES.
      mklog: Put detected PR entries before ChangeLogs
      Remove unused variable.
      attributes: target_clone expects a string argument
      gcc-changelog: detect Co-Authored-By before ChangeLog entries
      Port gnat-style to Sphinx.
      opts: add Warning keyword for 2 options
      download_prerequisites: update MPFR version to recommended
      Fix my name in ChangeLog files.
      LTO: merge -flto=foo both from IL and linker cmdline
      Docs: add 2 missing dots.
      genversion should depend on DATESTAMP
      Use startswith in targets.
      startswith: Fix offloading targets.
      Fix typos.
      Revert "PR98301 Add missing changelog entries."
      Revert "Add ChangeLogs for the previous commit."
      gcc-changelog: Add note about ChangeLog entries
      Fix sphinx-build warning.
      Add no_sanitize_coverage attribute.
      Improve global state for options.
      Remove install-old.texi
      docs: port old-intall.texi part to install.texi
      DOC: update documentation of __gcov_{dump,reset}
      DOC: Update __gcov_dump documentation.
      LTO: stream properly FUNCTION_DECL_DECL_TYPE.
      docs: Mention that -fgcse-after-reload is enabled with -O3.
      Fix sanity checking of global_options.
      icf: Fix memory leak of a vector.
      Simplify option handling for -fsanitize-coverage
      docs: remove extra character.
      genhooks: remove dead code
      docs: Add missing @headitem for tables.
      Reformat target.def for better parsing.
      Fix "tailing" typo.
      docs: document evrp-sparse-threshold param
      Improve JSON examples.
      docs: add missing @headitem in Intrinsic Procedures
      gcc-changelog: Ignore one more commit.
      Add missing ChangeLog entry.
      Introduce -Wcoverage-invalid-line-number
      evrp: fix AddressSanitizer: alloc-dealloc-mismatch
      docs: remove extra '+' character in option listing.
      docs: add missing newline
      docs: Fix -Wno-cpp note
      gcov: update documentation entry about string format
      docs: Use -O1 as a canonical value for -O option
      gcov: update comment about padding
      autofdo: Bump AUTO_PROFILE_VERSION.
      contrib: fix a flake8 issue
      contrib: add git-commit-mklog wrapper
      arm: Revert partially ebd5e86c0f41dc1d692f9b2b68a510b1f6835a3e
      v850: add v850_can_inline_p target hook
      v850: silent 2 warnings
      mklog: Handle correctly long lines.
      offloading: fix -foffload hinting
      gcc-changelog: ignore one more commit
      ChangeLog: add problematic commit 2e96b5f14e4025691b57d2301d71aa6092ed44bc.
      docs: document threader-mode param
      rs6000: Fix restored rs6000_long_double_type_size
      mklog: support '-b c/101343' format.
      opts: do not repeat a string in errors
      ipa: do not make localaliases for target_clones [PR101261]
      ipa: "naked" attribute implies "noipa" attribute
      ipa: ICF should check SSA_NAME_IS_DEFAULT_DEF
      ipa: make target_clone default decl local [PR101726]
      Speed up jump table switch detection.
      commit-mklog: Add --co argument.
      gcov: fix output location for JSON mode.
      ipa: add debug counter for IPA MODREF PTA
      docs: Fix -mpic-data-is-text-relative option placement.
      Use non-numbered clones for target_clones.
      mklog: fix renaming with version 0.7.0.
      graph output: use better colors for edges
      inline: do not einline when no_profile_instrument_function is different
      c++: fix -fsanitize-coverage=trace-pc ICE [PR101331]
      i386: support micro-levels in target{,_clone} attrs [PR101696]
      testsuite: fix failing pytest tests
      gcc-changelog: check git commit email address
      gcc-changelog: Add FIXME note.
      rs6000: fix symtab_node::get == NULL issue
      i386: port vxworks to TARGET_CPU_P macro
      mips: Fix macro typo
      flag_complex_method: support optimize attribute
      Come up with section_flag enum.
      Do not hide asm_out_file in ASM_OUTPUT_ASCII.
      testsuite: Skip a test-case when LTO is used [PR102509]
      Append target/optimize attr to the current cmdline.
      options: fix concat of options.
      options: fix ASAN issue during saving of opt. options
      contrib: filter out mmx.md file.
      options: check for CL_OPTIMIZATION only for cl_options.
      build: Fix --enable-gather-detailed-mem-stats
      Come up with OPTION_SET_P macro.
      opts: include missing header files.
      options: use cl_optimization_hash.
      Remove usage of IRA_REGION_AUTODETECT
      opts: Remove AUTODETECT_VALUE usage.
      Fix handling of flag_rename_registers by a target.
      gcov: make profile merging smarter
      Eliminate AUTODETECT_VALUE usage in options.
      Remove unused but set variables.
      gcc-changelog: update error message location
      gcov: return proper exit code when error happens
      target: support spaces in target attribute.
      target: Support whitespaces in target attr/pragma.
      Make file utf8 valid input.
      Rename asm_out_file function arguments.
      Revert "target: Support whitespaces in target attr/pragma."
      Revert "target: support spaces in target attribute."
      options: Fix variable tracking option processing.
      Handle jobserver file descriptors in btest.
      libcody: add mostlyclean Makefile target
      Fix test-suite pattern scanning.
      Fix negative integer range for UInteger.
      Add TSVC tests.
      Fix flake8 errors.
      Rename predicate class to ipa_predicate
      gcov: Remove dead variable.
      Disable warning for an ASAN test-case.
      libsanitizer: merge from master (c86b4503a94c277534ce4b9a5c015a6ac151b98a).
      lisanitizer: Apply autoreconf.
      libsanitizer: update LOCAL_PATCHES
      Add -v option for git_check_commit.py.
      Reset when -gtoggle is used in gcc_options.
      gcov-profile: Filter test only for some targets [PR102945]
      libsanitizer: merge from master (78d3e0a4f1406b17cdecc77540e09210670fe9a9).
      libsanitizer: update LOCAL_PATCHES.
      Dump static chain for cgraph_node.
      gcov-profile: Fix -fcompare-debug with -fprofile-generate [PR100520]
      Fix static chain dump.
      Fix clang -Wcast-qual warning.
      Define m_rtx_reuse_manager only if not GENERATOR_FILE.
      Remove dead Fortran function.
      lto-wrapper: fix memory corruption.
      Remove unused function.
      libbacktrace: fix UBSAN issues
      testsuite: Filter out TSVC test on Power [PR103051]
      tsan: remove not needed -ldl in options
      Remove MAY_HAVE_DEBUG_MARKER_STMTS and MAY_HAVE_DEBUG_BIND_STMTS.
      IPA: use cgraph_node instance
      IPA: fix reproducibility in IPA MOD REF
      Fix IPA modref ubsan.
      Revert "Remove MAY_HAVE_DEBUG_MARKER_STMTS and MAY_HAVE_DEBUG_BIND_STMTS."
      docs: remove duplicate param documentation
      contrib: Support itemx in check-params-in-docs.py.
      contrib: filter out -Wc++20-extensions
      docs: Remove 2 more duplicite param descriptions.
      jit: Initialize function::m_blocks in ctor
      docs: Add missing @option keyword.
      d: fix ASAN in option processing
      d: fix thinko in optimize attr parsing
      Change if-to-switch-conversion test.
      Implement -fprofile-prefix-map.
      rs6000: Fix up flag_shrink_wrap handling in presence of -mrop-protect [PR101324]
      contrib: Filter out -Wreturn-type in fold-const-call.c.
      Fix --help -Q output
      Use -fopt-info in unswitch pass.
      D: fix UBSAN
      param: Add missing . in description.
      docs: add missing @item for the first item
      inline: fix ICE with -fprofile-generate
      testsuite: fix ASAN errors
      i386: Fix emissing of __builtin_cpu_supports.
      c++: Fix warning word splitting [PR103713]
      docs: add missing leading dash for option.
      pragma: respect pragma in lambda functions
      opts: do not do sanity check when an error is seen
      Revert "Fixed typo"
      Sync config.sub: 2021-10-27
      docs: Fix spelling issues in -fipa-strict-aliasing.
      docs: fix option name reference
      opts: Support -Oz in -Ox option hints.
      jit: Fix -Wodr warning
      config.sub: change mode to 755.
      docs: Unify instruct set name.
      docs: use ';' for function declarations.
      docs: docs: use ';' for function declarations. (part 2)
      docs: docs: use ';' for function declarations. (part 3)
      docs: replace http:// with https://
      driver: Improve option diagnostics [PR103465]
      docs: Use https in manual.
      Support ld.mold linker.
      docs: Add missing dash for argument.
      docs: Use ; for function declarations.
      testsuite: fix vect.exp ASAN errors
      testsuite: fix ASAN errors in i386.exp tests
      Partially sort MAINTAINERS.
      Check sorting of MAINTAINERS.
      Sort 2 names in ChangeLog.
      check-MAINTAINERS.py: use sys.argv[1]
      opts: do not do sanity check when an error is seen
      Include elfos.h before ${tm_file}.
      Fix -Wformat-diag for aarch64 target.
      epiphany: fir -Wformat-diag.
      epiphany: fix -Wimplicit-fallthrough warnings in epiphany.c.
      Simplify git-backport.py script.
      Fix -Wformat-diag for ARM target.
      ARM: fix -Wformat= error
      testsuite: Remove executable mode from source files.
      testsuite: rename files in c-c++-common.
      testsuite: rename 2 files.
      testsuite: fix dh-warning typo.
      configure: Regenerate.
      Fix test warnings.
      Start using check-MAINTAINERS.py instead of legacy maintainers-verify.sh.
      Add check_effective_target_pytest3.
      Rename test-cases that are not executed.
      Make the tests working.
      Rename .c files to .cc files.
      Change references of .c files to .cc files
      Manual changes for .cc renaming.
      git-backport: support renamed .cc files in commit message.
      Update check_effective_target_recent_python3
      Fix options.exp.
      Revert Ada .cc renaming renaming.
      Ada: Revert filename changes in comments.
      Add check_effective_target_python3_module.
      Fix -Wformat-diag for rs6000 target (part 1).
      Fix -Wformat-diag for s390x target.
      Fix -Wformat-diag for s390x-ibm-tpf.
      riscv: fix -Wformat-diag errors.
      nvptx: fix -Wformat-diag warnings
      nds32: fix -Wformat-diag warning.
      v850: fix -Wformat-diag warnings.
      rs6000: fix last -Wformat-diag
      xtensa: fix -Wformat-diag warnings.
      vms: fix -Wformat-diag warnings.
      Fix -Wformat-diag in various targets.
      testsuite: fix pytest detection unsupported message.
      nvptx: update fix for -Wformat-diag
      Come up with git-fix-changelog.py script.
      Update on riscv -Wformat-diag string.
      Enable -Werror=format-diag during bootstrap.
      testsuite: Rename a few C++ to .C or .cc.
      check_GNU_style_lib: skip .py files (one should use flake8).
      Fix -Werror=format-diag with RTL checking
      Fix Werror=format-diag with --disable-nls.
      MAINTAINERS: adjust requested email address
      Enable configure detection of ld.mold.
      contrib: filter out one more Clang warning.
      acinclude.m4: Remove duplicite AC_DEFUN.
      gcc-changelog: Be stricter for top-level dir.
      IPA mod-ref: fix usage of --param names in dump messages.
      analyzer: fix -Wformat warnings on i686
      Improve wording for -freport-bug option.
      libstdc++: fix typo in acinclude.m4.
      contrib: Put gcc-descr and gcc-undescr to file.
      git-undescr.sh: Support full output of git-descr.sh.
      internal_error - do not use leading capital letter
      Remove extra newline in ICE report.
      Add mold detection for libs.
      d: Fix -Werror=format-diag error.
      contrib: update analyze_brprob_* scripts.
      docs: remove --disable-stage1-checking from requirements
      Remove dead macro: TEXT_SECTION_NAME
      lto: fix error handling for -Wl,-plugin-opt=debug
      s390x: Fix one more -Wformat-diag.
      Fix wording for: attribute ‘-xyz’ argument ‘target’ is unknown
      Speed up fixincludes.
      fixincludes: Update pwd.
      Fix clang warning in pt.cc
      testsuite: Fix ASAN error [PR104687]
      Fix error recovery in toplev::finalize.
      docs: Document more .gcda file name generation.
      ipa: Improve error handling for target_clone single value
      lto-plugin: update comments - remove hardwired gold
      configure: enable plugin support for ld.mold
      configure: use linker plug-in by default for ld.mold
      rx: Fix translation string.
      Fix translation strings.
      translation: small fixes
      translation: reuse string and use switch for codes
      arm: fix option quoting in error messages.
      MSP430: fix error message.
      arm: add missing space to error.
      opts: fix -gtoggle + optimize attribute
      docs: Document min-pagesize parameter.
      aarch64: update error message format.
      i386: update error message format.
      rs6000: update error message format.
      v850: fix typo in pragma name
      rs6000: wrap const in an error message.
      nvptx: fix wrapping in an error message.
      rs6000: Adjust error messages.
      gcc-changelog: Make This reverts stricter.
      gcc-changelog: Update revert_regex.
      gcc-changelog: ignore one more revision
      Add ChangeLog entries for 86d8e0c0652ef5236a460b75c25e4f7093cc0651.
      docs: Document new param x86-stlf-window-ninsns.
      --target-help: align with --help=target
      Support --compress-debug-sections for ld.mold.
      contrib: filter out a new Clang warning
      contrib: filter out a new Clang warning
      lto: use diagnostics_context in print_lto_docs_link
      libgcov: use proper type for n_functions
      docs: document --with-zstd

Martin Sebor (136):
      Remove malformed dg-warning directives.
      Move pass free_lang_data to its own file.
      PR middle-end/100250 - ICE related to -Wmaybe-uninitialized
      Adjust strings in dg-warning directives (PR testsuite/100412).
      Adjust strings in dg-warning directives (PR testsuite/100412).
      PR middle-end/100307 - spurious -Wplacement-new with negative pointer offset
      PR middle-end/100325 - missing warning with -O0 on sprintf overflow with pointer plus offset
      Avoid -Walloca-larger-than and -Wvla-larger-than false postives and negatives.
      Replace unreachable code with an assert.
      Add test for PR middle-end/100571.
      PR c/100550 - ICE: in fold_convert_loc with function call VLA argument
      Fix compilation error in ILP32.
      Avoid -Wuninitialized false negatives with sanitization and VLAs.
      PR middle-end/100574 - ICE in size_remaining, at builtins.c
      PR c/100619 - ICE on a VLA parameter with too many dimensions
      PR middle-end/100684 - spurious -Wnonnull with -O1 on a C++ lambda
      PR other/100463 - many errors using GTY and hash_map
      PR c/100719 - missing -Wvla-parameter on a mismatch in second parameter
      PR middle-end/100732 - ICE on sprintf %s with integer argument
      PR c/100783 - ICE on -Wnonnull and erroneous type
      Teach compute_objsize about placement new [PR100876].
      Consider size_t mangling as unsigned int and long [PR100876].
      Correct documented option defaults.
      Add support for per-location warning groups.
      c: add support for per-location warning groups.
      c-family: add support for per-location warning groups.
      cp: add support for per-location warning groups.
      middle-end: add support for per-location warning groups.
      PR middle-end/101216 - spurious notes for function calls
      ada: Add support for per-location warning groups.
      fortran: Add support for per-location warning groups.
      libcc1: Add support for per-location warning groups.
      objc: Add support for per-location warning groups.
      Regression tests for TREE_NO_WARNING enhancement to warning groups [PR74765, PR74762].
      Improve warning suppression for inlined functions [PR98512].
      Improve warning suppression for inlined functions.
      Improve warning suppression for inlined functions.
      Remove support for %G and %K.
      Add test for [PR86650].
      Add test for [PR55881].
      aarch64: Remove a vestigial %K [PR101363]
      Correct handling of variable offset minus constant in -Warray-bounds [PR100137]
      Use Object Size Type zero for -Warray-bounds [PR101374].
      Avoid including <new> to make cross-compiler testing easy.
      Adjust expected output for LP32 [PR100451].
      testsuite: Remove an xfail.
      Move warning suppression to the ultimate callee.
      Avoid -Wvla-parameter for nontrivial bounds [PR97548].
      Detect buffer overflow by aggregate and vector stores [PR97027].
      PR testsuite/101468  - Wstringop-overflow tests failures
      PR testsuite 101520 - gcc.target/powerpc/pr93658.c has excess errors
      Adjust by-value function vec arguments to by-reference.
      Handle all UBSAN built-ins in -Wuninitialized [PR101300].
      Correct stpcpy offset computation for -Warray-bounds et al. [PR101397].
      Adjust macro to avoid warning [PR101379].
      Fix typos in a comment.
      Remove an invalid defintion [PR101568].
      Add new test for PR65178.
      Use OEP_DECL_NAME when comparing VLA bounds [PR101585].
      Let -Wuninitialized assume built-ins don't change const arguments [PR101584].
      Add new gimple-ssa-warn-access pass.
      Correct -Warray-bounds handling if function pointers [PR101601].
      Correct uninitialized object offset and size computation [PR101494].
      Xfail just the failing assertion and correct target.
      Move failed part of a test to a new file [PR101671]
      Disable a test case in ILP32 [PR101688].
      Adjust by-value function vec arguments to by-reference.
      Move more code to new gimple-ssa-warn-access pass.
      Warn for reads from write-only arguments [PR101734].
      Diagnose mismatches between array and scalar new and delete [PR101791].
      Move more warning code to gimple-ssa-warn-access etc.
      Release resources acquired by enable_ranger() [PR101984].
      Document enable_ranger and disable_ranger.
      Reset PHI base0 flag if it's clear in any argument [PR101977, ...]
      Avoid printing range table header alone.
      Add -details to dump option needed after r12-3144.
      Refactor warn_uninit() code.
      Add attribute returns nonnull to get_range_query.
      Disable gcc_rich_location copying and assignment.
      Avoid valid Coverity warning for comparing array to zero.
      Enable ranger and caching in pass_waccess.
      Improve -Wuninitialized note location.
      Better handle MIN/MAX_EXPR of unrelated objects [PR102200].
      Factor predidacte analysis out of tree-ssa-uninit.c into its own module.
      Handle null cfun [PR102243].
      Correct a function pre/postcondition [PR102403].
      Enhance -Waddress to detect more suspicious expressions [PR102103].
      Check to see if null pointer is dereferenceable [PR102630].
      Detect overflow by atomic functions [PR102453].
      Make full use of context-sensitive ranges in access warnings.
      Improve/correct detection of overlapping aggregates [PR102238, PR102919].
      Fix a typo.
      Adjust test to avoid target-specific failures [PR103161].
      Avoid assuming maximum string length is constant [PR102960].
      Handle folded nonconstant array bounds [PR101702]
      Avoid pathological function redeclarations when checking access sizes [PR102759].
      Restore ancient -Waddress for weak symbols [PR33925].
      Implement -Winfinite-recursion [PR88232].
      Issue -Waddress also for reference members [PR96507].
      Prune out valid -Winfinite-recursion [PR103469].
      Use the recursive form of compute_objsize [PR 103143].
      Move bndrng from access_ref to access_data.
      Pass GIMPLE statement to compute_objsize.
      Introduce access_ref::merge_ref.
      Refactor compute_objsize_r into helpers.
      Add a new dump function.
      Avoid expecting nonzero size for access none void* arguments [PR101751].
      Extend the offset and size of merged object references [PR103215].
      Add new test [PR78969].
      Fix member alignment for all targets [PR103751].
      Check for class type before assuming a type is one [PR103703].
      Eenable -Winvalid-memory-order for C++ [PR99612].
      Avoid -Wformat-diag.
      Test to verify -Wformat-overflow uses context-sensitive ranges.
      Use enclosing object size if it's smaller than member [PR 101475].
      Add -Wuse-after-free [PR80532].
      Add -Wdangling-pointer [PR63272].
      Handle failure to determine pointer provenance conservatively [PR104069].
      Suppress valid warning [PR104103].
      Add test for bogus warning [PR104076].
      Remove duplicate code block.
      Avoid recomputing PHI results after failure (PR104203).
      Constrain PHI handling in -Wuse-after-free [PR104232].
      Declare std::array members with attribute const [PR101831].
      Correct typos in -Wuse-after-free description.
      Constrain conservative string lengths to array sizes [PR104119].
      Make pointer_query cache a private member.
      Enable pointer_query caching in -Warray-bounds.
      Enable pointer_query caching in -Wrestrict.
      Adjust warn_access pass placement [PR104260].
      Use auto_vec for pointer_query cache for auto cleanup.
      Update -Warray-bounds documentation [PR104355].
      Add a test for true positives related to PR104715.
      Call mark_dfs_back_edges before testing EDGE_DFS_BACK [PR104761].
      Avoid -Wdangling-pointer for by-transparent-reference arguments [PR104436].
      PR middle-end/105604 - ICE: in tree_to_shwi with vla in struct and sprintf

Martin Uecker (6):
      Correct a mistake in a warnung for -Wnonnull.
      Evaluate arguments of sizeof that are structs of variable size.
      Evaluate type arguments of sizeof that are structs of variable size [PR101838]
      Correct treatment of qualifiers for pointers to arrays for C2X [PR98397]
      MAINTAINERS: Add myself to DCO section and update email address
      Fix ICE when mixing VLAs and statement expressions [PR91038]

Matheus Castanho (1):
      libstdc++: Only use __gthread_yield if gthreads is available

Matt Jacobson (2):
      Objective-C: Default flag_objc_sjlj_exceptions off for NeXT ABI >= 2.
      build: Implement --with-multilib-list for avr target

Matthias Kretz (23):
      c++: Add missing scope in typedef diagnostic [PR100763]
      c++: Output less irrelevant info for function template decl [PR100716]
      libstdc++: Remove -fno-tree-vrp after PR98834 was resolved
      libstdc++: Improve output verbosity options and default
      libstdc++: Document simd testsuite
      libstdc++: Improve copysign(simd) codegen
      libstdc++: Remove dead code in simd
      libstdc++: Improve simd fixed_size codegen
      libstdc++: Remove incorrect fabs(simd) overload
      libstdc++: Minor simd_math cleanups
      libstdc++: Fix condition when AVX512F ldexp implementation is used
      libstdc++: Avoid raising fp exceptions in trunc, floor, and ceil
      libstdc++: Ensure unrolled loops inline the lambda
      libstdc++: Fix internal names: add missing underscores
      MAINTAINERS: Add myself for write after approval and DCO
      libstdc++: Make use of __builtin_bit_cast for simd
      c-family: Add more predefined macros for math flags
      c-family: Add __builtin_assoc_barrier
      Fix hash_map::traverse overload
      c++: don't ICE on NAMESPACE_DECL inside FUNCTION_DECL
      libstdc++: Fix ODR issues with different -m flags
      libstdc++: Don't fail if math_errhandling is not defined
      libstdc++: Fix for non-constexpr math_errhandling

Matthias Seidel (1):
      Fixed typo

Matthieu Eyraud (3):
      [Ada] Fix ALI source location for dominance markers
      [Ada] SCOs: generate 'P' decisions for [Type_]Invariant pragmas
      [Ada] Emit specific SCOs for decisions of quantified expressions

Matwey V. Kornilov (1):
      avr: Add atmega324pb MCU

Max Filippov (2):
      gcc: xtensa: fix PR target/102115
      gcc: xtensa: fix PR target/102336

Maxim Blinov (1):
      analyzer: Fix bootstrap with clang

Maxim Kuvyrkov (4):
      Add description of how testsuite parallelization works
      Improve autoprefetcher heuristic (partly fix regression in PR91598)
      Add missing entry for rank_for_schedule stats.
      Improve diff-ability of scheduler logs

Michael Forney (2):
      config: Backport "Rely less on internal symbols" (serial 69) to gettext.m4
      config: Backport "Rely less on internal symbols" (serial 68) to gettext.m4

Michael Meissner (36):
      Fix Fortran rounding issues, PR fortran/96983.
      Fix logic error in 32-bit trampolines.
      Define target hook to emit KFmode constants for libgcc.
      Add IEEE 128-bit min/max support on PowerPC.
      Fix IEEE 128-bit min/max test.
      Add IEEE 128-bit fp conditional move on PowerPC.
      Generate 128-bit int divide/modulus on power10.
      Change rs6000_const_f32_to_i32 return type.
      Fix vec-splati-runnable.c test.
      Deal with prefixed loads/stores in tests, PR testsuite/100166
      PR 100167: Fix vector long long multiply/divide tests on power10.
      PR 100170: Fix eq/ne tests on power10.
      PR 100168: Fix call test on power10.
      Fix typo in fold-vec-load-builtin_vec_xl-* tests.
      Fix xxeval predicates (PR 99921).
      Move xx* builtins to vsx.md.
      Make xxsplti*, xpermx, xxeval be vecperm type.
      Fix tests that require IBM 128-bit long double
      Fix float128-call.c test for power8 IEEE 128 and power10.
      Update comments in float128-call.c test.
      Add new constant data structure.
      Add LXVKQ support.
      Generate XXSPLTIW on power10.
      Generate XXSPLTIDP for vectors on power10.
      Generate XXSPLTIDP for scalars on power10.
      Allow other languages to change long double format.
      Fix pr101384-1.c code generation test.
      Mark XXSPLTIW/XXSPLTIDP as prefixed -- PR 104136
      Fix fold-vec-splat-floatdouble testsuite failure on power10
      Use correct names for __ibm128 if long double is IEEE 128-bit.
      Define __SIZEOF_FLOAT128__ and __SIZEOF_IBM128__.
      Optimize signed DImode -> TImode on power10.
      Fix DImode to TImode sign extend issue
      Allow vsx_extract_<mode> to use Altivec registers.
      Disable float128 tests on VxWorks, PR target/104253.
      rs6000: Ignore fusion option flags for inlining test [PR102059]

Michael de Lang (2):
      TSAN: add new test
      libstdc++: Implement constexpr std::basic_string for C++20

Michel Morin (2):
      c++: add spellcheck suggestions for typedef etc. [PR77565]
      c++: adjust the handling of RID_ATTRIBUTE.

Mikael Morin (18):
      fortran: Ignore unused args in scalarization [PR97896]
      fortran: Tiny sort_actual internal refactoring
      fortran: Reverse actual vs dummy argument mapping
      fortran: simplify elemental arguments walking
      fortran: Delete redundant missing_arg_type field
      fortran: Identify arguments by their names
      Fortran: Ignore KIND argument of a few more intrinsics. [PR103789]
      testsuite: Enrich tests with variants failing on the branch.
      fortran: Unshare associate var charlen [PR104228]
      fortran: Separate associate character lengths earlier [PR104570]
      fortran: Pre-evaluate string pointers. [PR102043]
      fortran: Update index extraction code. [PR102043]
      fortran: Generate an array temporary reference [PR102043]
      fortran: Use pointer arithmetic to index arrays [PR102043]
      fortran: Detect duplicate unlimited polymorphic types [PR103662]
      testsuite: add additional option to force DSE execution [PR103662]
      fortran: Avoid infinite self-recursion [PR105381]
      fortran: Compare non-constant bound expressions. [PR105379]

Mike Frysinger (3):
      config: delete unused sim macros
      sim: depend on gnulib
      sim: leverage gnulib

Mosè Giordano (1):
      Fix bashism in `libsanitizer/configure.tgt'

Murray Steele (2):
      arm: Move arm_simd_info array declaration into header
      arm: Declare MVE types internally via pragma

Nathan Sidwell (6):
      DCO Entry
      Fix diagnostic recursion ICE
      [c++] Adjust mark used member in instantiated class scope
      c++: New module mangling ABI
      c++: Standard mangling abbreviations & modules
      c++, coroutines: Avoid expanding within templates [PR103868]

Navid Rahimi (4):
      Re: [PATCH] PR tree-optimization/96779 Adding a missing pattern to match.pd
      Re: [PATCH] PR tree-optimization/102232 Adding a missing pattern to match.pd
      MAINTAINERS: Add myself to write after approval and DCO sections.
      tree-optimization/103514 Missing XOR-EQ-AND Optimization

Nelson Chu (1):
      RISC-V: jal cannot refer to a default visibility symbol for shared object.

Nick Clifton (2):
      Replace AC_PROG_CC with AC_PROG_CC_C99 in top level configure file.
      libiberty: Fix infinite recursion in rust demangler.

Nicolas Roche (1):
      [Ada] Handle malformed command line on Win32

Olivier Hainque (22):
      [Ada] Fix inaccuracies in signal handler trampoline for aarch64-vxworks
      Provide vxworks alternate stdint.h during the build
      Leverage VX_CPU_PREFIX in aarch64-vxworks.h
      Remove assignment to STMP_FIXINC from t-vxworks
      Leverage sysroot for VxWorks
      Ensure VxWorks headers expose C99 features for C++
      Include yvals.h for VxWorks < 7 RTPs as well
      Preserve cpu specific CRTSTUFF_T_CFLAGS on powerpc-vxworks7
      Remove special case for arm-vxworks on the use of vxcrtstuff
      Remove ppc*-vxworks7* inadequate libgcc Makefile fragments
      Remove fpic multilib on x86_64-vxworks
      Add -mdejagnu-cpu=power7 to dg-options for pr97142.c
      Fix static array size in gcc.dg/vect/vect-simd-20.c
      Register --sysroot in the driver switches table
      Adjust VxWorks fixincludes hack for mkdir to work for C++
      Add VxWworks fixincludes hack, don't expect yvals.h from gcc
      Improve sequence logic in cxx_init_decl_processing
      State --sysroot option as validated once processed
      Add VxWorks fixincludes hack, C99 FP classification
      Add VxWorks fixincludes hack, #include sysLib.h in time.h
      Add VxWorks fixincludes hack, open posix API for C++
      Fix glitch in entry for vxworks_posix_open

Oracle Public Cloud User (1):
      PR 102281 (-ftrivial-auto-var-init=zero causes ice)

Palmer Dabbelt (2):
      RISC-V: Document the degree of position independence that medany affords
      libstdc++: Default to mutex-based atomics on RISC-V

Pascal Obry (7):
      [Ada] Add some OS constants to control keepalive on TCP connections
      [Ada] Minor code clean-up
      [Ada] Fix negative numbers formatted with leading zero
      [Ada] Issue a proper error message when no format specifier found
      [Ada] Minor style fix (no dot on single line comment)
      [Ada] Fix possible memory corruption for hostnames longer than 1024 bytes
      Properly reset the port handle when closing

Pat Haugen (7):
      Add ALTIVEC_REGS as pressure class.
      Make sure link reg save MEM has frame alias set.
      Update Power10 scheduling description for new fused instruction types.
      Verify destination[source] of a load[store] instruction is a register.
      Enable store fusion on Power10.
      Mark Power10 fusion option undocumented and remove sub-options.
      Fix attr-retain-* tescases for 32-bit PowerPC.

Patrick Bernardi (14):
      [Ada] Install_Restricted_Handlers: define Prio parameter as Interrupt_Priority
      [Ada] System.Storage_Elements: cleanup comment
      [Ada] Ensure System.Tasking.Debug.Known_Tasks component access is atomic
      [Ada] bindgen: support additional features on targets suppressing the standard lib
      [Ada] RTEMS: use default stack checking emulation package
      [Ada] RTEMS: use hardware interrupts instead of signals for interrupt handling
      [Ada] RTEMS: use regular RTEMS API for minimum stack size calculation
      [Ada] sigset_t is an unsigned long on RTEMS
      [Ada] RTEMS: use atomic primitive packages on aarch64
      [Ada] Do not indicate a pending abort if the task is already aborting
      [Ada] Do not assume a priority value of zero is a valid priority
      [Ada] Add signal to exception mapping for RTEMS
      [Ada] RTEMS: add traceback support for AArch64
      [Ada] Read directory in Ada.Directories.Start_Search rather than Get_Next_Entry

Patrick McGehearty (2):
      Practical improvement to libgcc complex divide
      Fix for powerpc64 long double complex divide failure

Patrick Palka (229):
      libstdc++: Implement P2259R1 changes [PR95983]
      c++: Add testcase for already fixed PR [PR16617]
      c++: Add testcase for already fixed PR [PR84689]
      c++: Add testcase for already fixed PR [PR77435]
      c++: Add testcase for already fixed PR [PR94508]
      c++: Refine enum direct-list-initialization [CWG2374]
      c++: Fix pretty printing pointer to function type [PR98767]
      c++: Hard error with tentative parse and CTAD [PR87709]
      c++: do_class_deduction and dependent init [PR93383]
      c++: constexpr pointer indirection with negative offset [PR100209]
      libstdc++: Fix up lambda in join_view::_Iterator::operator++ [PR100290]
      c++: Fix Bases(args...)... base initialization [PR88580]
      libstdc++: Fix various bugs in ranges_algo.h [PR100187, ...]
      c++: Overeager use of deleted function before ADL [PR68942]
      libstdc++: Implement P2367 changes to avoid some list-initialization
      libstdc++: Implement proposed resolution for LWG 3532
      libstdc++: Implement P2328 changes to join_view
      c++: mark_used and ADL with template-id [PR100344]
      c++: base-clause parsing and implicit 'this' [PR100362]
      libstdc++: Implement LWG 3517/3520 for join_view/transform_view
      libstdc++: Don't constrain some enable_borrowed_range specializations
      libstdc++: Implement LWG 3391 changes to move/counted_iterator::base()
      libstdc++: Implement LWG 3533 changes to foo_view::iterator::base()
      c++: fn parm pack expansion inside constraint [PR100138]
      c++: dependent operator expression lookup [PR51577]
      libstdc++: Remove extern "C" from Ryu sources
      libstdc++: Fix miscellaneous issues with elements_view::_Sentinel [PR100631]
      libstdc++: Fix condition for memoizing reverse_view::begin() [PR100621]
      libstdc++: Fix up semiregular-box partial specialization [PR100475]
      libstdc++: Fix access issue in elements_view::_Sentinel [PR100631]
      libstdc++: Implement missing P0896R4 changes to reverse_iterator [PR100639]
      libstdc++: Fix access issue in iota_view::_Sentinel [PR100690]
      libstdc++: Implement LWG 3490 change to drop_while_view::begin()
      libstdc++: Fix iterator caching inside range adaptors [PR100479]
      c++: Fix reference NTTP binding to noexcept fn [PR97420]
      c++: constexpr and copy elision within mem init [PR100368]
      c++: access for hidden friend of nested class template [PR100502]
      c++: Relax rule for non-type arguments in partial specs [CWG1315]
      c++: parameter pack inside static_assert [PR99893]
      c++: value-init vs zero-init in expand_aggr_init_1 [PR65816]
      c++: using-enum and access specifiers [PR100862]
      c++: cv-qualified dependent name of alias tmpl [PR100592]
      libstdc++: Simplify range adaptors' forwarding of bound args [PR100577]
      libstdc++: Avoid hard error in ranges::unique_copy [PR100770]
      c++: tsubst_function_decl and excess arg levels [PR100102]
      c++: top-level cv-quals on type of NTTP [PR100893]
      c++: access of dtor named by qualified template-id [PR100918]
      c++: normalization of non-templated return-type-req [PR100946]
      c++: matching deduced template template parameters [PR67829]
      c++: Substitute into function parms in lexical order [PR96560]
      libstdc++: Refine range adaptors' "simple extra args" mechanism [PR100940]
      libstdc++: Non-triv-copyable extra args aren't simple [PR100940]
      libstdc++: Implement P2325 changes to default-constructibility of views
      libstdc++: Move ranges algos used by <ranges> into ranges_util.h
      libstdc++: Implement LWG 3557 change to convertible_to
      libstdc++: Reduce ranges::minmax/minmax_element comparison complexity
      libstdc++: Implement LWG 3546 changes to common_iterator
      libstdc++: Implement LWG 3553 changes to split_view
      libstdc++: Implement LWG 3555 changes to transform/elements_view
      libstdc++: Define split_view::_InnerIter::base as per P2210
      libstdc++: Implement P2210 changes to split_view resolving LWG 3478
      libstdc++: Implement P2210 changes to rename views::split to lazy_split
      libstdc++: Implement new views::split as per P2210
      c++: conversion to base of vbase in NSDMI [PR80431]
      c++: REF_PARENTHESIZED_P wrapper inhibiting NRVO [PR67302]
      libstdc++: Sync __cpp_lib_ranges macro defined in ranges_cmp.h
      c++: CTAD and deduction guide selection [PR86439]
      c++: excessive instantiation during CTAD [PR101174]
      c++: requires-expression folding [PR101182]
      c++: alias CTAD and aggregate deduction cand [PR98832]
      c++: access scope during partial spec matching [PR96204]
      c++: Fix push_access_scope and introduce RAII wrapper for it
      c++: Extend the PR96204 fix to variable templates too
      c++: cxx_eval_array_reference and empty elem type [PR101194]
      c++: unqualified member template in constraint [PR101247]
      c++: find_template_parameters and TEMPLATE_DECLs [PR101247]
      c++: requires-expr with dependent extra args [PR101181]
      c++: 'new T[N]' and SFINAE [PR82110]
      c++: permit deduction guides at class scope [PR79501]
      c++: CTAD and forwarding references [PR88252]
      libstdc++: Give split_view::_Sentinel a default ctor [PR101214]
      libstdc++: invalid default init in _CachedPosition [PR101231]
      c++: covariant reference return types [PR99664]
      c++: alias CTAD in unevaluated context [PR101233]
      c++: Improve memory usage of subsumption [PR100828]
      libstdc++: Add missing std::move to join_view::iterator ctor [PR101483]
      libstdc++: Fix up implementation of LWG 3533 [PR101589]
      libstdc++: Add missing std::move to ranges::copy/move/reverse_copy [PR101599]
      c++: most vexing parse and braced CTAD [PR89062]
      c++: recognize class-scope non-template dguides [PR79501]
      c++: parameterized requires-expr as default argument [PR101725]
      c++: constexpr std::construct_at on empty field [PR101663]
      c++: ignore explicit dguides during NTTP CTAD [PR101883]
      c++: aggregate CTAD and brace elision [PR101344]
      Fix PR number for r12-2991 in ChangeLogs
      c++: Fix PR number in testcase [PR101803]
      c++: check arity before deduction w/ explicit targs [PR12672]
      c++: shortcut bad convs during overload resolution [PR101904]
      c++: parameter pack inside constexpr if [PR101764]
      c++: empty union member activation during constexpr [PR102163]
      c++: default ctor that's also a list ctor [PR102050]
      c++: shortcut bad convs during overload resolution, part 2 [PR101904]
      c++: constrained variable template issues [PR98486]
      c++: concept-ids and value-dependence [PR102412]
      c++: improve tree dump for templated decls
      real: fix encoding of negative IEEE double/quad values [PR98216]
      c++: deduction guides and ttp rewriting [PR102479]
      c++: ttp matching with constrained auto parm [PR99909]
      c++: defaulted comparisons and vptr fields [PR95567]
      c++: argument order in a variadic type trait intrinsic
      c++: __is_trivially_xible and multi-arg aggr paren init [PR102535]
      c++: templated static local var has value-dep addr [PR98930]
      c++: unifying equal NONTYPE_ARGUMENT_PACKs [PR102547]
      c++: variadic ttp constraint subsumption [PR99904]
      c++: NTTP with array/function type after substitution [PR61355]
      c++: Add testcase for already-fixed PR [PR102643]
      libstdc++: Implement LWG 3549 changes to ranges::enable_view
      libstdc++: Implement LWG 3523 changes to ranges::iota_view
      libstdc++: Implement LWG 3470 change to ranges::subrange
      libstdc++: Implement LWG 3568 change to ranges::basic_istream_view
      libstdc++: Implement LWG 3580 change to ranges::iota_view
      libstdc++: Implement LWG 3481 change to ranges::viewable_range
      libstdc++: Implement LWG 3535 changes to ranges::join_view
      libstdc++: Implement LWG 3590-3592 changes to split_view/lazy_split_view
      libstdc++: Implement LWG 3595 changes to common_iterator
      libstdc++: Implement P1739R4 changes to views::take/drop/counted
      libstdc++: Implement P2432R1 changes for views::istream
      libstdc++: missing constexpr for __[nm]iter_base [PR102358]
      c++: quadratic constexpr behavior for left-assoc logical exprs [PR102780]
      c++: CTAD within template argument [PR102933]
      c++: unexpanded pack in var tmpl partial spec [PR100652]
      c++: bogus error w/ tentative type parse of concept-id [PR98394]
      c++: use auto_vec in cp_parser_template_argument_list
      libstdc++: Merge latest Ryu sources
      c++: unqual lookup performed twice w/ template-id ADL [PR102670]
      c++: template-id ADL and partial instantiation [PR99911]
      c++: error recovery during C++20 template-id ADL failure
      c++: implicit dummy object in requires clause [PR103198]
      c++: nested lambda capturing a capture proxy [PR94376]
      c++: cp_walk_subtrees simplification for *_CAST_EXPR
      c++: redundant explicit 'this' capture before C++20 [PR100493]
      c++: remove COMPOUND_EXPR_OVERLOADED flag
      c++: don't leak 'arglist' in build_new_op
      c++: processing_template_decl vs template depth [PR103408]
      c++: two-stage name lookup for overloaded operators [PR51577]
      c++: local_specializations and recursive constrained fn [PR103714]
      print-tree: dump DECL_LANG_FLAG_8
      c++: nested lambda capturing a capture proxy, cont [PR94376]
      c++: ahead-of-time overload set pruning for non-dep calls
      c++: memfn lookup consistency in incomplete-class ctx
      c++: hard error w/ ptr+N and incomplete type [PR103700]
      c++: Add testcase for SFINAE w/ p[N] and incomplete type [PR101239]
      c++: Add testcase for recently fixed PR [PR69681]
      c++: "more constrained" vs staticness of memfn [PR103783]
      c++: constexpr base-to-derived conversion with offset 0 [PR103879]
      c++: dependent bases and 'this' availability [PR103831]
      libstdc++: Avoid overflow in bounds checks [PR103955]
      libstdc++: Add explicit dg-do directive to .../103955.cc
      libstdc++: Directly implement hexfloat std::from_chars for binary32/64
      libstdc++: Import the fast_float library
      libstdc++: Apply modifications to our local copy of fast_float
      libstdc++: Adjust fast_float's over/underflow behavior for conformance
      libstdc++: Use fast_float in std::from_chars for binary32/64
      c++: DEPENDENT_OPERATOR_TYPE as type of NTTP [PR104074]
      c++: consistently diagnose bare CTAD placeholder in fn return type
      c++: CTAD inside alias template [PR91911, PR103672]
      c++: add testcase for recently fixed PR [PR103631]
      c++: value category of compound object expr [PR104173]
      c++: Fix non-portable default argument of make_auto_1 [PR104197]
      c++: deleted fn and noexcept inst [PR101532, PR104225]
      c++: constrained partial spec using qualified name [PR92944, PR103678]
      c++: non-dependent immediate member fn call [PR99895]
      c++: Add a couple of CTAD testcases [PR82632]
      c++: var tmpl w/ dependent constrained auto type [PR103341]
      c++: bogus warning with value init of const pmf [PR92752]
      c++: CONSTRUCTORs are non-deduced contexts [PR104291]
      c++: CTAD for class tmpl defined inside partial spec [PR104294]
      c++: dependence of member noexcept-spec [PR104079]
      c++: dependent noexcept-spec on defaulted comparison op [PR96242]
      c++: constrained auto in lambda using outer tparms [PR103706]
      c++: lambda in pack expansion using pack in constraint [PR103706]
      c++: satisfaction value of type const bool [PR104410]
      c++: deducing only from noexcept-spec [PR80951]
      c++: Add testcase for already fixed PR [PR104425]
      c++: memfn lookup consistency and using-decls [PR104432]
      c++: memfn lookup consistency and dependent using-decls
      c++: treat NON_DEPENDENT_EXPR as not potentially constant [PR104507]
      c++: double non-dep folding from finish_compound_literal [PR104565]
      c++: implicit 'this' in noexcept-spec within class tmpl [PR94944]
      c++: Add testcase for already fixed PR [PR85493]
      libstdc++: Implement P2415R2 changes to viewable_range / views::all
      c++: Add testcase for already fixed PR [PR103443]
      c++: merge default targs for function templates [PR65396]
      c++: detecting copy-init context during CTAD [PR102137]
      c++: non-constant non-dependent decltype folding [PR104823]
      libstdc++: Avoid implicit narrowing from uint128_t [PR104859]
      c++: give fold expressions a location
      c++: ICE with non-constant satisfaction value [PR98644]
      c++: return-type-req in constraint using only outer tparms [PR104527]
      c++: ICE with bad conversion shortcutting [PR104622]
      c++: naming a dependently-scoped template for CTAD [PR104641]
      c++: extraneous access error with ambiguous lookup [PR103177]
      c++: fold calls to std::move/forward [PR96780]
      c++: further lookup_member simplification
      c++: missing SFINAE for non-constant consteval calls [PR104620]
      c++: ICE when building builtin operator->* set [PR103455]
      c++: diagnosing if-stmt with non-constant branches [PR105050]
      c++: constrained template friend matching ICE [PR105064]
      c++: reject concept w/ multiple tparm lists [PR105067]
      c-family: Add -Wmisleading-indentation testcase [PR71637]
      c++: ICE with failed __is_constructible constraint [PR100474]
      c++: deducing from class type of NTTP [PR105110]
      c++: make -Wctad-maybe-unsupported respect complain [PR105143]
      c++: use after free during name lookup w/ modules [PR99479]
      c++: requires-expr in pack expansion using pack [PR103105]
      libstdc++: Optimize integer std::from_chars
      libstdc++: Avoid double-deref of __first in ranges::minmax [PR104858]
      libstdc++: Micro-optimize __from_chars_pow2_base
      libstdc++: Stop defining _GLIBCXX_ASSERTIONS in floating_to_chars.cc
      libstdc++: Work around modules ICE in <charconv> [PR105297]
      libstdc++: Avoid ASCII assumptions in floating_from_chars.cc
      c++: partial ordering with dependent NTTP type [PR105289]
      c++: ICE with requires-expr and -Wsequence-point [PR105304]
      c++: decltype of non-dependent call of class type [PR105386]
      c++: partial ordering and dependent operator expr [PR105425]
      libstdc++: case-sensitivity in hexfloat std::from_chars [PR105441]
      libstdc++: Don't use std::tolower in <charconv> [PR103911]
      c++: ICE during aggr CTAD for member tmpl [PR105476]
      c++: constexpr init of union sub-aggr w/ base [PR105491]

Paul A. Clarke (29):
      rs6000: Add support for SSE4.1 "test" intrinsics
      rs6000: Add tests for SSE4.1 "test" intrinsics
      rs6000: Add support for SSE4.1 "blend" intrinsics
      rs6000: Add tests for SSE4.1 "blend" intrinsics
      rs6000: Add support for SSE4.1 "ceil" intrinsics
      rs6000: Add tests for SSE4.1 "ceil" intrinsics
      rs6000: Add support for SSE4.1 "floor" intrinsics
      rs6000: Add tests for SSE4.1 "floor" intrinsics
      rs6000: Add support for _mm_minpos_epu16
      rs6000: Add test for _mm_minpos_epu16
      rs6000: Support SSE4.1 "min" and "max" intrinsics
      rs6000: Simplify some SSE4.1 "test" intrinsics
      rs6000: Support SSE4.1 "cvt" intrinsics
      rs6000: Support more SSE4 "cmp", "mul", "pack" intrinsics
      rs6000: Correct several errant dg-require-effective-target
      rs6000: Add nmmintrin.h to extra_headers
      rs6000: Guard some x86 intrinsics implementations
      rs6000: Fix missing "externs" in smmintrin.h
      rs6000: Fixes for tests including only <x86intrin.h>
      rs6000: Add optimizations for _mm_sad_epu8
      rs6000: Add Power10 optimization for most _mm_movemask*
      rs6000: Fix errant "vector" instead of "__vector"
      rs6000: Add Power10 optimization for _mm_blendv*
      rs6000: Support SSE4.1 "round" intrinsics
      rs6000: __Uglify non-uglified local variables in headers
      rs6000: Move g++.dg/ext powerpc tests to g++.target
      rs6000: Move more g++.dg powerpc tests to g++.target
      docs: Correct "This functions" to "These functions"
      docs: Fix 'modff' reference in extend.texi

Paul Eggert (1):
      Document that -fno-trampolines is for Ada only [PR100735]

Paul Thomas (4):
      Fortran: Assumed and explicit size class arrays [PR46691/99819].
      Fortran: Correct PR number from 46691 [PR46991].
      Correct ChangeLob entries for PR46991
      Fortran: Pass unlimited polymorphic argument to assumed type [PR103366].

Pavel I. Kryukov (1):
      libstdc++: Add self-merge check to std::forward_list::merge [PR103853]

Pekka Seppänen (1):
      Adjust CPP_FOR_BUILD

Peter Bergner (21):
      rs6000: MMA test case ICEs using -O3 [PR99842]
      rs6000: Add new __builtin_vsx_build_pair and __builtin_mma_build_acc built-ins
      i386: Add V8QI and other 64bit vector permutations [PR89021]
      rs6000: MMA builtin usage ICEs when used in a #pragma omp parallel and using -fopenmp [PR100777]
      rs6000: Add MMA __builtin_vsx_lxvp and __builtin_vsx_stxvp built-ins
      rs6000: Harden mma_init_builtins
      rs6000: Move rs6000_split_multireg_move to later in file
      rs6000: Generate an lxvp instead of two adjacent lxv instructions
      rs6000: Fix ICE expanding lxvp and stxvp gimple built-ins [PR101849]
      rs6000: Disable optimizing multiple xxsetaccz instructions into one xxsetaccz
      rs6000: MMA test case emits wrong code when building a vector pair [PR102976]
      middle-end: Skip initialization of opaque type variables [PR103127]
      rs6000: testsuite: Add rop_ok effective-target function
      testsuite: Fix check_effective_target_rop_ok [PR103556, PR103586]
      rs6000: Do not allow combining of multiple assemble quads [PR103548]
      rs6000: Retry tbegin. instructions that can fail intermittently
      rs6000: Allow -mlong-double-64 after -mabi={ibm,ieee}longdouble [PR104208, PR87496]
      rs6000: Fix invalid address passed to __builtin_mma_disassemble_acc [PR104923]
      rs6000: Update testsuite to use -mdejagnu-cpu= and -mdejagnu-tune= options
      rs6000: Handle pcrel sibcalls to longcall functions [PR104894]
      rs6000: Prefer assigning the MMA vector operands to altivec registers [PR105556]

Petter Tomner (5):
      MAINTAINERS: Adding myself to to DCO and write after approval
      libgccjit: Generate debug info for variables
      jit: Change printf specifiers for size_t to %zu
      Add support for global rvalue initialization and constructors
      jit: Update docs

Philipp Fent (2):
      libstdc++: Add pretty printer for std::span
      libstdc++: Add pretty printer for std::initializer_list

Philipp Tomsich (2):
      aarch64: enable Ampere-1 CPU
      RISC-V: Implement C[LT]Z_DEFINED_VALUE_AT_ZERO

Philippe Blain (1):
      libstdc++: Install libstdc++*-gdb.py more robustly [PR 99453]

Pierre-Alexandre Bazin (3):
      [Ada] SPARK proof of the Ada.Strings.Fixed library
      [Ada] Contracts written for the Ada.Strings.Bounded library
      [Ada] Prove double precision integer arithmetic unit

Pierre-Marie de Rodat (4):
      [Ada] Regenerate *.texi files with Sphinx 4.0.2
      [Ada] adaint.c minor reformatting
      [Ada] doc/share/conf.py: fix string handling
      [Ada] Revert r12-6599 (Fix up handling of ghost units [PR104027])

Piotr Kubaj (1):
      gcc/configure: Check for powerpc64le*-*-freebsd*

Piotr Trojanek (324):
      [Ada] Cleanups related to entry barrier conditions
      [Ada] Extend compile-time evaluation in case statements to all objects
      [Ada] Update reference with description of type resolution
      [Ada] Remove double initialization of interpretation tables
      [Ada] Simplify folding of selected components with qualified prefixes
      [Ada] More precise error about aspects conflicting with Static
      [Ada] Refactor repeated checks for the expression of aspect Static
      [Ada] Consistent diagnostic on missing -gnat2020 switch for aspects
      [Ada] Replace dubious use of Traverse_Func with Traverse_Proc
      [Ada] Simplify data structures for overloaded interpretations
      [Ada] Remove redundant assignment in Formal_Is_Used_Once
      [Ada] Adjust List_Length description
      [Ada] Style fixes related to calls to List_Length
      [Ada] Consistent wording for permissible-vs-allowed prefix
      [Ada] Extend Find_Related_Context to deal with child instances
      [Ada] Fix handling of visibility when categorization from pragmas
      [Ada] Refine type of a local size variable
      [Ada] Cleanup processing of aspect Dynamic_Predicate
      [Ada] Code and style cleanups for CUDA
      [Ada] Remove leading and trailing spaces in error messages
      [Ada] Fix calls to Error_Msg_NE instead of Error_Msg_N
      [Ada] Fix typos in calls to Error_Msg_NE
      [Ada] Allow attributes Version and Body_Version prefixed by entries
      [Ada] Fix attributes Version and Body_Version for concurrent units
      [Ada] Replace call with a reference to a local constant
      [Ada] Replace calls to RTE with Is_RTE where possible
      [Ada] Remove unused initial values in expansion of distributed calls
      [Ada] Simplify implicit loading for GNATprove with Discard_Node
      [Ada] Refine type of a counter object from Int to Nat
      [Ada] Replace low-level membership test with a high-level Is_Record_Type
      [Ada] Reuse a wrapper for Resolve with implicit type where possible
      [Ada] Minor style fixes in Max_Aggregate_Size
      [Ada] Reuse Is_Universal_Numeric_Type where possible
      [Ada] Guard against leading and trailing spaces reappearing in errors
      [Ada] Fix inconsistent handling of character set control switches
      [Ada] Fix reference to SPARK RM rule in comment
      [Ada] Check entries for formals of mode IN appearing as global outputs
      [Ada] Reject formals of mode IN appearing as global outputs
      [Ada] Simplify use of a global name buffer for Global/Depends errors
      [Ada] Reject constants of access-to-variable type as function globals
      [Ada] Reuse Is_Formal_Object where convenient
      [Ada] Fix handling of access-to-variable objects in Global and Depends
      [Ada] Simplify iteration over formal parameters for Global/Depends check
      [Ada] Fix inconsistent iteration with First_Formal and Next_Entity
      [Ada] Reuse First_Formal for generic subprograms
      [Ada] Refine type of a counter variable from Integer to Natural
      [Ada] Reuse existing To_Mixed routine in pretty-printer
      [Ada] Use function and not procedure UI_Image in pretty-printing
      [Ada] Remove arbitrary and redundant qualification with Sinfo
      [Ada] Refactor repeated call to Next when pretty-printing if-expressions
      [Ada] Remove redundant check in iteration over formal parameters
      [Ada] Set constraint error on real division just like on integer division
      [Ada] Remove unnecessary parameter of Apply_Compile_Time_Constraint_Error
      [Ada] Speed up enumeration'Value with perfect hash function
      [Ada] Remove redundant explicit calls to UI_From_Int in comparisons
      [Ada] Qualify internal access-to-subprogram types as not null
      [Ada] Simplify GNATmake by reusing GNAT.Ctrl_C
      [Ada] Cleanup a statically true condition in expanded raise statement
      [Ada] Remove redundant checks for empty lists
      [Ada] Detect unchecked union components with fully qualified names
      [Ada] Refine types of variables with call to Scope as their initial values
      [Ada] Detect unchecked union subcomponents in nested variant parts
      [Ada] Reuse Has_Defaulted_Discriminants where possible
      [Ada] Fix expansion of attributes Input/Output for unchecked union types
      [Ada] Remove excessive conditions in iterations across components
      [Ada] Style cleanups related to writing of ALI files
      [Ada] Remove redundant condition for Image attribute and Ada version
      [Ada] Fix restriction No_Enumeration_Maps on both Image attributes
      [Ada] Remove unused initial value in Read_Library_Info_From_Full
      [Ada] Set Raises_CE flag only in Apply_Compile_Time_Constraint_Error
      [Ada] Remove hardcoded pragma Warnings from the formal vectors library
      [Ada] Use high-level Make_Character_Literal instead of low-level New_Node
      [Ada] Remove repeated calls in Resolve_Range
      [Ada] Avoid repeated analysis of constraint ranges
      [Ada] Remove End_Interp_List from the overloaded resolution API
      [Ada] Cleanup code for flagging object references in interfering contexts
      [Ada] Attribute Address is not an interfering context in SPARK
      [Ada] Fix link from body protected entry implementation to source code
      [Ada] Robust detection of access-to-subprogram and access-to-object types
      Detect illegal conditions in Raise_xxx_Error nodes
      [Ada] Robust switching from incomplete to access types
      [Ada] Replace repeated calls by references to a local object
      [Ada] Remove redundant guard from Find_Overlaid_Entity
      [Ada] Fix typos in comment about expansion of attribute Image
      [Ada] Fix detection of access-to-variable types
      [Ada] Enable removal of side-effects in component declarations
      [Ada] Reorder code for validity checks of unchecked conversions
      [Ada] Remove extra parens around a function call
      [Ada] Cleanup related to volatile objects in restricted contexts
      [Ada] Adapt Is_Actual_Parameter to also work for entry parameters
      [Ada] Fix typos in all occurrences of "occuring" in GNAT
      [Ada] Remove unused initialization with New_List
      [Ada] Fix aliasing check for actual parameters passed by reference
      [Ada] Cleanup repeated calls in Sloc_Range
      [Ada] Fix detection of volatile expressions in restricted contexts
      [Ada] Ignore volatile restrictions in preanalysis
      [Ada] Fix Is_Volatile_Function for functions declared in protected bodies
      [Ada] Reject allocators in contexts restricted by SPARK
      [Ada] Apply aliasing checks only to names and not to objects as actuals
      [Ada] Clarify error for unsupported ELIMINATED overflow mode
      [Ada] Use source casing in messages for aliasing checks
      [Ada] Cleanup redundant conditions in checks for overlapping actuals
      [Ada] Remove dead code for overlapping actuals and prefix notation
      [Ada] Fix handling of generic types in check for overlapping actuals
      [Ada] Check all pairs of actuals for overlapping
      [Ada] Fix detection of slices that denote the same object
      [Ada] Fix punctuation in documentation of warnings for aliasing actuals
      [Ada] Remove dubious wrapper of a recursive function
      [Ada] Don't check No_Wide_Characters restriction for illegal types
      [Ada] Fix detection of valid renamings for overlapping checks
      [Ada] Remove dead code for overlapping actuals in prefix notation
      [Ada] Fix asymmetries in detection of overlapping actuals
      [Ada] Reuse First_Actual in Address_Value
      [Ada] Warn about overlapping actuals in all versions of Ada
      [Ada] Reuse Package_Specification in Is_Incomplete_Or_Private_Type
      [Ada] Fix detection of overlapping actuals with renamings
      [Ada] Fix detection of overlapping slices indexed by characters
      [Ada] Fix detection of overlapping actuals with renamings
      [Ada] Simplify detection of statically overlapping slices
      [Ada] Skip overlay checks on protected components with expansion disabled
      [Ada] Disable wrong computation of offsets within multidimensional arrays
      [Ada] Fix unbalanced parens in documentation of Address clauses
      [Ada] Consistently use Validated_View for Valid_Scalars on records
      [Ada] Rewrite Validated_View in recursive style
      [Ada] Accept arrays and scalars as type views that can be validated
      [Ada] Simplify detection of local types
      [Ada] More robust guard against cascaded errors with overlapping actuals
      [Ada] Reuse Is_Subprogram_Or_Entry where possible
      [Ada] Remove redundant check for empty list
      [Ada] Fix style in Get_Fullest_View
      [Ada] Remove a special case for forking-for-expect from ordinary spawn
      [Ada] Remove an obsolete variant of Adjust_Name_Case used only by SPARK
      [Ada] Expose symmetry between Known_ and Unknown_ query routines
      [Ada] Cleanup checking for compatible alignment
      [Ada] Fix comment about the debug flag for strict alignment
      [Ada] Fix excessive check for alignment of overlaying objects
      [Ada] Simplify and reuse Is_Concurrent_Interface
      [Ada] Reject overlays in Global/Depends/Initializes contracts
      [Ada] Simplify dependency on System
      [Ada] Simplify unit loading with membership tests
      [Ada] Simplify returning from Enclosing_Comp_Unit_Node
      [Ada] Replace a question mark comment with assertion
      [Ada] Simplify code by removing local constant
      [Ada] Simplify iteration over pending instantiations
      [Ada] Tune discovery of No_Elaboration_Code restriction
      [Ada] Simplify handling of Generate_Code flag for compilation units
      [Ada] Replace chopped string copy with renaming
      [Ada] Replace low-level membership tests with Is_Private_Type
      [Ada] Simplify code by reusing List_Length
      [Ada] Reduce scope of local variables
      [Ada] Replace obsolete calls that use global name buffer
      [Ada] Use bounded string buffer in Get_Unit_Name
      [Ada] Fix location of errors about volatile compatibility
      [Ada] Simplify code by reusing Remove on list of primitive operations
      [Ada] Stronger assertion about flag for checking static expressions
      [Ada] Simplify string manipulation related to preprocessing
      [Ada] Avoid linear search when ensuring dependency on System
      [Ada] Prevent infinite recursion when there is no expected unit
      [Ada] Fix style in comments and code related to compilation units
      [Ada] Replace low-level condition with a high-level call
      [Ada] Restore context on failure in loading of renamed child unit
      [Ada] Remove redundant condition for listing compilation units
      [Ada] Simplify redundant checks for non-empty lists
      [Ada] Tune detection of illegal occurrences of target_name
      [Ada] Avoid unnecessary call in preanalysis without freezing
      [Ada] Remove an unnecessary local constant
      [Ada] Refine types of local variables in analysis of expression functions
      [Ada] Avoid repeated calls in analysis of expression functions
      [Ada] Fix comment related to analysis of expression functions
      [Ada] Avoid repeated computing of type of expression functions
      [Ada] Decouple analysis of static expression functions from GNATprove
      [Ada] Reorder preanalysis of static expression functions
      [Ada] Initialize local variables related to static expression functions
      [Ada] Fix typo in comment related to derived discriminated types
      [Ada] Fix style in expansion of attribute Put_Image
      [Ada] Avoid unnecessary work when expanding 'Image into 'Put_Image
      [Ada] Don't examine all discriminants when looking for the first one
      [Ada] Refine types of local constants that store Etype results
      [Ada] Fix repeated generation of dispatch tables in CodePeer mode
      [Ada] Minor style fixes in Resolve_Aspect_Aggregate
      [Ada] Accept volatile properties on constant objects
      [Ada] Cleanups related to building of dispatch tables
      [Ada] Accept volatile expressions as non-scalar actual parameters
      [Ada] Fix shadowing in conditions for inlining
      [Ada] Remove redundant checks for non-empty list of aspects
      [Ada] Simplify iteration when printing error message spans
      [Ada] Update comment for Error_Msg_Internal
      [Ada] Add Package_Body helper routine to be used in GNATprove
      [Ada] Reuse routines for detecting attributes Old and Result
      [Ada] Remove global parameter in Global contracts of Ada.Strings.Bounded
      [Ada] Remove Initializes contracts from Ada.Strings.Bounded
      [Ada] Tune detection of internally generated positional aggregates
      [Ada] Fix deleting CodePeer files for non-ordinary units
      [Ada] Fix handling of 'Image acting as a prefix of a slice in CodePeer
      [Ada] Fix missing check on slice with a subtype indication
      [Ada] Fix handling of slices with subtype names
      [Ada] Fix for a static Leading_Part attribute raising constraint error
      [Ada] Fix comment about expansion of slices
      [Ada] Remove repeated calls to Prefix in resolution of array accesses
      [Ada] Refactor duplicate code for pretty-printing GNAT AST
      [Ada] Fix indentation in generated AST construction functions
      [Ada] Document the current behaviour of -gnateA switch
      [Ada] Propagate Ghost status from parent to derived subprograms
      [Ada] Rewrite operator entity in derived class-wide expressions
      [Ada] Fix crash on array component with Default_Value
      [Ada] Simplify code for checks within an initialization procedure
      [Ada] Remove redundant guard against an empty component list
      [Ada] Simplify detection of record components with default initialization
      [Ada] Simplify detection of delayed aggregates
      [Ada] Simplify initialization of concurrent components
      [Ada] Move rewriting of boxes in aggregates from resolution to expansion
      [Ada] Rewrite extended names in derived class-wide expressions
      [Ada] Simplify membership tests with N_Generic_Declaration
      [Ada] Warn about conversion with any predefined time types
      [Ada] Remove redundant guard in expansion of dispatching calls
      [Ada] Prevent use of an uninitialized AST field with universal integer
      [Ada] Refine type of a counter function for record delta aggregate
      [Ada] Reject boxes in delta record aggregates
      [Ada] Don't expect enumeration literals to be renamings
      [Ada] Reference in Unbounded_String is almost never null
      [Ada] Do not expect execv to return 0
      [Ada] Remove redundant guard in expansion of dispatching calls
      [Ada] Simplify detection of a parent interface equality
      [Ada] Global contracts on expression functions in Ada.Strings.Superbounded
      [Ada] Update the inactive GMP variant of Big_Integers
      [Ada] Simplify iteration of record components when expanding equality
      [Ada] Guard against illegal items in Global but not Depends
      [Ada] Fix detection of array aggregates with single others associations
      [Ada] Tune comment about expansion of array equality
      [Ada] Reference in Unbounded_String is almost never null
      [Ada] Simplify expansion of array equality
      [Ada] Simplify building of entity occurrences
      [Ada] Refine type in expansion of array equality
      [Ada] Cleanup building of renamed equality
      [Ada] Cleanup copying of parameter lists
      [Ada] Use atomics in runtime on ARM and Aarch64 VxWorks
      [Ada] Extend optimized equality of 2-element arrays
      [Ada] Use predefined equality for arrays inside records
      [Ada] Don't carry action bodies for expansion of array equality
      [Ada] Fix comments about expansion of array equality
      [Ada] Cleanup listing of representation info
      [Ada] Simplify building of inequality function body
      [Ada] Document System.Atomic_Counters as supported on ARM and AARCH64
      [Ada] Whitespace cleanup in Makefile.rtl dependency rules
      [Ada] Sort list of Ada runtime units in Makefile.rtl
      [Ada] Sync whitespace between variants of Indefinite_Holders unit
      [Ada] Replace low-level detection of subprograms with high-level wrapper
      [Ada] Tune whitespace of the bounded lists Aggregate aspect
      [Ada] More intuitive names in sanity-checking of derived types
      [Ada] Add contract to Ada.Task_Identification.Activation_Is_Complete
      [Ada] Remove duplicated condition in warnings about read-before-write
      [Ada] Refactor nested loops in warning on unassigned out parameter
      [Ada] Simplify iteration over record components
      [Ada] Remove extra space after assignment symbol
      [Ada] Split spec and body of expression function with Subprogram_Variant
      [Ada] Separate building of equality from other dispatching routines
      [Ada] Enable expansion of dispatching equality for GNATprove
      [Ada] Inline all calls in Ada.Task_Identification
      [Ada] Cleanups related to expansion of dispatching primitives
      [Ada] Cleanup insertion of single freezing actions
      [Ada] Cleanup detection of suspension objects
      [Ada] Deconstruct dead wrappers added for external axiomatization
      [Ada] Fix sharing of formal parameters between wrapper spec and body
      [Ada] Remove redundant code related to instances with formal subprograms
      [Ada] Simplify making of null procedure wrappers
      [Ada] Remove unnecessary check for missing parameter specifications
      [Ada] Simplify handling of user-defined numeric literals
      [Ada] Fix layout of parameters in calls to Predef_Spec_Or_Body
      [Ada] Remove extra space in parameter associations
      [Ada] Align arrows in parameter associations
      [Ada] Remove explicit "in" in internal parameter association
      [Ada] Remove extra whitespace in declarations and parameters lists
      [Ada] Simplify calls to Name_Find with known string parameter
      [Ada] Use Add_Char_To_Name_Buffer for 1-character strings
      [Ada] Expand controlling functions wrappers in GNATprove mode
      [Ada] Expand controlling function wrapper into expression function
      [Ada] Simplify detection of alphabetic characters with membership test
      [Ada] Simplify GNAT AST printing with simple GNAT hash table
      [Ada] Simplify repeated calls in printing of GNAT AST
      [Ada] Suppress spurious CodePeer check on generic actual subprogram
      [Ada] Remove duplicates of empty strings
      [Ada] Fix style in calls to Compile_Time_Constraint_Error
      [Ada] Refactor repeated implicit conversion from Char_Code to Uint
      [Ada] Simplify type conversions in source pointer arithmetic
      [Ada] Fix style in comments about warning messages
      [Ada] Remove unreferenced Warn_On_Instance
      [Ada] Remove unnecessary guards for non-empty lists
      [Ada] Move messages on division by zero to the right operand
      [Ada] Remove a locally handled exception
      [Ada] Simplify traversal for removing warnings from dead code
      [Ada] Remove unnecessary declare block
      [Ada] Remove unnecessary guards for appending non-empty lists
      [Ada] Remove unnecessary guard for inserting non-empty list
      [Ada] Consistent suppression for warnings inside null loops
      [Ada] Fix inconsistent quoting in messages about compile-time errors
      [Ada] Fix comment about subprogram unnesting and unconstrained arrays
      [Ada] Remove explicit expansion of block with general case statement
      [Ada] Remove extra space before THEN keywords
      [Ada] Simplify traversal in hooking of transient scopes
      [Ada] Remove repeated routines for printing AST in Mixed_Case
      [Ada] More default initialization for multi-dim array aggregates
      [Ada] Fix style in expansion of multi-dimensional array aggregates
      [Ada] Fix layout of pragma Inline in generated AST unit
      [Ada] Switch from __sync to __atomic builtins for atomic counters
      [Ada] Fix typo in comment about unit families
      [Ada] Disable expansion of pragma Loop_Variant in CodePeer mode
      [Ada] Remove CodePeer annotations for pragma Loop_Variant
      [Ada] Switch from __sync to __atomic builtins for Lock_Free_Try_Write
      [Ada] Use atomic builtins for atomic counters on x86 (32bit)
      [Ada] Escalate pre-continuation messages from warnings to errors
      [Ada] Remove warnings-as-errors about constraints error in dead code
      [Ada] Remove extra space in single object declarations
      [Ada] Tune inconsistent message about fixed-lower-bound and -gnatX
      [Ada] Remove redundant initialization of Test_And_Set_Flag object
      [Ada] Simplify construction of messages about configurable runtime
      [Ada] Reuse Make_Temporary where possible
      [Ada] Remove unnecessary block in code for expansion of allocators
      [Ada] Deconstruct a VMS utility routine which is only used by GNATprove
      [Ada] Remove unreferenced name constants
      [Ada] Balance parentheses in comments about allocators
      [Ada] Reduce scope of declare block in analysis of allocators
      [Ada] Remove name constant used by GNATprove but not by GNAT
      [Ada] Avoid redundant checks for empty lists
      [Ada] Remove unreferenced CCG-specific routine Insert_Declaration

Prathamesh Kulkarni (4):
      Fix typo in builtins.c.
      arm/97903: Missed optimization in lowering test operation.
      [aarch64] PR102376 - Emit better diagnostic for arch extensions in target attr.
      [tree-vectorizer.c] Merge pass_vectorize::execute with vectorize_loops and replace occurences of cfun with function param.

Przemyslaw Wirkus (12):
      arm: Enable Cortex-R52+ CPU
      aarch64: add armv9-a to -march
      aarch64: fix AARCH64_FL_V9 flag value
      aarch64: enable cortex-a510 CPU
      aarch64: enable cortex-a710 CPU
      aarch64: enable cortex-x2 CPU
      arm: add armv9-a architecture to -march
      arm: enable cortex-a710 CPU
      aarch64: Add new vector mode V8DI
      aarch64: Add LS64 extension and intrinsics
      aarch64: fix: ls64 tests fail on aarch64_be [PR103729]
      arm: remove unnecessary armv9-a multilib variant [PR104144]

Qian Jianhua (3):
      Avoid a warning of overflow
      print-tree:Avoid warnings of overflow
      MAINTAINERS: Update my email address

Qing Zhao (8):
      Apply pattern initialization only when have_insn_for return true.
      Change the 3rd parameter of function .DEFERRED_INIT from IS_VLA to decl name.
      Enable -Wuninitialized + -ftrivial-auto-var-init for address taken variables.
      middle-end: updating the reg use in exit block for -fzero-call-used-regs [PR100775]
      Suppress uninitialized warnings for new created uses from __builtin_clear_padding folding [PR104550]
      Don't emit switch-unreachable warnings for -ftrivial-auto-var-init (PR102276)
      Add an assertion: the zeroed_hardregs set is a subset of all call used regs.
      i386: Adjust -fzero-call-used-regs to always use XOR [PR101891]

Rainer Orth (11):
      testsuite: i386: Use -fomit-frame-pointer for gcc.target/i386/pr100704-1.c etc.
      libstdc++: Fix 17_intro/names.cc on Solaris
      libstdc++: Fix 28_regex/basic_regex/84110.cc on Solaris
      testsuite: i386: Fix gcc.target/i386/pieces-memset-1.c etc. on Solaris [PR102836]
      testsuite: i386: Fix gcc.target/i386/avx512fp16-trunchf.c on Solaris [PR102835]
      testsuite: i386: Fix gcc.target/i386/avx512f-pr96891-3.c on Solaris [PR102834]
      testsuite: i386: Require dfp in gcc.target/i386/pr101346.c
      libffi: Use #define instead of .macro in  src/x86/win64.S [PR102874]
      libphobos: Enable on Solaris/SPARC or with /bin/as [PR 103528]
      doc: Document Solaris D bootstrap requirements [PR 103528]
      libstdc++: Update Solaris baselines for GCC 12.1

Raoni Fassina Firmino (2):
      rtl: builtins: (not just) rs6000: Add builtins for fegetround, feclearexcept and feraiseexcept [PR94193]
      rtl: builtins: Fix builtins feclearexcept and feraiseexcept operand check [PR94193]

Raphael Moreira Zinsly (2):
      libgcc: Add a backchain fallback to _Unwind_Backtrace() on PowerPC
      libgcc: Fix backtrace fallback on PowerPC Big-endian

Rasmus Villemoes (9):
      gcc: vx-common.h: fix test for VxWorks7
      libstdc++: only define _GLIBCXX_HAVE_TLS for VxWorks >= 6.6
      libgcc: remove crt{begin,end}.o from powerpc-wrs-vxworks target
      libgcc: vxcrtstuff.c: add a few undefs
      fix spelling of -linker-output-auto-nolto-rel
      Replace t-ppccomm by t-vxworks in libgcc/config/rs6000
      libgcc: vxcrtstuff.c: remove ctor/dtor declarations
      libgcc: vxcrtstuff.c: make ctor/dtor functions static
      libstdc++: vxworks: remove stray <iostream> include

Richard Biener (493):
      Remove pedantic_non_lvalue_loc
      Simplify maybe_fold_reference API
      testsuite/100176 - fix struct-layout-1_generate.c compile
      Avoid -latomic for amdgcn offloading
      testsuite/100176 - fix struct-layout-1_generate.c compile
      tree-optimization/99971 - improve BB vect dependence analysis
      Avoid more temporaries in IVOPTs
      tree-optimization/100222 - remove redundant mark_irreducible_loops calls
      First do add_noreturn_fake_exit_edges in connect_infinite_loops_to_exit
      VEC_COND_EXPR code cleanup
      Simplify {gimplify_and_,}update_call_from_tree API
      tree-optimization/99473 - more cselim
      Remove gimplify_buildN API use from phiopt
      Remove gimplify_buildN API use from complex lowering
      Move gimplify_buildN API local to only remaining user
      tree-optimization/99956 - improve loop interchange
      tree-optimization/99776 - relax condition on vector ctor element extract
      tree-optimization/100278 - handle mismatched code in TBAA adjust of PRE
      testsuite/100272 - fix some malformed dg directives
      testsuite/100272 - undo PRE disabling for gcc.dg/tree-ssa/predcom-1.c
      tree-optimization/100051 - disambiguate access size vs decl
      tree-optimization/99912 - schedule DSE before SRA
      tree-optimization/99912 - schedule another TODO_remove_unused_locals
      tree-optimization/100292 - avoid invalid GIMPLE from vector lowering
      ipa/100308 - properly update the callgraph when pruning EH in IPA CP
      tree-optimization/99912 - delete trivially dead stmts during DSE
      middle-end/38474 - speedup PTA constraint solving
      tree-optimization/100253 - fix bogus aligned vectorized loads/stores
      tree-optimization/96513 - add testcase for fixed bug
      c++/98032 - add testcase
      Perform reverse program order walk for GIMPLE DSE
      Improve PHI handling in DSE
      tree-optimization/100398 - avoid DSE of control flow stmt
      tree-optimization/100329 - avoid reassociating asm goto defs
      Restrict gcc.dg/tree-ssa/ssa-dse-26.c
      tree-optimization/100414 - compute dominance info in phiopt
      middle-end/100394 - avoid DSE/DCE of pure call that throws
      tree-optimization/79333 - fold stmts following SSA edges in VN
      ipa/100373 - fix emutls lowering compare-debug issue
      Fix IPA SRA removal of DECL_BY_REFERENCE return
      Avoid update_ssa quadraticness in loop splitting
      refactor SSA rewriting timevars
      tree-optimization/100434 - DSE aggregate call LHS
      middle-end/100464 - avoid spurious TREE_ADDRESSABLE in folding debug stmts
      tree-optimization/100492 - avoid irreducible regions in loop distribution
      testsuite/100452 - fix g++.dg/vect/slp-pr99971.cc
      middle-end/100509 - avoid folding constant to aggregate type
      More maybe_fold_reference TLC
      ipa/100513 - fix SSA_NAME_DEF_STMT corruption in IPA param manip
      More maybe_fold_reference TLC
      middle-end/100547 - check rtvec_alloc size
      tree-optimization/100519 - avoid reassociating asm goto defs
      tree-optimization/100566 - fix another predication issue in VN
      Revert "download_prerequisites: update MPFR version to recommended"
      Update mpfr version to 3.1.6
      middle-end/100582 - fix array_at_struct_end_p for vector indexing
      c/100625 - avoid building invalid labels in the GIMPLE FE
      c/100547 - reject overly large vector_size attributes
      c/100522 - avoid invalid GIMPLE in GIMPLE parsing
      Fix gcc.target/i386/pr100582.c with AVX512
      operand scanner TLC
      Avoid setting TREE_ADDRESSABLE on stack vars during RTL expansion
      apply TLC to GIMPLE reference verification
      Enable more WITH_SIZE_EXPR processing
      Avoid marking TARGET_MEM_REF bases addressable
      middle-end/100672 - fix bogus right shift folding
      middle-end/100727 - fix call expansion with WITH_SIZE_EXPR arg
      libgomp/100747 - fix permission of configure scripts
      c/100803 - diagnose invalid GIMPLE condition
      ipa/100791 - copy fntype when processing __builtin_va_arg_pack
      tree-optimization/100778 - avoid cross-BB vectorization of trapping op
      c++/88601 - [C/C++] __builtin_shufflevector support
      middle-end/100951 - make sure to generate VECTOR_CST in lowering
      Make SLP root stmt a vector
      tree-optimization/100923 - fix alias-ref construction wrt availability
      Simplify vect_is_simple_use
      tree-optimization/97832 - handle associatable chains in SLP discovery
      tree-optimization/100981 - fix SLP patterns involving reductions
      tree-optimization/101003 - use pattern defs when linearizing
      Expose stable sort algorithm to gcc_sort_r and add vec::stablesort
      Use stablesort for sorting association chain
      middle-end/101009 - fix distance vector recording
      tree-optimization/101026 - fix SLP re-association
      tree-optimization/101028 - fix endless SLP reassoc discovery
      tree-optimization/101025 - fix store-motion dependence checking
      tree-optimization/101031 - fix strlen opt invalidation logic
      tree-optimization/100934 - properly mark irreducible regions for DOM
      Assert we have irreducible regions marked in the threader
      Handle multiple latches in irreducible region mark
      tree-optimization/101083 - fix ICE with SLP reassoc
      tree-optimization/101088 - fix SM invalidation issue
      Vectorization of BB reductions
      tree-optimization/101112 - fix pattern stmt def lookup in SLP reassoc
      tree-optimization/101121 - avoid infinite SLP build
      tree-optimization/101120 - fix compile-time issue with SLP groups
      tree-optimization/101154 - fix out-of bound access in SLP
      tree-optimization/101159 - fix missing NULL check in popcount pattern
      tree-optimization/101158 - adjust SLP call matching sequence
      tree-optimization/101151 - fix irreducible region check for sinking
      middle-end/101156 - remove not working optimization in gimplification
      tree-optimization/101105 - fix runtime alias test optimization
      refactor SLP permute propagation
      Fix SLP permute propagation error
      Add x86 addsub SLP pattern
      Merge vec_addsub patterns
      add -ltrans-objects lto-plugin debug option
      Fixup reduction info on addsub SLP pattern
      tree-optimization/101202 - fix ICE with failed backedge SLP nodes
      tree-optimization/101173 - fix interchange dependence checking
      tree-optimization/101207 - fix BB reduc permute elide with life stmts
      tree-optimization/101229 - fix vectorizer SLP hybrid detection with PHIs
      tree-optimization/101242 - fix reverse graph entry detection
      Refactor SLP permute opt propagation
      Add forward propagation to SLP "any" permutes
      tree-optimization/101264 - rework SLP "any" permute forward prop
      tree-optimization/101267 - fix SLP vect with masked operations
      tree-optimization/101178 - handle VEC_PERM in SLP permute propagation
      tree-optimization/100778 - fix placement of trapping vectorized ops
      tree-optimization/101278 - handle self-use in DSE analysis
      tree-optimization/101280 - revise interchange fix for PR101173
      tree-optimization/101280 - re-revise interchange fix for PR101173
      tree-optimization/101293 - further enhance LIMs ref canonicalization
      testsuite/101299 - add missing vect_double requires to bb-slp-74.c
      middle-end/101291 - set loop copy of versioned loop
      Do not set both LOOP_C_INFINITE and LOOP_C_FINITE on vectorized loop
      add -fmove-loop-stores option to control GIMPLE loop store-motion
      Add FMADDSUB and FMSUBADD SLP vectorization patterns and optabs
      tree-optimization/99728 - improve LIM for loops with aggregate copies
      tree-optimization/34195 - testcase for fixed vectorization
      middle-end/101423 - internal calls do not trap
      tree-optimization/101394 - fix PRE full redundancy wrt abnormals
      Display the number of components BB vectorized
      tree-optimization/101373 - avoid PRE across externally throwing call
      produce simple DOT graphs from SLP trees
      Revert "Display the number of components BB vectorized"
      Support reduction def re-use for epilogue with different vector size
      tree-optimization/101445 - fix negative stride SLP vect with gaps
      driver/101383 - handle -gtoggle in driver
      Streamline vect_gen_while
      Disable --param vect-partial-vector-usage by default on x86
      tree-optimization/101462 - fix signedness of reused reduction vector
      tree-optimization/101467 - fix make_temp_ssa_name usage
      Get rid of some gimple_expr_type uses
      Remove more gimple_expr_type uses
      Remove gimple_expr_type uses from value-range code
      Remove last gimple_expr_type uses
      Remove gimple_expr_type
      tree-optimization/101505 - properly determine stmt precision for PHIs
      debug/101473 - apply debug prefix maps before checksumming DIEs
      tree-optimization/39821 - fix cost classification for widening arith
      tree-optimization/101573 - improve uninit warning at -O0
      tree-optimization/101615 - SLP permute opt of existing vectors
      tree-optimization/101615 - SLP permute opt with CTOR roots
      c/101512 - fix missing address-taking in c_common_mark_addressable_vec
      tree-optimization/101769 - tail recursion creates possibly infinite loop
      tree-optimization/101756 - avoid vectorizing boolean MAX reductions
      Rewrite more vector loads to scalar loads
      Add emulated gather capability to the vectorizer
      Adjust gcc.dg/vect/bb-slp-pr101756.c
      Fixup gfortran.dg/vect/vect-8.f90 for aarch64
      tree-optimization/101801 - remove vect_worthwhile_without_simd_p
      middle-end/101824 - properly handle volatiles in nested fn lowering
      tree-optimization/101801 - rework generic vector vectorization more
      tree-optimization/101809 - support emulated gather for double[int]
      tree-optimization/101861 - fix gather use for non-gather refs
      middle-end/101858 - avoid shift of pointer in folding
      Adjust volatile handling of the operand scanner
      target/101788 - avoid decomposing hard-register "loads"
      Fix gcc.dg/lto/pr48622_0.c testcase
      tree-optimization/101925 - fix VN with reverse storage order
      tree-optimization/101868 - avoid PRE of trapping mems across calls
      Fall back to masked_gather_load/masked_scatter_store
      Refactor BB splitting of DRs for SLP group analysis
      tree-optimization/79334 - avoid PRE of possibly trapping array-ref
      Fix scalar costing issue introduced by PR84512 fix.
      ipa/97565 - fix IPA PTA body availability check
      Adjust inner loop cost scaling
      tree-optimization/100089 - avoid leaving scalar if-converted code around
      tree-optimization/102046 - fix SLP build from scalars with patterns
      tree-optimization/45178 - DCE of dead control flow in infinite loop
      Make sure -fexceptions is enabled when -fnon-call-exceptions is
      tree-optimization/102128 - rework if-converted BB vect heuristic
      middle-end/102129 - avoid TER of possibly trapping expressions
      tree-optimization/102142 - fix typo in loop BB reduc cost adjustment
      tree-optimization/102149 - add testcase for fixed bug
      tree-optimization/102139 - fix SLP DR base alignment
      tree-optimization/93491 - avoid PRE of trapping calls across exits
      tree-optimization/102155 - fix LIM fill_always_executed_in CFG walk
      Revert "tree-optimization/102155 - fix LIM fill_always_executed_in CFG walk"
      Refine fix for PR78185, improve LIM for code after inner loops
      tree-optimization/102176 - locally compute participating SLP stmts
      tree-optimization/101555 - avoid redundant alias queries in PRE
      tree-optimization/102226 - fix epilogue vector re-use
      c++/102228 - make lookup_anon_field O(1)
      Avoid full DOM walk in LIM fill_always_executed_in
      Improve LIM fill_always_executed_in computation
      Remove dbx.h, do not set PREFERRED_DEBUGGING_TYPE from dbxcoff.h, lynx.h
      Remove vestiges of --with-stabs
      middle-end/102269 - avoid auto-init of empty types
      middle-end/102273 - avoid ICE with auto-init and nested functions
      Always default to DWARF2 debug for cygwin and mingw
      Default Alpha/VMS to DWARF2 debugging only
      Always default to DWARF2 debugging for RX, even with -mas100-syntax
      Default AVR to DWARF2 debug
      Add cr16-*-* to the list of obsoleted targets
      Fix i686-lynx build breakage
      Remove DARWIN_PREFER_DWARF and dead code
      Remove m68k-openbsd support
      Remove support for vax-openbsd
      tree-optimization/102318 - reduction epilogue re-use
      Maintain (mis-)alignment info in the first element of a group
      target/102348 - fix powerpc-lynxos build
      middle-end/102360 - adjust .DEFERRED_INIT expansion
      Revert no longer needed fix for PR95539
      tree-optimization/65206 - dependence analysis on mixed pointer/array
      Obsolete hppa[12]*-*-hpux10* and hppa[12]*-*-hpux11*
      vect alignmet enhance TLC
      Avoid premature alignment setting in vect_duplicate_ssa_name_ptr_info
      Use the proper vectype
      tree-optimization/102421 - copy alignment info when splitting groups
      tree-optimization/102448 - clear copied alignment info from vect
      Verify unallocated edge/BB flags are clear
      Allow different vector types for stmt groups
      middle-end/102450 - avoid type_for_size for non-existing modes
      Fix gcc.dg/vect/bb-slp-pr65935.c FAIL with AVX after recent change
      Fix gcc.target/i386/vect-pr97352.c for -m32 -march=cascadelake
      tree-optimization/100112 - VN last_vuse and redundant store elimination
      tree-optimization/99793 - testcase for the PR
      Avoid memcpy inline expansion in gcc.dg/out-of-bounds-1.c
      Fix peeling for alignment with negative step
      testsuite/102517 - fix FAIL of gcc.dg/pr78408-1.c with OImode availability
      Fix thinko in previous alignment peeling change
      Refine alingment peeling fix
      middle-end/102518 - avoid invalid GIMPLE during inlining
      middle-end/102587 - avoid auto-init for VLA vectors
      tree-optimization/102570 - teach VN about internal functions
      middle-end/102285 - refine .DEFERRED_INIT expansion
      avoid hardreg autoinit
      Adjust gfortran.dg/predict-2.f90
      More .DEFERRED_INIT expansion rework
      Amend function names with UID when dumping with TDF_UID
      Make flow of option processing more readily visible
      Allow more kinds of invariant addresses in GIMPLE FE
      More consistently dump GIMPLE FE consumable stmts
      Properly parse invariant &MEM addresses in the GIMPLE FE
      tree-optimization/102608 - avoid CSEing .DEFERRED_INIT
      middle-end/101480 - overloaded global new/delete
      middle-end/102683 - fix .DEFERRED_INIT expansion
      tree-optimization/102572 - fix gathers with invariant mask
      tree-optimization/102696 - fix SLP discovery for failed BIT_FIELD_REF
      ipa/102714 - IPA SRA eliding volatile
      tree-optimization/102659 - avoid undefined overflow after if-conversion
      Add GSI_LAST_NEW_STMT iterator update
      tree-optimization/102659 - really avoid undef overflow in if-conversion
      middle-end/102682 - avoid invalid subreg on the LHS
      ipa/102762 - fix ICE with invalid __builtin_va_arg_pack () use
      c/102763 - fix ICE with invalid input to GIMPLE FE
      Always default to DWARF2_DEBUG if not specified, warn about deprecated STABS
      tree-optimization/102798 - avoid copying PTA info to old SSA names
      tree-optimization/102788 - avoid spurious bool pattern fails
      Remove redundant alignment scheme recomputation
      Reduce the number of aligned_access_p calls
      Apply TLC to vect_supportable_dr_alignment
      Remove check_aligned parameter from vect_supportable_dr_alignment
      Add misalignment output parameter to get_load_store_type
      tree-optimization/102827 - avoid stmts in preheader
      Compute negative offset in get_load_store_type
      Refactor load/store costing
      Refactor vect_supportable_dr_alignment
      tree-optimization/102853 - avoid trapping types in split_constant_offset
      testsuite/102861 - adjust gcc.dg/vect/bb-slp-16.c change
      Remove restriction of SLP vectorizing internal function calls
      tree-optimization/102847 - properly cost VMAT_INVARIANT loads
      tree-optimization/102847 - adjust VMAT_INVARIANT load costing
      Move the initial debug_hooks setting
      bootstrap/102681 - properly CSE PHIs with default def args
      tree-optimization/102893 - properly DCE empty loops inside infinite loops
      tree-optimization/102920 - fix PHI VN with undefined args
      tree-optimization/102905 - restore re-align load for alignment peeling
      Turn vect_create_addr_base_for_vector_ref offset into a byte offset
      Move negative stride bias out of dr_misalignment
      Unify offset and byte_offset for vect_create_addr_base_for_vector_ref
      Refactor try_vectorize_loop_1
      tree-optimization/102949 - fix base object alignment
      middle-end/57245 - honor -frounding-math in real truncation
      middle-end/84407 - honor -frounding-math for int to float conversion
      Force -fexcess-precision=standard for fp-uint64-convert-double-1.c
      middle-end/103038 - avoid ICE with -ftrivial-auto-var-init=pattern
      tree-optimization/103029 - ensure vect loop versioning constraint on PHIs
      middle-end/103033 - drop native_interpret_expr with .DEFERRED_INIT expansion
      Make sbitmap bitmap_set_bit and bitmap_clear_bit return changed state
      tree-optimization/102970 - remap cliques when translating over backedges
      Update TARGET_MEM_REF documentation
      VN/PRE TLC
      rtl-optimization/103075 - avoid ICEing on unfolded int-to-float converts
      First refactor of vect_analyze_loop
      Split vector loop analysis into main and epilogue analysis
      Amend split vector loop analysis into main and epilogue analysis
      tree-optimization/103102 - fix error in vectorizer refactoring
      Fix spurious valgrind errors in irred loop verification
      testsuite/102690 - XFAIL g++.dg/warn/Warray-bounds-16.C
      Apply TLC to control dependence compute
      Remove find_pdom and find_dom
      middle-end/103181 - fix operation_could_trap_p for vector division
      tree-optimization/103188 - avoid running ranger on not-up-to-date SSA
      tree-optimization/103190 - fix assert in reassoc stmt placement with asm
      tree-optimization/103204 - fix missed valueization in VN
      tree-optimization/103219 - avoid ICE in unroll-and-jam
      tree-optimization/103237 - avoid vectorizing unhandled double reductions
      tree-optimization/102880 - make PHI-OPT recognize more CFGs
      tree-optimization/102880 - improve CD-DCE
      tree-optimization/103277 - do abnormal cleanup after call DSE
      testsuite/103278 - adjust gcc.dg/tree-ssa/if-to-switch-3.c
      tree-optimization/102436 - restore loop store motion
      middle-end/103248 - fix RDIV_EXPR handling with fixed point
      c++/103326 - fix ICE in tsubst with VECTOR_CST
      tree-optimization/103351 - avoid compare-debug issue wrt CD-DCE change
      tree-optimization/103361 - fix unroll-and-jam direction vector handling
      Avoid redundant get_loop_body calls in IVOPTs
      middle-end/103193 - avoid canonicalizing <= and >= to == for floats
      tree-optimization/103168 - Improve VN of pure function calls
      Introduce REG_SET_EMPTY_P
      Remove never looping loop in label_rtx_for_bb
      Continue RTL verifying in rtl_verify_fallthru
      Remove dead code and function
      Restore can_be_invalidated_p semantics to before refactoring
      tree-optimization/103458 - avoid creating new loops in CD-DCE
      Remove unreachable returns
      Remove unreachable gcc_unreachable () at the end of functions
      Fix RTL FE issue with premature return
      Avoid some -Wunreachable-code-ctrl
      middle-end/103485 - fix conversion kind for vectors
      Only return after resetting type_param_spec_list
      tree-optimization/103489 - fix ICE when bool pattern recog fails
      Remove more stray returns and gcc_unreachable ()s
      Add comment to indicate tail recursion
      tree-optimization/103527 - always use thruth type forgather mask
      middle-end/103271 - avoid VLA init of register
      tree-optimization/103544 - SLP reduction chain as SLP reduction issue
      tree-optimization/103581 - fix masked gather on x86
      tree-optimization/103596 - fix missed propagation into switches
      Add testcase for PR103615
      tree-optimization/66502 - add testcase
      middle-end/103851 - ensure SSA names are released during OMP lowering
      tree-optimization/103864 - SLP reduction of reductions with conversions
      tree-optimization/103690 - not up-to-date SSA and PRE DCE
      tree-optimization/103800 - sanity check more PHI vectorization
      tree-optimization/103816 - detect offset overflow in SLP group analysis
      tree-optimization/100359 - restore unroll at -O3
      middle-end/101530 - fix shufflevector lowering
      tree-optimization/76174 - testcase for fixed PR
      tree-optimization/103990 - fix CFG cleanup regression from PRE change
      c/104002 - shufflevector variable indexing
      Bump gcc/BASE-VER to 12.0.1 now that we are in stage4.
      middle-end/101292 - invalid memory access with warning control
      tree-optimization/104064 - UBSAN issue in vect dataref analysis
      pack fields in cgraph_simd_clone_arg and struct function
      pack fields in line-map data structures
      tree-optimization/103987 - guard DSE modref query
      ipa/103989 - tame IPA optimizations at -Og
      ipa/103989 - avoid IPA inlining of small functions with -Og
      testsuite/102833 - fix gcc.dg/vect/bb-slp-17.c dump scanning
      tree-optimization/104112 - add check for vect epilogue reduc reuse
      tree-optimization/104114 - avoid diagnosing V1mode lowering
      target/100784 - avoid ICE with folding __builtin_ia32_shufpd
      middle-end/100786 - constant folding from incompatible alias
      tree-optimization/104152 - add missing check for SLP constant build
      tree-optimization/104156 - fix unswitching compare-debug issue
      sanitizer/99673 - bad -Wstringop-overread diagnostic with asan
      tree-optimization/100089 - BB vectorization of if-converted loop bodies
      tree-optimization/102131 - fix niter analysis wrt overflow
      tree-optimization/104214 - amend PR100740 fix for pointer compares
      Make graph dumping work for fn != cfun
      tree-optimization/104263 - avoid retaining abnormal edges for non-call/goto stmts
      tree-optimization/104267 - fix external def vector type for call args
      Reduce multiple_of_p uses
      Fix multiple_of_p behavior with NOP_EXPR
      debug/104337 - avoid messing with the abstract origin chain in NRV
      Add CLOBBER_EOL to mark storage end-of-life clobbers
      tree-optimization/103641 - improve vect_synth_mult_by_constant
      Adjust LSHIFT_EXPR handling of multiple_of_p
      tree-optimization/100499 - niter analysis and multiple_of_p
      middle-end/104402 - split out _Complex compares from COND_EXPRs
      target/104453 - guard call folding with NULL LHS
      middle-end/104450 - ISEL and non-call EH
      tree-optimization/104445 - check for vector extraction support
      middle-end/104464 - ISEL and non-call EH #2
      tree-optimization/104466 - fix cut&paste error perventing alias disambiguation
      middle-end/104467 - fix vector extract simplification
      tree-optimization/104373 - early diagnostic on unreachable code
      middle-end/104496 - fix vectorized_internal_fn_supported_p
      [gimplefe] Add vector_mask attribute to get access to vector bools
      middle-end/104497 - gimplification of vector indexing
      c/104505 - ICE with internal function call in diagnostic expression
      tree-optimization/104511 - avoid FP to DFP conversion for VEC_PACK_TRUNC
      tree-optimization/104528 - free niter estimates after DSE
      tree-optimization/104519 - adjust PR100499 niter fix
      tree-optimization/104543 - fix unroll-and-jam precondition
      tree-optimization/96881 - CD-DCE and CLOBBERs
      target/104581 - compile-time regression in mode-switching
      tree-optimization/104582 - Simplify vectorizer cost API and fixes
      tree-optimization/104582 - make SLP node available in vector cost hook
      target/99881 - x86 vector cost of CTOR from integer regs
      Dump def that we use for a splat
      tree-optimization/101636 - CTOR vectorization ICE
      Support SSA name declarations with pointer type
      middle-end/104644 - recursion with bswap match.pd pattern
      tree-optimization/104676 - free nb_iterations after loop distribution
      tree-optimization/103037 - PRE simplifying valueized expressions
      rtl-optimization/104686 - speed up conflict iteration
      tree-optimization/104700 - adjust constant handling in PRE
      Simplify PRE fix
      testsuite/104728 - constrain gcc.dg/vect/pr81196-2.c
      testsuite/104727 - remove XFAIL for gcc.target/i386/pr84101.c
      tree-optimization/104716 - check if we can copy loop in loop distribution
      rtl-optimization/104686 - speedup IRA allocno conflict test
      tree-optimization/104782 - adjust PR101636 fix
      tree-optimization/104825 - guard modref query
      tree-optimization/84201 - add --param vect-induction-float
      middle-end/104786 - ICE with asm and VLA
      testsuite/104759 - adjust gcc.dg/vect/vect-multitypes-12.c
      Restore INDIRECT_REF asm operand heuristic with MEM_REF
      tree-optimization/102943 - avoid (re-)computing dominance bitmap
      ada/104861 - use target_noncanonial for Target_Name
      tree-optimization/102943 - use tree form for sbr_sparse_bitmap
      target/104762 - vectorization costs of CONSTRUCTORs
      tree-optimization/104880 - update-address-taken and cmpxchg
      tree-optimization/102008 - restore if-conversion of adjacent loads
      tree-optimization/104960 - unsplit edges after late sinking
      Dump when estimating the number of iterations of a loop
      tree-optimization/105012 - fix ICE from local DSE of if-conversion
      rtl-optimization/105028 - fix compile-time hog in form_threads_from_copies
      target/102125 - alternative memcpy folding improvement
      Fix memory leaks
      middle-end/105049 - fix uniform_vector_p and vector CTOR gimplification
      tree-optimization/105053 - fix reduction chain epilogue generation
      add missing dg-require alias to gcc.dg/torture/pr100786.c
      tree-optimization/105070 - annotate bit cluster tests with locations
      tree-optimization/105080 - make sure SCEV is available for ranger
      Revert "gimple: allow more folding of memcpy [PR102125]"
      rtl-optimization/105091 - wrong DSE with missed TREE_ADDRESSABLE
      tree-optimization/105109 - bogus uninit diagnostic with _Complex
      middle-end/105140 - fix bogus recursion in fold_convertible_p
      tree-optimization/105132 - add missing checking in vectorizable_operation
      c/105151 - move early walloca pass
      testsuite/105122 - adjust testcases after memcpy folding changes
      tree-optimization/105142 - wrong code with maybe_fold_{and,or}_comparisons
      tree-optimization/105148 - fix IVOPTs recording uses
      tree-optimization/105163 - abnormal SSA coalescing and reassoc
      ipa/105166 - avoid modref queries with mismatching types
      tree-optimization/105173 - fix insertion logic in reassoc
      middle-end/105165 - sorry instead of ICE for _Complex asm goto
      tree-optimization/105185 - simplify modref query in SCCVN
      ipa/104303 - miscompilation of gnatmake
      tree-optimization/105175 - avoid -Wvector-operation-performance
      tree-optimization/105198 - wrong code with predictive commoning
      tree-optimization/105226 - avoid splitting abnormal edges
      tree-optimization/105232 - handle overly large sizes in component_ref_size
      tree-optimization/105235 - clean EH in execute_cse_conv_1
      ipa/104303 - revert overly conservative DCE change
      tree-optimization/104912 - ensure cost model is checked first
      Revert "tree-optimization/104912 - ensure cost model is checked first"
      tree-optimization/105250 - adjust fold_convertible_p PR105140 fix
      middle-end/105259 - adjust gcc.target/i386/auto-init-4.c
      tree-optimization/105263 - reassoc and DFP
      tree-optimization/104880 - move testcase
      tree-optimization/104010 - fix SLP scalar costing with patterns
      tree-optimization/105312 - fix ISEL VCOND expansion
      tree-optimization/104912 - ensure cost model is checked first
      rtl-optimization/105231 - distribute_notes and REG_EH_REGION
      tree-optimization/100810 - avoid undefs in IVOPT rewrites
      tree-optimization/105368 - avoid overflow in powi_cost
      middle-end/104492 - avoid all equality compare dangling pointer diags
      tree-optimization/105219 - bogus max iters for vectorized epilogue
      tree-optimization/105394 - vector lowering of compares
      tree-optimization/105437 - BB vect with extern defs of throwing stmts
      Fixup OPTION_SET_P usage in finish_options
      middle-end/105461 - opts processing of -fvar-tracking
      tree-optimization/105484 - VEC_SET and EH
      middle-end/105376 - invalid REAL_CST for DFP constant
      ipa/105598 - testcase for PR105598
      tree-optimization/105431 - another overflow in powi handling
      Properly use opts in finish_options
      middle-end/105537 - debug processing
      rtl-optimization/105559 - avoid quadratic behavior in delete_insn_and_edges
      tree-optimization/105562 - avoid uninit diagnostic with better FRE
      rtl-optimization/105577 - RTL DSE and non-call EH
      rtl-optimization/105577 - testcase for the PR
      tree-optimization/105618 - restore load sinking
      tree-optimization/103116 - SLP permutes and peeling for gaps
      middle-end/105711 - properly handle CONST_INT when expanding bitfields
      tree-optimization/105726 - adjust array bound heuristic
      tree-optimization/105786 - avoid strlen replacement for pointers

Richard Earnshaw (33):
      arm: fix UB when compiling thumb2 with PIC [PR100236]
      arm: fix UB due to missing mode check [PR100311]
      arm: correctly handle inequality comparisons against max constants [PR100563]
      testsuite: suppress cast warnings in pr100563.c [PR100563]
      arm: Remove use of opts_set in arm_configure_build_target [PR100767]
      Limit fill-column to 79
      dir-locals: Use https for bug references
      arm: ensure the arch_name is always set for the build target
      arm: Don't reconfigure globals in arm_configure_build_target
      arm: reorder assembler architecture directives [PR101723]
      arm: Fix general issues with patterns for VLLDM and VLSTM
      arm: testsuite: improve detection of CMSE hardware.
      arm: Add command-line option for enabling CVE-2021-35465 mitigation [PR102035]
      arm: add erratum mitigation to __gnu_cmse_nonsecure_call [PR102035]
      arm: fix vlldm erratum for Armv8.1-m [PR102035]
      arm: Add tests for VLLDM mitigation [PR102035]
      rtl: directly handle MEM in gen_highpart [PR102125]
      arm: expand handling of movmisalign for DImode [PR102125]
      gimple: allow more folding of memcpy [PR102125]
      arm: pass architecture extensions to assembler if supported
      arm: Disambiguate multiple crypto patterns with the same name.
      arm: Consistently use crypto_mode attribute in crypto patterns
      arm: Add option for mitigating against Cortex-A CPU erratum for AES
      arm: add basic mitigation for Cortex-A AES errata
      arm: suppress aes erratum when forwarding from aes
      arm: elide some cases where the AES erratum workaround is not required.
      arm: Add test for AES erratum mitigation
      aarch64: allow ld1/stq in test output [PR102517]
      aarch64: Adjust spellcheck tests for recent quotation-mark changes
      arm: temporarily disable 'local' pcs selection (PR96882)
      arm: correctly handle zero-sized bit-fields in AAPCS [PR102024]
      aarch64: correctly handle zero-sized bit-fields in AAPCS64 [PR102024]
      arm: fix testsuite failure of reg_equal_test.c [PR101755]

Richard Henderson (1):
      MAINTAINERS: Update my email address.

Richard Kenner (22):
      [Ada] Add more initialization of Stored_Constraint
      [Ada] Don't look for aliases for generic subprograms
      [Ada] Look at Others_Discrete_Choices for N_Others_Choice
      [Ada] Add Return_Statement field
      [Ada] Factor out many fields in entities
      [Ada] Make copies of entities being declared when copying block
      [Ada] Add Void_Or_Type_Kind and Exception_Or_Object_Kind
      [Ada] If unnesting and relocating subprogram call, make new Parameter_Associations
      [Ada] Add N_Has_Bounds and N_Is_Index
      [Ada] Add Subprogram_Body_Or_Type
      [Ada] Add N_Entity_Name
      [Ada] Add N_Is_Decl
      [Ada] Add more node unions
      [Ada] Add Evaluable_Kind and Global_Name_Kind
      [Ada] Note that -gnatd_t is used in CCG
      [Ada] Never treat intrinsic subprograms as nested
      [Ada] Create object file for ignored ghost compilation unit
      [Ada] Fix issues with ignored ghost code and unnesting
      [Ada] Don't allow entry in implicit with chain to be ghost
      [Ada] Add an option to Get_Fullest_View to not recurse
      [Ada] Use non-internal representation for access subprograms if UC to Address
      [Ada] Document LLVM-specific flags

Richard Purdie (3):
      Makefile.in: Ensure build CPP/CPPFLAGS is used for build targets
      gcc/nios2: Define the musl linker
      gcc: Fix "argument list too long" from install-plugins

Richard Sandiford (129):
      varasm: Two SECTION_RETAIN fixes [PR100130]
      aarch64: Always use .init/.fini_array for GNU/Linux
      Add dg-final option-based target selectors
      Adjust guality xfails for aarch64*-*-*
      aarch64: Add +nosve to two tests
      aarch64: Handle SVE attributes in comp_type_attributes [PR100270]
      Fix handling of VEC_COND_EXPR trap tests [PR100284]
      aarch64: Fix address mode for vec_concat pattern [PR100305]
      rtl-ssa: Fix -fcompare-debug failure [PR100303]
      aarch64: A couple of mul_laneq tweaks
      match.pd: Relax rule to include POLY_INT_CSTs
      vect: Remove always-true condition
      ifcvt: Improve tests for predicated operations
      vect: Simplify epilogue reduction code
      vect: Create array_slice of live-out stmts
      vect: Remove new_phis from vect_create_epilog_for_reduction
      vect: Ensure reduc_inputs always have vectype
      vect: Add a vect_phi_initial_value helper function
      vect: Pass reduc_info to get_initial_defs_for_reduction
      vect: Pass reduc_info to get_initial_def_for_reduction
      vect: Generalise neutral_op_for_slp_reduction
      vect: Simplify get_initial_def_for_reduction
      vect: Reuse reduction accumulators between loops
      aarch64: Tweak old vect-* tests to avoid new FAILs
      unroll: Avoid unnecessary tail loops for constant niters
      unroll: Run VN on unrolled-and-jammed loops
      aarch64: Turn sve_width tuning field into a bitmask
      aarch64: Add a simple fixed-point class for costing
      aarch64: Split out aarch64_adjust_body_cost_sve
      aarch64: Add gather_load_xNN_cost tuning fields
      aarch64: Tweak the cost of elementwise stores
      aarch64: Tweak MLA vector costs
      aarch64: Restrict issue heuristics to inner vector loop
      aarch64: Add -mtune=neoverse-512tvb
      aarch64: Fix a typo
      vect: Tweak dump messages for vector mode choice
      vect: Tweak comparisons with existing epilogue loops
      vect: Move costing helpers from aarch64 code
      doc: Document cond_* shift optabs in md.texi
      libgcc: Add missing runtime exception notices
      loop: Fix profile updates after unrolling [PR102385]
      aarch64: Remove redundant flag_vect_cost_model test
      arm: Remove add_stmt_cost hook
      rs6000: Fix memory leak in rs6000_density_test
      Add a simulate_record_decl lang hook
      Fix RTL frontend handling of const_vectors
      simplify-rtx: Fix vec_select index check
      vect: Convert cost hooks to classes
      aarch64: Move more code into aarch64_vector_costs
      genmodes: Define NUM_MODE_* macros
      aarch64: LD3/LD4 post-modify costs for struct modes
      vect: Move vector costs to loop_vec_info
      vect: Remove vec_outside/inside_cost fields
      vect: Hookize better_loop_vinfo_p
      vect: Keep scalar costs around longer
      vect: Pass scalar_costs to finish_cost
      aarch64: Tweak FMAX/FMIN iterators
      aarch64: Detect more consecutive MEMs
      aarch64: Fold aarch64_sve_op_count into aarch64_vec_op_count
      aarch64: Remove vectype from latency tests
      aarch64: Get floatness from stmt_info
      aarch64: Use real scalar op counts
      aarch64: Use an array of aarch64_vec_op_counts
      aarch64: Move cycle estimation into aarch64_vec_op_count
      aarch64: Add vf_factor to aarch64_vec_op_count
      aarch64: Use new hooks for vector comparisons
      aarch64: Remove redundant costing code
      Add IFN_COND_FMIN/FMAX functions
      gimple-match: Add a gimple_extract_op function
      gimple-match: Make code_helper conversions explicit
      vect: Make reduction code handle calls
      vect: Add support for fmax and fmin reductions
      Canonicalize argument order for commutative functions
      Mark IFN_COMPLEX_MUL as commutative
      Mark IFN_UBSAN_CHECK_ADD/MUL as commutative
      Mark IFN_ADD/MUL_OVERFLOW as commutative
      vect: Pass mode to gather/scatter tests
      vect: Fix vect_is_reduction
      vect: Fix SVE mask_gather_load/store_store tests
      vect: Use code_helper when building SLP nodes
      vect: Use generalised accessors to build SLP nodes
      vect: Support gather loads with SLP
      if-conv: Apply VN to hoisted conversions
      vect: Support masked gather loads with SLP
      vect: Fix ncopies calculation for emulated gather/scatter [PR103494]
      vect: Tighten check for SLP memory groups [PR103517]
      ranger: Optimise irange_union
      ranger: Add shortcuts for single-successor blocks
      aarch64: Don't classify vector pairs as short vectors [PR103094]
      vect: Fix multi-vector SLP gather loads [PR103744]
      ira: Add a ira_loop_border_costs class
      ira: Add comments and fix move_spill_restore calculation
      ira: Add ira_subloop_allocnos_can_differ_p
      ira: Try to avoid propagating conflicts
      ira: Consider modelling caller-save allocations as loop spills
      ira: Handle "soft" conflicts between cap and non-cap allocnos
      ira: Fix s390 build
      ira: Fix old-reload targets [PR103974]
      vect: Fix uninitialised variable PR104026
      aarch64: Fix overly optimistic LDP/STP matching [PR104005]
      testsuite: Update guality xfails for aarch64*-*-*
      testsuite: Remove TSVC XFAILs for SVE
      aarch64: Remove VALL_F16MOV iterator
      aarch64: Add missing movmisalign patterns
      aarch64: Adjust tests after fix for PR102659
      aarch64: Remove struct_vect_25.c XFAILs
      aarch64: Add test for PR104092
      aarch64: Tighten general_operand predicates
      aarch64: Generalise vec_set predicate
      aarch64: Generalise adjacency check for load_pair_lanes
      aarch64: Remove redundant vec_concat patterns
      aarch64: Add more vec_combine patterns
      aarch64: Add a general vec_concat expander
      aarch64: Remove move_lo/hi_quad expanders
      aarch64: Extend vec_concat patterns to 8-byte vectors
      vect: Fix early free
      vect+aarch64: Fix ldp_stp_* regressions
      aarch64: Add +nosve to tests
      aarch64: Fix store_v2vec_lanes.c failure
      aarch64: Fix subs_compare_2.c regression [PR100874]
      aarch64: Extend PR100056 patterns to +
      aarch64: Remove XFAIL for bic-bitmask-1.c
      aarch64: Tweak atomic-inst-cas.c options
      rtl-ssa: Fix prev/next_def confusion [PR104869]
      aarch64: Use error_n for plural text [PR104897]
      aarch64: Fix -fpack-struct + <arm_neon.h> [PR103147]
      aarch64: Stop +mops clobbering variable values
      vect: Fix mask handling for SLP gathers [PR103761]
      aarch64: Make sure the UF divides the VF [PR105254]

Richard Wai (1):
      [Ada] Hashed container Cursor type predefined equality non-conformance

Rimvydas Jasinskas (2):
      Add XFAIL parts of pr16855.C for dragonfly.
      Fix tsvc test build on DragonFly.

Robin Dapp (27):
      s390/testsuite: Fix oscbreak-1.c.
      testsuite: Add s390 to gcc.dg/vect/slp-21.c
      testsuite: Add vect_floatint_cvt to gcc.dg/vect/pr56541.c
      testsuite: Add s390 to vect_*_cvt checks.
      testsuite/s390: Fix risbg-ll-3.c f2_cconly test.
      testsuite: Change gcc.dg/vect/pr56541.c target.
      s390: Allow more vcond_mask patterns.
      c-family: Copy DECL_USER_ALIGN even if DECL_ALIGN is similar.
      testsuite: Fix Wattributes test cases for s390 and add new tests.
      vect: Add bias parameter for partial vectorization
      ifcvt: Check if cmovs are needed.
      ifcvt: Allow constants for noce_convert_multiple.
      ifcvt: Improve costs handling for noce_convert_multiple.
      ifcvt/optabs: Allow using a CC comparison for emit_conditional_move.
      ifcvt: Try re-using CC for conditional moves.
      testsuite/s390: Add tests for noce_convert_multiple.
      ifcvt: Run second pass if it is possible to omit a temporary.
      combine: Check for paradoxical subreg.
      s390: Increase costs for load on condition and change movqicc expander.
      ifcvt: Fix PR104153 and PR104198.
      rs6000: Workaround for new ifcvt behavior [PR104335].
      arc: Fix for new ifcvt behavior [PR104154]
      testsuite: Add -fno-tree-loop-distribute-patterns.
      testsuite/s390: Change nle -> h in ifcvt tests.
      testsuite/s390: Adapt test expections.
      s390: Add scheduler description for z16.
      testsuite/s390: Silence warning in pr80725.c

Roger Sayle (116):
      PR middle-end/53267: Constant fold BUILT_IN_FMOD.
      PR tree-optimization/96392 Optimize x+0.0 if x is an integer
      PR tree-optimization/96392 Optimize x+0.0 if x is an integer
      PR rtl-optimization/46235: Improved use of bt for bit tests on x86_64.
      PR target/11877: Use xor to write zero to memory with -Os
      PR tree-optimization/40210: Fold (bswap(X)>>C1)&C2 to (X>>C3)&C2 in match.pd
      Improvement to signed division of integer constant on x86_64.
      PR tree-optimization/101403: Incorrect folding of ((T)bswap(x))>>C
      Tweak testcase for PR tree-optimization/101403.
      Make gimple_could_trap_p const-safe.
      Fold bswap32(x) != 0 to x != 0 (and related transforms)
      Decrement followed by cmov improvements.
      [Committed] Tweak new test case gcc.target/i386/dec-cmov-2.c
      Optimize x ? bswap(x) : 0 in tree-ssa-phiopt
      Fold (X<<C1)^(X<<C2) to a multiplication when possible.
      Use CFN_BUILT_IN_CLRSB instead of BUILT_IN_CLRSB in switch.
      Improve handling of unknown sign bit in CCP.
      Improved handling of MULT_EXPR in bit CCP.
      Improved handling of MINUS_EXPR in bit CCP.
      Fold more constants during veclower pass.
      Fold sign of LSHIFT_EXPR to eliminate no-op conversions.
      Simplify (truncate:QI (subreg:SI (reg:QI x))) to (reg:QI x)
      Improved handling of division/modulus in bit CCP.
      [Committed] Restore build on !TARGET_TRULY_NOOP_TRUNCATION targets
      [Committed] PR middle-end/102029: Stricter typing in LSHIFT_EXPR sign folding.
      Tweak -Os costs for scalar-to-vector pass.
      nvptx: Add a __PTX_SM__ predefined macro based on target ISA.
      [Committed] PR middle-end/102031: Fix typo/mistake in simplify_truncation patch.
      [Committed] Tidy up !POINTER_TYPE_P test in match.pd LSHIFT_EXPR folding
      Improved handling of shifts/rotates in bit CCP.
      Only simplify TRUNCATE to SUBREG on TRULY_NOOP_TRUNCATION targets.
      Preserve SUBREG_PROMOTED_VAR_P on (extend:HI (subreg/s:QI (reg:SI))).
      [Committed] Fix subreg_promoted_mode breakage on various platforms.
      C: PR c/79412: Poison decls with error_mark_node after type mismatch
      Correct implementation of wi::clz
      Also preserve SUBREG_PROMOTED_VAR_P in expr.c's convert_move.
      PR c/102245: Disable sign-changing optimization for shifts by zero.
      PR middle-end/88173: More constant folding of NaN comparisons.
      More NEGATE_EXPR folding in match.pd
      Introduce smul_highpart and umul_highpart RTX for high-part multiplications
      Tweak new test cases for -march=cascadelake strangeness.
      x86_64: Some SUBREG related optimization tweaks to i386 backend.
      Allow early sets of SSE hard registers from standard_sse_constant_p.
      Constant fold SS_NEG and SS_ABS in simplify-rtx.c
      bfin: Popcount-related improvements to machine description.
      Try placing RTL folded constants in the constant pool.
      PR target/102785: Correct addsub/subadd patterns on bfin.
      x86_64: Add insn patterns for V1TI mode logic operations.
      [Committed] Correct testcase gcc.target/bfin/20090914-3.c
      Constant fold/simplify SS_ASHIFT and US_ASHIFT in simplify-rtx.c
      x86_64: Implement V1TI mode shifts/rotates by a constant
      x86_64: Expand ashrv1ti (and PR target/102986)
      x86_64: Improved implementation of TImode rotations.
      x86_64: Avoid rorx rotation instructions with -Os.
      Tweak tree-ssa-math-opts.c to solve PR target/102117.
      tree-optimization/103345: Improved load merging.
      PR middle-end/103406: Check for Inf before simplifying x-x.
      ivopts: Improve code generated for very simple loops.
      [Committed] Fix new ivopts-[89].c test cases for -m32.
      x86_64: Improved V1TImode rotations by non-constant amounts.
      x86_64: PR target/100711: Splitters for pandn
      [Committed] PR testsuite/103477: Fix big-endian mistake in new test case.
      Final value replacement improvements for until-wrap loops.
      nvptx: Add test-case gcc.target/nvptx/exttrunc-1.c
      nvptx: Use cvt to perform sign-extension of truncation
      PR ipa/103601: ICE compiling CSiBE in ipa-modref's insert_kill.
      nvptx: Add (experimental) support for HFmode with -misa=sm_53
      x86: Avoid generating orb $0, %ah
      nvptx: Add -misa=sm_75 and -misa=sm_80
      PR target/32803: Add -Oz option for improved clang compatibility.
      x86: PR target/103611: Splitter for DST:DI = (HI:SI<<32)|LO:SI.
      x86_64: Improve code expanded for highpart multiplications.
      x86: PR target/103773: Fix wrong-code with -Oz from pop to memory.
      nvptx: Transition nvptx backend to STORE_FLAG_VALUE = 1
      nvptx: Add support for PTX's cnot instruction.
      x86_64: Improve (interunit) moves from TImode to V1TImode.
      Recognize MULT_HIGHPART_EXPR in tree-ssa-math-opts pass.
      x86_64: Improvements to arithmetic right shifts of V1TImode values.
      PR middle-end/104140: bootstrap ICE on riscv.
      PR rtl-optimization/101885: Prevent combine from clobbering flags
      PR tree-optimization/104420: Fix checks for constant folding X*0.0
      nvptx: Improved support for HFMode including neghf2 and abshf2
      nvptx: Expand QI mode operations using SI mode instructions
      nvptx: Add support for 64-bit mul.hi (and other) instructions
      nvptx: Fix and use BI mode logic instructions (e.g. and.pred)
      PR target/104345: Use nvptx "set" instruction for cond ? -1 : 0
      nvptx: Tweak constraints on copysign instructions
      gfortran: Respect target's NO_DOT_IN_LABEL in trans-common.cc
      Implement constant-folding simplifications of reductions.
      Restore bootstrap on x86_64-pc-linux-gnu
      nvptx: Back-end portion of a fix for PR target/104489.
      PR middle-end/80270: ICE in extract_bit_field_1
      PR tree-optimization/91384: peephole2 to eliminate testl after negl.
      Restrict new testcase gcc.target/i386/pr80270.c to x86_64.
      PR 104732: Simplify/fix DI mode logic expansion/splitting on -m32.
      [Committed] Update gcc.dg/lower-subreg-1.c on ia32.
      PR c++/96329: ICE-on-invalid-code error recovery.
      PR c++/96437: ICE-on-invalid-code error recovery.
      PR c++/96440: ICE-on-invalid-code error recovery.
      PR c++/39751: ICE-on-invalid parsing regression.
      PR c++/95999: Improved error recovery in enumeration lists.
      PR c++/84964: Middle-end patch to expand_call for ICE after sorry.
      [Committed] Update g++.dg/other/pr84964.C for ia32 (and similar) targets.
      PR tree-optimization/98335: Improvements to DSE's compute_trims.
      PR tree-optimization/98335: New peephole2 xorl;movb -> movzbl
      PR middle-end/98420: Don't fold x - x to 0.0 with -frounding-math
      Fix libitm.c/memset-1.c test fails with new peephole2s.
      PR tree-optimization/101895: Fold VEC_PERM to help recognize FMA.
      Some minor HONOR_NANS improvements to match.pd
      Performance/size improvement to single_use when matching GIMPLE.
      PR target/94680: Clear upper bits of V2DF using movq (like V2DI).
      PR c/98198: ICE-on-invalid-code error recovery.
      Fix strange binary corruption with last commit.
      PR 90356: Use xor to load const_double 0.0 on SSE (always)
      PR middle-end/104885: Fix ICE with large stack frame on powerpc64.
      Support pandn for V1TI mode (i.e. *andnotv1ti3).

Roman Zhuykov (1):
      modulo-sched: skip loops with strange register defs [PR100225]

Saagar Jha (1):
      Darwin, config: Amend for Darwin 21 / macOS 12.

Sandra Loosemore (42):
      Fortran: fix sm computation in CFI_allocate [PR93524]
      Fortran: set version field in CFI_cdesc_t to CFI_VERSION
      Bind(c): signed char is not a Fortran character type
      Bind(C): Fix type encodings in ISO_Fortran_binding.h
      Bind(C): Correct sizes of some types in CFI_establish
      Fix ISO_Fortran_binding.h paths in gfortran testsuite
      Bind(c): Fix bugs in CFI_section
      Bind(c): Improve error checking in CFI_* functions
      Fortran: Fix c_float128 and c_float128_complex definitions.
      Fortran: TS 29113 testsuite
      libgfortran: Further fixes for GFC/CFI descriptor conversions.
      Fortran: Revert to non-multilib-specific ISO_Fortran_binding.h
      Fortran: Use _Float128 rather than __float128 for c_float128 kind.
      Fortran: Fix testcases that violate C838, + revealed ICE
      Fortran: Fixes for F2018 C838 (PR fortran/101334)
      Fortran: diagnostic for argument w/type parameters for assumed-type dummy
      Fortran: Diagnose default-initialized pointer/allocatable dummies
      Fortran: Add missing diagnostic for F2018 C711 (TS29113 C407c)
      Fortran: Add diagnostic for F2018:C839 (TS29113:C535c)
      Fortran: Fixes and additional tests for shape/ubound/size [PR94070]
      Add testcase for PR fortran/100906
      Add testcase for PR fortran/94289
      Add testcase for PR fortran/95196
      Fix broken use of alloca in C interoperability testcase
      Fortran manual: Combine standard conformance docs in one place.
      Fortran manual: Revise introductory chapter.
      Fortran manual: Update section on Interoperability with C
      Fortran manual: Update miscellaneous references to old standard versions.
      Fortran manual: Remove old docs for never-implemented extensions.
      Fortran: Add more documentation for mixed-language programming [PR35276]
      Fortran: Diagnose all operands/arguments with constraint violations
      Nios2: Add TARGET_CAN_INLINE_P hook.
      Testsuite: Various fixes for nios2.
      Testsuite: Tweak gcc.dg/20021029-1.c for nios2.
      Fortran: Fix array copy-in/copy-out for BIND(C) functions [PR103390]
      Fortran: Fix ICE caused by missing error for untyped symbol [PR103258]
      Fortran: Fix ICE in argument_rank_mismatch [PR103287]
      Fortran: Fix handling of optional argument to SIZE intrinsic [PR103898]
      Testsuite: Make dependence on -fdelete-null-pointer-checks explicit
      middle-end: move initialization of stack_limit_rtx [PR103163]
      Fortran: Fix scope for OMP AFFINITY clause iterator variables [PR103695]
      Fortran: Fix clause splitting for OMP masked taskloop directive

Sebastian Huber (9):
      gcov: Fix use of profile info section
      gcov: Add __gcov_info_to_gdca()
      gcov: Remove <stdint.h> from libgcov-driver.c
      gcov: Add TARGET_GCOV_TYPE_SIZE target hook
      Use __builtin_trap() for abort() if inhibit_libc
      Fix arm target build with inhibit_libc
      powerc: Fix asm machine directive for some CPUs
      gcov: Reword comment for gcov_read_string()
      ada: Fix build for RTEMS

Sebastian Pop (1):
      [AArch64] add barriers to ool __sync builtins

Segher Boessenkool (21):
      rs6000: Fix cpu selection w/ isel (PR100108)
      Remove CC0
      rs6000: Fix *TItype_ppc
      rs6000: "e" is not a free constraint letter
      rs6000: Replace & by &&
      rs6000: Don't use r12 for CR save on ELFv2 (PR102107)
      rs6000: Fix ELFv2 r12 use in epilogue
      rs6000: Fix bootstrap (libffi)
      rs6000: Redo darn (PR103624)
      rs6000: Update darn testcases
      rs6000/testsuite: Return 0 for powerpc_altivec_ok on other targets
      rs6000: Fix GC on rs6000.c decls for atomic handling (PR88134)
      rs6000: Improve .machine
      rs6000: Do not use rs6000_cpu for .machine ppc and ppc64 (PR104829)
      rs6000/testsuite: Skip pr105140.c
      rs6000: Fix unpack for no-direct-move (PR103623)
      rs6000: Add effective target has_arch_ppc64
      rs6000: Disparage lfiwzx and similar
      rs6000/testsuite: xfail bswap-brw.c
      rs6000: Fix pack for soft-float (PR105334)
      rs6000: Make the has_arch target selectors actually work

Senthil Kumar Selvaraj (2):
      AVR cc0 conversion
      AVR cc0 conversion - adjust peepholes

Serge Belyshev (6):
      MAINTAINERS: Add myself for write after approval
      configure: drop version checks for in-tree gas [PR91602]
      configure: remove version argument from gcc_GAS_CHECK_FEATURE
      configure: fixup formatting from previous change
      configure: remove gas versions from tls check
      gcc_update: use human readable name for revision string in gcc/REVISION

Sergei Trofimovich (11):
      docs: drop unbalanced parenthesis in rtl.texi
      docs: Fix s/net yet/not yet/ typo
      docs: add missing 'see' word
      docs: don't split @smallexample in multiple @groups
      docs: fix s/ei_safe_safe/ei_safe_edge/ typo
      lra: Fix s/otput/output/ typo in debug output
      c++: fix ptrmemfunc template instantiation [PR101219]
      libbacktrace: fix b2test_buildid test on non-english locales
      libgcc: m68k: avoid TEXTRELs in shared library (PR 86224)
      libgcc: IA64: don't compile glibc-based unwinder without libc headers
      gcov-profile: Allow negative counts of indirect calls [PR105282]

Sergey Rybin (1):
      [Ada] Clarify the documentation of -gnaty0 style check option

SiYu Wu (2):
      RISC-V: Add option defines for Scalar Cryptography
      RISC-V: Add implied defines of Zk, Zkn and Zks

Siddhesh Poyarekar (24):
      analyzer: Recognize __builtin_free as a matching deallocator
      analyzer: Handle strdup builtins
      MAINTAINERS: Add myself to DCO section
      tree-object-size: Drop unused pdecl and poff arguments
      tree-object-size: Avoid unnecessary processing of __builtin_object_size
      tree-object-size: Make unknown a computation
      gimple-fold: Transform stp*cpy_chk to str*cpy directly
      gimple-fold: Use ranges to simplify _chk calls
      gimple-fold: Use ranges to simplify strncat and snprintf
      tree-object-size: Replace magic numbers with enums
      tree-object-size: Abstract object_sizes array
      tree-optimization/103456 - Record only successes from object_sizes_set
      tree-object-size: Use trees and support negative offsets
      __builtin_dynamic_object_size: Recognize builtin
      tree-optimization/103759: Use sizetype everywhere for object sizes
      tree-optimization/103961: Never compute offset for -1 size
      tree-object-size: Support dynamic sizes in conditions
      tree-object-size: Handle function parameters
      tree-object-size: Handle GIMPLE_CALL
      tree-object-size: Dynamic sizes for ADDR_EXPR
      tree-optimization/104009: Conservative underflow estimate in object size
      tree-optimization/104942: Retain sizetype conversions till the end
      tree-optimization/104941: Actually assign the conversion result
      tree-optimization/104970: Limit size computation for access attribute

Simon Cook (1):
      RISC-V: Don't unconditionally add m,a,f,d in arch-canonicalize

Srinath Parvathaneni (4):
      arm: Remove duplicate definitions from arm_mve.h (pr100419).
      arm: Fix the mve multilib for the broken cmse support (pr99939).
      arm: Fix polymorphic variants failing with undefined reference to `__ARM_undef` error.
      arm: Fix multilib mapping for CDE extensions [PR100856].

Stafford Horne (5):
      or1k: Add mcmodel option to handle large GOTs
      or1k: Use cmodel=large when building crtstuff
      or1k: Update FPU to specify detect tininess before rounding
      or1k: Add return address argument to _mcount call
      or1k: Fix clobbering of _mcount argument if fPIC is enabled

Stefan Schulze Frielinghaus (11):
      testsuite: Fix gcc.dg/vect/bb-slp-39.c on IBM Z
      testsuite: Xfail gcc.dg/vect/pr71264.c on IBM Z
      PR rtl-optimization/100263: Ensure register can change mode
      testsuite: Fix input operands of gcc.dg/guality/pr43077-1.c
      ldist: Recognize strlen and rawmemchr like loops
      IBM Z: Provide rawmemchr{qi,hi,si} expander
      tree-optimization/102752: Fix determining precission of reduction_var
      IBM Z: Fix address of operands will never be NULL warnings
      IBM Z: ldist-{rawmemchr,strlen} tests require vector extensions
      IBM Z: Free bbs in s390_loop_unroll_adjust
      IBM Z: Fix load-and-test peephole2 condition

Steve Baird (38):
      [Ada] Avoid inappropriate error messages regarding aggregates and variant parts
      [Ada] Avoid unhelpful dead code warnings
      [Ada] Include info about containers in GNAT RM Implementation Advice section
      [Ada] Casing on composite values
      [Ada] Add Ada.Strings.Text_Buffers and replace uses of Ada.Strings.Text_Output
      [Ada] Add Ada 2022 Image and Put_Image support for tagged types
      [Ada] Temporarily disable Ada 2022 Image and Put_Image support for tagged types
      [Ada] Remove Ada.Strings.Text_Output and child units
      [Ada] Fix some "current instance" bugs
      [Ada] Add GNAT RM text regarding Ada 2022 default Put_Image implementation
      [Ada] Fix bug in casing on composite values with -gnatX
      [Ada] Implement missing constraint checks for default streaming operations
      [Ada] Enable Ada 2020 Put_Image and Image support for tagged types
      [Ada] Unsynchronized access to a Boolean in tasking state
      [Ada] Improve interactions between DSA and Put_Image routines for tagged types
      [Ada] Unsynchronized concurrent access to a Boolean variable
      [Ada] Add -gnatX support for casing on discriminated values
      [Ada] Improve performance of Ada.Containers.Doubly_Linked_Lists.Generic_Sorting.Sort
      [Ada] Refactor sort procedures of doubly linked list containers
      [Ada] Enforce legality rule for Predicate_Failure aspect specifications
      [Ada] Add -gnatX support for casing on array values
      [Ada] Improve performance for case-insensitive regular expressions
      [Ada] Update "Implementation Defined Characteristics" documentation.
      [Ada] No ABE check needed for an expression function call.
      [Ada] Improve error message for .ali file version mismatch
      [Ada] Fix bug in inherited user-defined-literal aspects for tagged types
      [Ada] Improve error message for .ali file version mismatch
      [Ada] Improved checking for invalid index values when accessing array elements
      [Ada] Improve checking for invalid index values when accessing array elements
      [Ada] Fix compiler internal error
      [Ada] Incorrect Dynamic_Predicate results for static arguments
      [Ada] Valid postconditions incorrectly rejected.
      [Ada] Relax INOX restrictions when casing on composite value.
      [Ada] Add missing regular expression syntax error check
      [Ada] Improve support for casing on types with controlled parts
      [Ada] Improve support for casing on types with controlled parts
      [Ada] Avoid building malformed component constraints
      [Ada] Avoid building malformed component constraints

Steve Kargl (2):
      Fortran: generate regular error on invalid conversions of CASE expressions
      target/89125 - BSD and math functions

Sören Tempel (3):
      stddef.h: add support for musl typedef macro guards
      Disable -fsplit-stack support on non-glibc targets
      libgo: only add signum to siglist if it doesn't exist yet

Tamar Christina (71):
      AArch64: Have -mcpu=native and -march=native enable extensions when CPU is unknown
      libsanitizer: Remove cyclades from libsanitizer
      AArch64: Fix failing testcase for native cpu detection
      Vect: Add support for dot-product where the sign for the multiplicant changes.
      AArch64: Add support for sign differing dot-product usdot for NEON and SVE.
      AArch32: Add support for sign differing dot-product usdot for NEON.
      middle-end: Add tests middle end generic tests for sign differing dotproduct.
      AArch32: Correct sdot RTL on aarch32
      AArch64: Correct dot-product auto-vect optab RTL
      Vect: correct rebase issue
      Revert "AArch64: Correct dot-product auto-vect optab RTL"
      Revert "AArch32: Correct sdot RTL on aarch32"
      testsuite: Fix testisms in scalar tests PR101457
      testsuite: fix IL32 issues with usdot tests.
      AArch64: correct usdot vectorizer and intrinsics optabs
      AArch64: correct dot-product RTL patterns for aarch64.
      [testsuite] Fix trapping access in test PR101750
      middle-end/AArch64: Fix bootstrap after vec changes
      sve: combine inverted masks into NOTs
      sve: optimize add reduction patterns
      aarch64: Add combine patterns for right shift and narrow
      AArch64: Add combine patterns for narrowing shift of half top bits (shuffle)
      AArch64: Add pattern for sshr to cmlt
      AArch64: Add pattern xtn+xtn2 to uzp1
      AArch64: Combine cmeq 0 + not into cmtst
      AArch64 testsuite: Force shrn-combine-*.c to use NEON.
      middle-end: Update the Arm complex numbers auto-vec detection to the new format of the SLP tree.
      middle-end: Add target independent tests for Arm complex numbers vectorization.
      testsuite: Don't expect a complex FMA
      testsuite: fix failing complex add testcases PR103000
      middle-end: Teach CSE to be able to do vector extracts.
      AArch64: Add better costing for vector constants and operations
      middle-end: Fix PR103007, add missing check on complex fms detection.
      testsuite: Add more guards to complex tests
      middle-end: convert negate + right shift into compare greater.
      AArch64: Lower intrinsics shift to GIMPLE when possible.
      vect: remove unused variable in complex numbers detection code.
      middle-end: Fix signbit tests when ran on ISA with support for masks.
      testsuite: change vect_long to vect_long_long in complex tests.
      AArch64: Remove shuffle pattern for rounding variant.
      middle-end: Add an RPO pass after successful vectorization
      AArch64: do not keep negated mask and inverse mask live at the same time
      signbit-2: make test check for scalar or vector versions
      shrn-combine-10: update test to current codegen.
      middle-end: Fix FMA detection when inspecting gimple which have no LHS.
      middle-end: check that both sides of complex expression is a mul.
      libstdc++: Fix ctype changed after newlib update.
      middle-end: Handle FMA_CONJ correctly after SLP layout update.
      middle-end: Convert bitclear <imm> + cmp<cc> #0 into cm<cc2> <imm2>
      middle-end: Fix failures with bitclear patterns on signed values
      middle-end: move bitmask match.pd pattern and update tests
      testsuite: make bic-bitmask-18.c test more precise [PR103479]
      AArch64: Optimize right shift rounding narrowing
      sve: combine nested if predicates
      cse: Make sure duplicate elements are not entered into the equivalence set [PR103404]
      Revert "libstdc++: Fix ctype changed after newlib update."
      middle-end: REE should always check all vector usages, even if it finds a defining def. [PR103350]
      slp: check that the operation we're combing is a boolean operation [PR103741]
      vect: Simplify and extend the complex numbers validation routines.
      AArch64: use canonical ordering for complex mul, fma and fms
      AArch32: use canonical ordering for complex mul, fma and fms
      AArch32: correct dot-product RTL patterns.
      AArch32: correct usdot-product RTL patterns.
      vect: add vect_float to pr102819 tests
      vect: disable bitmask tests on sparc
      testsuite: skip PR103350 tests on big-endian
      testsuite: enable fast-math-complex-* testcases.
      AArch64: Fix left fold sum reduction RTL patterns [PR104049]
      AArch64: fix ls64 intrinsics expansion [PR104409]
      testsuite: delete slp scan from loop vect test.
      middle-end: Prevent the use of the cond inversion detection code when both conditions are external. [PR105197]

Tejas Belagod (1):
      PR101609: Use the correct iterator for AArch64 vector right shift pattern

Than McIntosh (1):
      compiler: workaround for C++ build template matching quirk

Thomas Koenig (13):
      Do not replace variable op variable in I/O implied DO loop replacement.
      Fix keyword name for co_reduce.
      Prepare library for REAL(KIND=17).
      Fix pattern substition for _r17 and _c17.
      Generate config.h macros for IEEE128 math functions.
      Make sure the Fortran specifics have real(kind=16).
      Implement CONVERT specifier for OPEN.
      Handle R16 conversion for POWER in the environment variables.
      Allow for multiple defaults in endianness and r16 in GFORTRAN_CONVERT_UNIT.
      Split test to remove failing run time test and add check for ICE.
      Fix oversight from previous commit to pr70673.
      Document changes to CONVERT for -mabi-ieeelongdouble for POWER.
      Fix exchanged period and letter in gfortan.texi.

Thomas Rodgers (14):
      libstdc++: Refactor/cleanup of C++20 atomic wait implementation
      [libstdc++] Add missing _M_try_acquire() to __platform_semaphore
      [libstdc++] Fix test timeout in stop_calback/destroy.cc
      libstdc++: Fix "bare" notifications dropped by waiters check
      libstdc++: Fix wrong thread waking on notify [PR100334]
      [libstdc++] Remove unused hasher instance.
      libstdc++: Fix Wrong param type in :atomic_ref<_Tp*>::wait [PR100889]
      libstd++: Only support atomic_ref::wait tests which are always lockfree
      libstdc++: Fix for deadlock in std::counting_semaphore [PR100806]
      libstdc++: Fix UB in atomic_ref/wait_notify.cc [PR101761]
      libstdc++: Make atomic<T*>::wait() const [PR102994]
      Strengthen memory order for atomic<T>::wait/notify
      libstdc++: Fix deadlock in atomic wait [PR104442]
      libstdc++: Strengthen memory order for atomic<T>::wait/notify

Thomas Schwinge (144):
      [OpenACC] Don't compile libgomp testcases with '-w'
      Add '-Wopenacc-parallelism'
      [OMP] Tighten 'is_gimple_omp_oacc'
      Add 'dg-note', 'dg-lto-note'
      'libgomp.c/target-44.c': Restrict '-latomic' to nvptx offloading compilation
      'libgomp.c-c++-common/reduction-{5,6}.c': Restrict '-latomic' to nvptx offloading compilation
      [libgomp, testsuite] Don't shadow global 'offload_targets' variable
      Add 'libgomp.oacc-c-c++-common/private-atomic-1.c' [PR83812]
      Don't skip 'libgomp.oacc-fortran/privatized-ref-2.f90' for nvptx offloading
      [OpenACC privatization, nvptx] Tighten some aspects [PR90115]
      [OpenACC privatization] Don't evaluate OpenMP 'for' clauses [PR90115]
      [OpenACC privatization] Don't let unhandled 'IFN_UNIQUE_OACC_PRIVATE' linger [PR90115]
      [OpenACC privatization] Explain two different configurations [PR90115]
      [OpenACC privatization] Skip processing if no work to be done [PR90115]
      [OpenACC privatization] Explain OpenACC privatization candidate selection [PR90115]
      Add '__OPTIMIZE__' DejaGnu selector
      [OpenACC privatization] Largely extend diagnostics and corresponding testsuite coverage [PR90115]
      [OpenACC privatization] Reject 'static', 'external' in blocks [PR90115]
      [OpenACC privatization] Prune uninteresting/varying diagnostics in 'libgomp.oacc-fortran/privatized-ref-2.f90'
      [nvptx] Update comment in 'libgomp.oacc-c-c++-common/parallel-dims.c'
      Revert PR80547 workaround in 'libgomp.oacc-c-c++-common/parallel-dims.c'
      [GCN] Streamline 'libgomp/testsuite/lib/libgomp.exp:check_effective_target_openacc_radeon_accel_selected'
      Don't require 'openacc_nvidia_accel_selected' in additional 'libgomp.oacc-*/declare-*'
      Don't require 'openacc_nvidia_accel_selected' in 'libgomp.oacc-c-c++-common/async_queue-1.c'
      Add 'acc_device_radeon' testing to 'libgomp.oacc-*/acc_on_device-*'
      Enhance 'libgomp.oacc-c-c++-common/firstprivate-1.c' for non-'acc_device_nvidia'
      Fix 'libgomp.oacc-c-c++-common/acc_prof-kernels-1.c' for 'acc_device_radeon'
      Fix 'libgomp.oacc-fortran/parallel-dims.f90' for 'acc_device_radeon'
      Enable more 'libgomp.oacc-*/lib-*' testcases for non-'openacc_nvidia_accel_selected'
      [GCN] Fix run-time variable 'num_workers'
      Fix '#pragma acc acc [...]' typos
      Move 'libgomp/oacc-parallel.c:GOACC_declare' into 'libgomp/oacc-mem.c'
      Extract 'goacc_enter_exit_data_internal' from 'libgomp/oacc-mem.c:GOACC_enter_exit_data'
      For 'OMP_CLAUSE' in 'dump_generic_node', dump the whole OMP clause chain
      [gcn] Work-around libgomp 'error: array subscript 0 is outside array bounds of ‘__lds struct gomp_thread * __lds[0]’ [-Werror=array-bounds]' [PR101484]
      [gcn] Work-around libgomp 'error: array subscript 0 is outside array bounds of ‘__lds struct gomp_thread * __lds[0]’ [-Werror=array-bounds]' some more [PR101484]
      [OpenACC] Fix '#pragma atomic update' typo in 'g++.dg/goacc/template.C'
      OpenACC 'nohost' clause
      Fix OpenACC 'async'/'wait' issues in 'libgomp.oacc-c-c++-common/lib-{94,95}.c', 'libgomp.oacc-fortran/lib-16{,-2}.f90'
      [OpenACC] Clarify sequencing of 'async' data copying vs. profiling events in 'libgomp.oacc-c-c++-common/acc_prof-{init,parallel}-1.c'
      Add 'libgomp.oacc-c-c++-common/async-data-1-{1,2}.c'
      Don't use libgomp 'cbuf' buffering with OpenACC 'async'
      [OpenACC] Extract 'pass_oacc_loop_designation' out of 'pass_oacc_device_lower'
      [libgomp] Restore offloading 'libgomp/fortran.c'
      [documentation] Fix GTY header file example
      [documentation] No need anymore to "mention ['gt-*.h' file] as a dependency in the 'Makefile'"
      [OpenACC] Clean up unused 'BUILT_IN_ACC_GET_DEVICE_TYPE'
      Sanity check that 'Init' doesn't appear without 'Var' in '*.opt' files
      Don't consider '-foffload-abi' in 'DEF_GOACC_BUILTIN', 'DEF_GOMP_BUILTIN'
      Remove 'gcc/omp-offload.c' from 'GTFILES'
      Cross-reference parts adapted in 'gcc/omp-oacc-neuter-broadcast.cc'
      Adjust 'libgomp.oacc-c-c++-common/static-variable-1.c'
      Avoid 'GTY' use for 'gcc/omp-oacc-neuter-broadcast.cc:field_map'
      Clarify memory management for 'prop_set' in 'gcc/omp-oacc-neuter-broadcast.cc'
      Plug 'par' memory leak in 'gcc/omp-oacc-neuter-broadcast.cc:execute_omp_oacc_neuter_broadcast'
      Address '?:' issues in 'libgomp.oacc-c-c++-common/mode-transitions.c'
      Restore 'gcc.dg/pr78213.c' testing
      Turn global 'ggc_force_collect' variable into 'force_collect' parameter to 'ggc_collect'
      libstdc++: Avoid illegal argument to verbose in dg-test callback, continued
      Turn 'bool force_collect' parameter to 'ggc_collect' into an 'enum ggc_collect mode'
      Add more self-tests for 'hash_map' with Value type with non-trivial constructor/destructor
      Make 'gcc/hash-map-tests.c:test_map_of_type_with_ctor_and_dtor_expand' work on 32-bit architectures [PR101959]
      Fix up 'gcc.dg/pr78213.c' for '--enable-checking=release' etc.
      Make the OpenMP 'error' directive work for nvptx offloading
      Allow matching Intel MIC in OpenMP 'declare variant'
      Add 'libgomp.c/address-space-1.c'
      [OMP] Standardize on 'omp_privatize_by_reference'
      Fix 'OMP_CLAUSE_TILE' operands handling in 'gcc/tree.c:walk_tree_1'
      Simplify 'gcc/tree.c:walk_tree_1' handling of 'OMP_CLAUSE'
      'libgomp.c/target-43.c': '-latomic' for nvptx offloading
      Fix 'dg-do run' syntax in 'c-c++-common/auto-init-padding-{2,3}.c'
      Simplify 'gcc/diagnostic-spec.h:nowarn_map' setup
      Clarify 'key_type_t' to 'location_t' as used for 'gcc/diagnostic-spec.h:nowarn_map'
      Don't maintain a warning spec for 'UNKNOWN_LOCATION'/'BUILTINS_LOCATION' [PR101574]
      Add OpenACC 'host_data' testing to 'gfortran.dg/goacc/unexpected-end.f90'
      Fix 'hash_table::expand' to destruct stale Value objects
      Don't record string concatenation data for 'RESERVED_LOCATION_P'
      Evaluate 'random ()' to '0' in 'pass_omp_oacc_neuter_broadcast'
      Further test case adjustment re "Fortran: Fix assumed-size to assumed-rank passing"
      'gfortran.dg/assumed_rank_22_aux.c' messages printed vs. DejaGnu
      Fix 'contrib/update-copyright.py': 'TypeError: exceptions must derive from BaseException'
      Fix 'Copyright (C) 2020-21' into '2020-2021'
      Get rid of infinite recursion for 'typedef' used with GTY-marked 'gcc/diagnostic-spec.h:nowarn_map' [PR101204, PR103157]
      Generalize 'gcc/input.h:struct location_hash'
      Restore 'GOMP_OPENACC_DIM' environment variable parsing
      Use 'location_hash' for 'seen_locations' in 'gcc/profile.c:branch_prob'
      Use 'location_hash' for 'gcc/diagnostic-spec.h:nowarn_map'
      Restore previous OpenACC implicit data clauses ordering [PR103244]
      Reduce scope of a few 'class loop *loop' variables
      Consolidate OpenACC "gang reduction on an orphan loop" checking
      [OpenACC] Remove erroneous "Orphan reductions cannot have gang partitioning" handling
      Make sure that we get unique test names if several DejaGnu directives refer to the same line [PR102735]
      Adjust 'gfortran.dg/goacc/privatization-1-*' [PR103576, PR103697]
      testsuite: Be more informative for ICEs
      Enhance OpenACC 'kernels' decomposition testing
      OpenACC 'kernels' decomposition: Mark variables used in synthesized data clauses as addressable [PR100280]
      Host and offload targets have no common meaning of address spaces
      Document current '-Wuninitialized'/'-Wmaybe-uninitialized' diagnostics for OpenACC test cases
      Document current '-Wuninitialized' diagnostics for 'libgomp.oacc-fortran/routine-10.f90' [PR102192]
      Merge 'c-c++-common/goacc/routine-6.c' into 'c-c++-common/goacc/routine-5.c', and document current C/C++ difference
      Improve Intel MIC offloading XFAILing for 'omp_get_device_num'
      Extend test cases for references in OpenACC 'private' clauses
      Strengthen a few OpenACC test cases
      Revert "Fix PR 67102: Add libstdc++ dependancy to libffi" [PR67102]
      Fix OpenACC gang-redundant execution in 'libgomp.oacc-fortran/privatized-ref-2.f90'
      Further simplify 'gcc/omp-oacc-neuter-broadcast.cc:record_field_map_t'
      Get rid of 'gcc/omp-oacc-neuter-broadcast.cc:oacc_build_component_ref'
      Update 'c-c++-common/goacc/classify-*', 'gfortran.dg/goacc/classify-*'
      Add 'c-c++-common/goacc/kernels-decompose-pr104132-1.c' [PR104132]
      Add 'c-c++-common/goacc/kernels-decompose-pr104133-1.c' [PR104133]
      Catch 'GIMPLE_DEBUG' misbehavior in OpenACC 'kernels' decomposition [PR100400, PR103836, PR104061]
      Add diagnostic: "note: OpenACC 'kernels' decomposition: variable '[...]' declared in block made addressable" [PR100280]
      OpenACC 'kernels' decomposition: Move 'TREE_ADDRESSABLE' setting into OMP lowering [PR100280]
      OMP lowering: Regimplify 'OMP_CLAUSE_MAP_DECL_MAKE_ADDRESSABLE' DECLs [PR100280, PR104132, PR104133]
      Test '-fopt-info-omp-all' in 'libgomp.oacc-*/kernels-private-vars-*'
      Test 'libgomp.oacc-*/kernels-private-vars-*' with '--param=openacc-kernels=decompose' [PR104784]
      Fix 'libgomp.oacc-c-c++-common/kernels-decompose-1.c' expected diagnostics
      Enhance further testcases to verify handling of OpenACC privatization level [PR90115]
      Add 'gfortran.dg/goacc-gomp/pr102330-{1,2,3}.f90' [PR102330]
      Add 'c-c++-common/goacc/kernels-decompose-pr104774-1.c' [PR104774]
      [OpenACC privatization] Analyze 'lookup_decl'-translated DECL [PR90115, PR102330, PR104774]
      Add 'gcc/tree.cc:user_omp_clause_code_name' [PR65095]
      Add 'c-c++-common/goacc/kernels-decompose-pr104086-1.c' [PR104086]
      OpenACC 'kernels' decomposition: Mark variables used in 'present' clauses as addressable [PR100280, PR104086]
      Enhance further testcases to verify handling of OpenACC privatization level [PR90115]
      OpenACC 'kernels' decomposition: wrong-code cases unless manually making certain variables addressable [PR104892]
      OpenACC 'kernels' decomposition: resolve wrong-code cases unless manually making certain variables addressable [PR100280, PR104892]
      OpenACC privatization diagnostics vs. 'assert' [PR102841]
      Enhance further testcases to verify handling of OpenACC privatization level [PR90115]
      Enhance further testcases to verify Openacc 'kernels' decomposition
      Remove mysterious '-# Defining these options here in addition to common.opt is necessary' command-line option
      options: Fix 'enabledby_negargs' typo in 'LangEnabledBy' option property diagnostics
      options: Remove 'gcc/c-family/c.opt:Warray-bounds' option definition record
      options: Remove 'gcc/c-family/c.opt:Wuse-after-free' option definition record
      options, '-Wc++[...]-extensions': Remove undefined one-argument 'LangEnabledBy' option properties
      options: Improve 'LangEnabledBy' option property diagnostics
      options: Fix "Multiple different help strings" error diagnostic
      options: Clarifications around option definition records' help texts
      Move 'libgomp/plugin/cuda/cuda.h' to 'include/cuda/cuda.h'
      Revert "[nvptx] Fix ASM_SPEC workaround for sm_30"
      Revert "[nvptx] Use --no-verify for sm_30"
      Let nvptx-as figure out the target architecture [PR97348]
      GCN: Make "gang-private data-share memory exhausted" error more verbose
      Fix up 'libgomp.oacc-fortran/print-1.f90' GCN offloading compilation [PR104717]

Thomas W Rodgers (1):
      libstdc++: Make atomic notify_one and notify_all non-const

Tiezhu Yang (1):
      rename floatformat_ia64_quad_{big, little} to floatformat_ieee_quad_{big, little}

Tim Adye (1):
      libstdc++: Optimize std::any_cast by replacing indirect call

Timm Bäder (1):
      libstdc++: Fix filenames in Doxygen @file comments

Tobias Burnus (143):
      Fortran/OpenMP: Add 'omp depobj' and 'depend(mutexinoutset:'
      libgomp/testsuite: Fix checks for dg-excess-errors
      libgomp.fortran/depobj-1.f90: Fix omp_depend_kind
      gfortran.dg/pr68078.f90: Avoid increasing RLIMIT_AS
      testsuite/substr_{9,10}.f90: Move to gfortran.dg/
      OpenACC: Fix pattern in dg-bogus in Fortran testcases
      OpenACC: Fix pattern in dg-bogus in Fortran testcases again
      offload-defaulted: Config option to silently ignore uninstalled offload compilers
      doc/install.texi: Document --enable-offload-defaulted config option
      Fortran/OpenMP: Fix var-list expr parsing with array/dt
      Fortran: Async I/O - avoid unlocked unlocking [PR100352]
      OpenMP/Fortran - fix pasto + testcase in depobj [PR100397]
      OpenMP: Support complex/float in && and || reduction
      g++.dg/gomp/clause-3.C: Fix - missing in r12-438-g1580fc7 [PR100422]
      libgfortran/intrinsics/chmod.c: Silence unused var warning
      OpenMP: Fix SIMT for complex/float reduction with && and ||
      contrib/gcc-changelog: Detect if same file appears twice
      contrib/gcc-changelog: Add/improve --help
      OpenMP: detach - fix firstprivate handling
      Fortran/OpenMP: Handle implicit SAVE for variables in main
      Fortran/OpenMP: Support 'omp parallel master'
      OpenMP/Fortran: Reject nonintrinsic assignments in OMP WORKSHARE [PR100633]
      gcc/configure.ac: Fix cross build by using $(CFLAGS-$@) [PR100598]
      Fortran/OpenMP: Add missing EXEC_OMP_DEPOBJ case val [PR100642]
      Testsuite/Fortran: gfortran.dg/pr96711.f90 - fix expected value for PowerPC [PR96983]
      Add 'libgomp.oacc-fortran/privatized-ref-2.f90'
      fortran/intrinsic.texi: Use proper variable name
      OpenMP/Fortran: Handle polymorphic scalars in data-sharing FIRSTPRIVATE [PR86470]
      fortran/intrinsic.texi: Fix copy'n'paste errors and typos
      OpenMP: Add iterator support to Fortran's depend; add affinity clause
      gfortran.dg/gomp/depend-iterator-{1,2}.f90: Use dg-do compile
      Fortran/OpenMP: Support (parallel) master taskloop (simd) [PR99928]
      Fortran/OpenMP: Add gfortran.dg/gomp/taskloop-2.f90 [PR99928]
      Fortran/OpenMP: Add omp loop [PR99928]
      Fortran/OpenMP: omp loop's BIND clause - fix typo
      gfortran.dg/gomp/pr99928-*.f90: Use implicit none, remove one xfail
      gfortran.dg/gomp/pr99928-5.f90: Use proper iteration var
      Fortran: Fix OpenMP/OpenACC continue-line parsing
      Fortran/OpenMP: Fix -fdump-parse-tree for 'omp loop'
      OpenMP: Handle bind clause in tree-nested.c [PR100905]
      Fortran/OpenMP: Fix clause splitting for target/parallel/teams [PR99928]
      contrib/gcc-changelog: Check that PR in subject is in changelog
      Fortran: resolve.c - remove '*XCNEW' based nullifying
      C/C++: Fix unused set var warning with omp_clause_affinity [PR100913]
      Fortran/OpenMP: Extend defaultmap clause for OpenMP 5 [PR92568]
      contrib/mklog.py: Improve PR handling
      fortran/dump-parse-tree.c: Use proper enum type
      doc/invoke.texi: Sort flags in 'C Language Options'
      libgomp.fortran/defaultmap-8.f90: Fix non-shared memory handling
      Add 'default' to -foffload=; document that flag [PR67300]
      gcc.c: Silence warning in check_offload_target_name
      gcc.c's check_offload_target_name: Fixes to inform hints
      gcc.c: Add -foffload= to display_help
      Fortran: Fix bind(C) character length checks
      PR fortran/93308/93963/94327/94331/97046 problems raised by descriptor handling
      testsuite/lib/gfortran.exp: Add -I for ISO*.h [PR101305, PR101660]
      gfortran: Fix in-build-tree testing [PR101305, PR101660]
      OpenMP 5.1: Add proc-bind 'primary' support
      Fortran/OpenMP: Add support for OpenMP 5.1 masked construct
      [OpenMP] Update omp-low.c's omp_runtime_api_call [PR101931]
      Fortran: Implement OpenMP 5.1 scope construct
      Fortran/OpenMP: Add memory routines existing for C/C++
      Fortran: Add OpenMP's nothing directive support
      Fortran: Add OpenMP's nothing directive support (con't)
      Fortran: Add OpenMP's error directive
      c-format.c/Fortran: Support %wd / host-wide integer in gfc_error
      Fortran/OpenMP: strict modifier on grainsize/num_tasks
      Fortran/OpenMP: Improve duplicate errors
      libgomp.*/error-1.{c,f90}: Fix dg-output newline pattern
      Fortran: Fix Bind(C) char-len check, add ptr-contiguous check
      invoke.texi: Fix @opindex for -foffload-options
      libgomp.texi: Add OpenMP Implementation Status
      libgfortran: Makefile fix for ISO_Fortran_binding.h
      libgomp.texi: Extend OpenMP 5.0 Implementation Status
      Fortran: Add missing ST_OMP_END_SCOPE handling [PR102313]
      PowerPC: Fix rs6000-gen-builtins with build != host [PR102353]
      Fortran: Prefer GCC internal macros to float.h in ISO_Fortran_binding.h.
      Fortran/OpenMP: unconstrained/reproducible ordered modifier
      Fortran: Fix -Wno-missing-include-dirs handling [PR55534]
      Fortran: Add gfc_simple_for_loop aux function
      Fortran: Improve -Wmissing-include-dirs warnings [PR55534]
      Fortran: Handle allocated() with coindexed scalars [PR93834]
      Fortran: Improve file-reading error diagnostic [PR55534]
      Fortran: Fix associated intrinsic with assumed rank [PR101334]
      Fortran: Fix assumed-size to assumed-rank passing [PR94070]
      libgomp.oacc-fortran/privatized-ref-2.f90: Fix dg-note
      gfortran.dg/include_15.f90: Add dg-prune-output [PR102500]
      libgomp: Only check for 2*sizeof(void*) int type with Fortran [PR96661]
      openmp: Add omp_aligned_{,c}alloc and omp_{c,re}alloc for Fortran
      libgomp.fortran/alloc-*.f90: Add missing dg-prune-output
      Fortran: Fix same_type_as
      Add/update libgomp.fortran/alloc-*.f90
      Add libgomp.fortran/order-reproducible-*.f90
      Fortran: Avoid var initialization in interfaces [PR54753]
      gfortran.dg/gomp/pr43711.f90: Change dg-* for XFAIL->PASS
      Fortran: Fix deprecate warning with parameter
      Fortran: Various CLASS + assumed-rank fixed [PR102541]
      Fortran version of libgomp.c-c++-common/icv-{3,4}.c
      Fortran: dump-parse-tree.c fixes for OpenMP
      Fortran: Fix CLASS conversion check [PR102745]
      Fortran: Fix Bind(C) Array-Descriptor Conversion
      Fortran: Fix "str" to scalar descriptor conversion [PR92482]
      Fortran: Fix 'fn spec' for deferred character length
      gfortran.dg/bind-c-contiguous-5.c: Big-endian fix
      Fortran: Avoid running into assert with -fcheck= + UBSAN
      Fortran: Change XFAIL to PASS
      libgomp.oacc-c-c++-common/loop-gwv-2.c: Use __builtin_alloca
      Fortran: Fix character(len=cst) dummies with bind(C) [PR102885]
      Fortran: Fix 'select rank' for allocatables/pointers
      libcpp: Fix _Pragma expansion [PR102409]
      OpenMP: Add strictly nested API call check [PR102972]
      Fortran/openmp: Add support for 2 argument num_teams clause
      Fortran/openmp: Fix '!$omp end'
      Fortran: openmp: Add support for thread_limit clause on target
      Update GMP/MPFR/MPC/ISL version in contrib/download_prerequisites
      libgomp.texi: Update OMP_PLACES
      Fortran/OpenMP: Support most of 5.1 atomic extensions
      Fortran: Handle compare in OpenMP atomic
      For -foffload= suggest also 'disable' and 'default' [PR103644]
      libgomp/testsuite: Improve omp_get_device_num() tests
      libgomp.texi: Update OpenMP implementation status
      libgomp.fortran/allocate-1.f90: Minor cleanup
      libgomp.fortran/allocate-1.f90: Fix minor cleanup
      Fortran/OpenMP: Avoid ICE for invalid char array in omp atomic [PR104329]
      OpenMP/C++: Permit mapping classes with virtual members [PR102204]
      Fortran/OpenMP: Fix depend-clause handling
      Fortran/OpenMP: Fix depend-clause handling for c_ptr
      nvptx: Add -mptx=6.0
      nvptx: Add -misa=sm_70
      Fortran: Fix typos
      Fortran: Fix gfc_maybe_dereference_var [PR104430][PR99585]
      Fortran: Fix gfc_conv_gfc_desc_to_cfi_desc with NULL [PR104126]
      Fortran: Fix CLASS handling in SIZEOF intrinsic
      GCN: Implement __atomic_compare_exchange_{1,2} in libgcc [PR102215]
      Fortran: OpenMP/OpenACC avoid uninit access in size calc for mapping
      lto-plugin: Honor link_output_name for -foffload-objects file name
      texi + c-target.def: Fix typos
      Fortran/OpenMP: Improve associate-name diagnostic [PR103039]
      Fortran/OpenMP: Fix privatization of associated names
      LTO: Fixes for renaming issues with offload/OpenMP [PR104285]
      Fortran: Fix directory stat check for '.' [PR103560]
      doc/invoke.texi: Move @ignore block out of @gccoptlist [PR103533]
      OpenMP/Fortran: Fix EXIT in loop diagnostic [PR105242]

Tom Honermann (1):
      libstdc++: Declare std::c8rtomb and std::mbrtoc8 if provided by the C library

Tom Tromey (26):
      libcc1: use templates to unmarshall enums
      libcc1: use "override"
      libcc1: inline some simple methods
      libcc1: delete copy constructor and assignment operators
      libcc1: use variadic templates for "call"
      libcc1: use variadic templates for "rpc"
      libcc1: use std::vector when building function types
      libcc1: add deleter objects
      libcc1: add more uses of 'deleter'
      libcc1: use unique_ptr more
      libcc1: unify compiler handling
      libcc1: use foreach
      libcc1: use static_assert
      libcc1: share basic context code
      libcc1: share GDB plugin code
      libcc1: use GCC_FE_VERSION_1 in C++ plugin
      libcc1: share the GCC interface code
      libcc1: fix a memory leak
      libcc1: use variadic templates for callbacks
      libcc1: avoid extra string copies
      libcc1: avoid a call to c_str
      libiberty: add htab_eq_string
      gcc: use htab_eq_string
      go: use htab_eq_string in godump
      [Ada] Document the SuSE kernel bug
      Remove --with-gmp-dir and --with-mpfr-dir

Tom de Vries (89):
      [omp, simt] Fix expand_GOMP_SIMT_*
      [omp, simt] Handle alternative IV
      [openmp, simt] Disable SIMT for user-defined reduction
      [nvptx] Add -mptx=3.1/6.3
      [nvptx] Handle memmodel for atomic ops
      [gcc/doc] Improve nonnull attribute documentation
      [nvptx] Add -mptx=7.0
      [nvptx] Improve gcc.target/nvptx/atomic_fetch-*.c test-cases
      [nvptx] Add gcc.target/nvptx/atomic-exchange-*.c test-cases
      [ldist] Don't add lib calls with -fno-tree-loop-distribute-patterns
      [libgomp, testsuite] Reduce recursion depth in declare_target-*.f90
      [libgomp, testsuite] Fix insufficient resources in test-cases
      [nvptx] Fix reduction lock
      [nvptx] Add some support for .local atomics
      [nvptx] Handle nop in prevent_branch_around_nothing
      [nvptx] Update bar.sync for ptx isa 6.0
      [nvptx] Update default ptx isa to 6.3
      [nvptx] Add bar.warp.sync
      [nvptx] Add uniform_warp_check insn
      [nvptx] Fix .local atomic regressions
      [testsuite] Require c99_runtime to run builtin-sprintf.c
      [nvptx] Fix 'main (int argc)' compilation
      [nvptx] Choose -mptx default based on -misa
      [nvptx] Unbreak build, add PTX_ISA_SM70
      [nvptx] Workaround sub.u16 driver JIT bug
      [nvptx] Handle pre-sm_7x shared atomic store using atomic exchange
      [nvptx] Handle sm_7x shared atomic store more optimal
      [nvptx] Handle asm insn in prevent_branch_around_nothing
      [testsuite] Require alloca support in a few tests
      [testsuite] Require non_strict_prototype in a few tests
      [nvptx] Use nvptx_warpsync / nvptx_uniform_warp_check for -muniform-simt
      [nvptx] Don't skip atomic insns in nvptx_reorg_uniform_simt
      [nvptx] Use _ as destination operand of atom.exch
      [nvptx] Initialize ptx regs
      [nvptx, testsuite] Remove mptx settings in gcc.target/nvptx tests
      [nvptx] Xfail sibcall execution tests
      [libgomp, testsuite, nvptx] Fix pr96390.c without CUDA
      [nvptx] Add -mptx-comment
      [libgomp, nvptx] Fix hang in gomp_team_barrier_wait_end
      [nvptx] Fix dummy location in gen_comment
      [nvptx] Add shf.{l,r}.wrap insn
      [nvptx] Add missing t-omp-device isas
      [libgomp, testsuite, nvptx] Add libgomp.c/declare-variant-3-sm*.c
      [nvptx, testsuite] Add -misa=sm_35 in nvptx/rotate.c
      [nvptx, testsuite] Add -misa=sm_30 in nvptx/uniform-simt-2.c
      [nvptx, testsuite] Add -misa=sm_30 in nvptx/atomic-store-3.c
      [nvptx] Add -mptx=_
      [nvptx, testsuite] Add -mptx=_ in nvptx.exp test-cases
      [libgomp, testsuite, nvptx] Add -mptx=_ in declare-variant-3-sm*.c
      [nvptx, testsuite] Add gcc.target/nvptx/sm*.c
      [nvptx] Add nvptx-sm.def
      [nvptx] Use nvptx-sm.def for t-omp-device
      [nvptx] Add nvptx-gen.h and nvptx-gen.opt
      [nvptx] Handle DCmode in define_expand "omp_simt_xchg_{bfly,idx}"
      [nvptx] Add -mptx=_ in gcc.target/nvptx/smxx.c
      [nvptx] Use --no-verify for sm_30
      [nvptx] Build libraries with misa=sm_30
      [nvptx] Build libraries with mptx=3.1
      [nvptx] Restore default to sm_30
      [nvptx] Add multilib mptx=3.1
      [nvptx] Use atom.and.b64 instead of atom.b64.and
      [nvptx] Use bit-bucket operand for atom insns
      [nvptx] Handle unused result in nvptx_unisimt_handle_set
      [nvptx] Disable warp sync in simt region
      [nvptx] Use no,yes for attribute predicable
      [openmp] Fix SIMT reduction using TRUTH_{AND,OR}IF_EXPR
      [openmp] Set location for taskloop stmts
      Fix "[openmp] Set location for taskloop stmts"
      [nvptx] Add warp sync at simt exit
      [nvptx] Use .alias directive for mptx >= 6.3
      [nvptx] Add mexperimental
      [nvptx] Limit HFmode support to mexperimental
      [nvptx] Use '%' as register prefix
      [libatomic] Fix return value in libat_test_and_set
      [libgomp, testsuite] Scale down some OpenACC test-cases
      [libgomp, testsuite] Fix hardcoded libexec in plugin/configfrag.ac
      [nvptx] Improve help description of misa and mptx
      [nvptx] Add march alias for misa
      [nvptx] Add march-map
      [nvptx] Update help text for m64
      [nvptx] Add __PTX_ISA_VERSION_{MAJOR,MINOR}__
      [nvptx, doc] Update misa and mptx, add march and march-map
      [nvptx, doc] Document predefined macros at march and mptx
      [nvptx] Fix ASM_SPEC workaround for sm_30
      [nvptx, testsuite] Fix typo in gcc.target/nvptx/march.c
      [nvptx, testsuite] Fix gcc.target/nvptx/alias-*.c on sm_80
      [libgomp, testsuite, nvptx] Fix dg-output test in vector-length-128-7.c
      [libgomp, testsuite, nvptx] Limit recursion in declare_target-{1,2}.f90
      [libgomp/testsuite] Fix libgomp.fortran/examples-4/declare_target-{1,2}.f90

Trevor Saunders (12):
      use range based for loops to iterate over vec<>
      auto_vec copy/move improvements
      return auto_vec from cgraph_node::collect_callers
      return auto_vec from get_loop_hot_path
      return auto_vec from get_dominated_by
      make get_domminated_by_region return a auto_vec
      return auto_vec from more dominance functions
      fix get-loop_hot_path with gcc 4.8.5
      use error_at and warning_at in cfgexpand.c
      use diagnostic location in diagnostic_report_current_function
      pass location to md_asm_adjust
      add myself to DCO section

Ulrich Drepper (1):
      Implement OpenMP 5.1 section 3.15: omp_display_env

Ulrich Weigand (1):
      MAINTAINERS: Remove Hartmut Penner as s390 maintainer

Uros Bizjak (101):
      i386: Fix unsigned int -> double conversion on i386 w/ -mfpmath=sse [PR100119]
      i386: Fix atomic FP peepholes [PR100182]
      i386: Reject -m96bit-long-double for 64bit targets [PR100041]
      i386: Cleanup comparison predicates.
      i386: Mark x86 masked load builtins pure [PR100312]
      i386: Optimize carry flag comparisons a bit
      i386: Introduce reversed ADC and SBB patterns [PR98060]
      i386: Implement integer vector compares for 64bit vectors [PR98218]
      i386: Do not emit mask compares for mode sizes < 16 [PR100445]
      i386: Implement mmx_pblendv to optimize SSE conditional moves [PR98218]
      i386: Force V2SI mode operands to registers in expand_sse_movcc
      i386: Implement FP vector compares for V2SFmode [PR98218]
      i386: Fix up V2SFmode vcond* with -mxop [PR100581]
      i386: Fix split_double_mode with paradoxical subreg [PR100626]
      i386: Fix <any_extend:insn>v4qiv4di2 expander
      i386: Implement 4-byte vector support [PR100637]
      i386: Allow 64bit vector modes in general registers
      i386: Add mult-high and shift patterns for 4-byte vectors [PR100637]
      i386: Avoid integer logic insns for 32bit and 64bit vector modes [PR100701]
      i386: Add minmax and abs patterns for 4-byte vectors [PR100637]
      i386: Add comparisons for 4-byte vectors [PR100637]
      i386: Add push insns for 4-byte vectors [PR100722]
      i386: Autovectorize 4-byte vectors
      i386: Add uavg_ceil patterns for 4-byte vectors [PR100637]
      i386: Add XOP comparisons for 4- and 8-byte vectors [PR100637]
      i386: Remove unneeded binary operand fixup from expanders.
      i386: Add insert and extract patterns for 4-byte vectors [PR100637]
      i386: Add init pattern for V2HI vectors [PR100637]
      i386: Convert a couple of predicates to use match_code RTXes.
      i386: Clean up constraints.md
      i386: Add init pattern for V4QI vectors [PR100637]
      i386: Do not emit segment overrides for %p and %P [PR100936]
      i386: Try to avoid variable permutation instruction [PR101021]
      i386: Improve variable permutation insn avoidance [PR101021]
      i386: Split V2HImode *punpckwd to SSE instruction [PR101058]
      ii386: Add missing two element 64bit vector permutations [PR89021]
      i386: Add variable vec_set for 64bit vectors [PR97194]
      i386: Prevent unwanted combine from LZCNT to BSR [PR101175]
      i386: Add PPERM two-operand 64bit vector permutation [PR89021]
      i386: Add pack/unpack patterns for 64bit vectors [PR89021]
      i386: Add V2SFmode vec_addsub pattern [PR95046]
      i386: Add integer nabs instructions [PR101044]
      Change the type of predicates to bool.
      Return true/false instead of 1/0 from generic predicates.
      i386: Return true/false instead of 1/0 from predicates.
      i386: Implement 4-byte vector (V4QI/V2HI) constant permutations
      i386: Add variable vec_set for 32bit vectors [PR97194]
      i386: Add pack/unpack patterns for 32bit vectors [PR100637]
      i386: Fix *udivmodsi4_pow2_zext_? patterns
      Change the type of memory classification functions to bool
      i386: Fix vec_set<mode> expanders [PR101424]
      i386: Fix ix86_hard_regno_mode_ok for TDmode on 32bit targets [PR101346]
      i386: Remove atomic_storedi_fpu and atomic_loaddi_fpu peepholes [PR100182]
      i386: Fix conditional move reg-to-reg move elimination peepholes [PR101797]
      i386: Name V2SF logic insns [PR101812]
      [i386] Introduce scalar version of avx512f_vmscalef.
      [i386] Set all_regs to true in the call to replace_rtx [PR102057]
      [i386] Call force_reg unconditionally.
      [i386] Change ix86_decompose_address return type to bool.
      i386: Eliminate sign extension after logic operation [PR89954]
      i386: Improve workaround for PR82524 LRA limitation [PR85730]
      i386: Fix ICE in ix86_print_opreand_address [PR 102761]
      testsuite: Adjust pr22076.c to avoid compile-time optimization [PR102840]
      i386: Introduce LEGACY_SSE_REGNO_P predicate
      i386: Redefine indirect_thunks_used as HARD_REG_SET.
      i386: Fix and improve movhi_internal and movhf_internal some more.
      i386: Improve V8HI and V8HF inserts [PR102811]
      i386: Implement VxHF vector set/insert/extract with lower ABI levels
      i386: Enable VxHF vector modes lower ABI levels [PR103571]
      i386: Fix <sse2p4_1>_pinsr<ssemodesuffix> and its splitters [PR103772]
      i386: Add V2SFmode DIV insn pattern [PR95046, PR103797]
      testsuite: Avoid unwanted vecorization [PR95046]
      i386: Robustify some expanders w.r.t. paradoxical SUBREGs
      testsuite: XFAIL some Wstringop-overflow tests ...
      i386: Introduce V2QImode vectorized arithmetic [PR103861]
      i386: Always enable mov<V_32:mode> patterns [PR103894]
      i386: Introduce V2QImode vectorized logic [PR103861]
      i386: Fix expand_vec_perm_pshufb for narrow modes [PR103905]
      i386: Fix type of one_cmplv2qi2 alternatives 1,2 [PR103915]
      i386: Introduce V2QImode minmax, abs and uavgv2hi3_ceil [PR103861]
      i386: Improve HImode interunit moves
      i386: Robustify V2QI and V4QI move patterns
      tree-optimization/103948 - detect vector vec_cmp in expand_vector_condition
      i386: Introduce V2QImode vector compares [PR103861]
      i386: Introduce V2QImode vector cmove for -msse4.1 [PR103861]
      i386: Add CC clobber and splits for 32-bit vector mode logic insns [PR100673, PR103861]
      testsuite: Compile g++.dg/vect/slp-pr98855.cc only for x86 targets [PR103935]
      testsuite: Compile gcc.target/i386/pr103861-3.c with -fno-vect-cost-model [PR103941]
      ii386: Add 16-bit vector modes to xop_pcmov [PR104003]
      i386: Cleanup V2QI arithmetic instructions
      i386: Introduce V2QImode vectorized shifts [PR103861]
      i386: Mark some of strict_low_part insn constraints earlyclobbered
      libstdc++: Fix 22_locale/numpunct/members/char/3.cc execution test
      i386: Improve and optimize ix86_expand_sse_movcc
      testsuite: Fix gfortran.dg/ieee/signaling_?.f90 tests for x86 targets
      i386: Do not use %ecx DRAP for functions that use __builtin_eh_return [PR104362]
      i386: Force inputs to a register to avoid lowpart_subreg failure [PR104458]
      i386: -mno-xsave should disable all relevant ISA flags [PR104462]
      i386: Fix vec_unpacks_float_lo_v4si operand constraint [PR104469]
      i386: Skip decimal float vector modes in type_natural_mode [PR79754]
      i386: Fix movv2qi_internal xmm reg to xmm reg move for AVX512FP16 [PR105139]

Vadim Godunko (1):
      [Ada] Fix operations on Unbounded_String...

Vincent Lefevre (1):
      Update pathname for IBM long double description.

Vincent Lefèvre (1):
      gcov: check return code of a fclose

Vineet Gupta (1):
      RISC-V: Inhibit FP <--> int register moves via tune param

Vladimir N. Makarov (16):
      Make profitability calculation of RA conflict presentations independent of host compiler type sizes. [PR102147]
      [PR102627] Use at least natural mode during splitting hard reg live range
      [PR102842] Consider all outputs in generation of matching reloads
      [PR103437] Process multiplication overflow in priority calculation for allocno assignments
      [PR103437] Use long long multiplication as backup for overflow processing
      [PR103437] Make backup code for overflow conditional
      [PR99531] Modify pseudo class cost calculation when processing move involving the pseudo and a hard register
      [PR99531] Do not scan push insn for ia32 in the test
      [PR103676] LRA: Calculate and exclude some start hard registers for reload pseudos
      [PR104400] LRA: Modify exclude start hard register calculation for insn alternative
      [PR104447] LRA: Do not split non-alloc hard regs.
      [PR104637] LRA: Split hard regs as many as possible on one subpass
      [PR103074] LRA: Check new conflicts when splitting hard reg live range.
      [PR104961] LRA: split hard reg for reload pseudo with clobber.
      [PR104971] LRA: check live hard regs to remove a dead insn
      [PR105032] LRA: modify loop condition to find reload insns for hard reg splitting

Wang Liushuai (1):
      Do not load the thunk symbols.

Wilco Dijkstra (7):
      AArch64: Cleanup aarch64_classify_symbol
      AArch64: Enable fast shifts on Neoverse N1
      AArch64: Add support for __builtin_roundeven[f] (PR100966)
      AArch64: Enable fast shifts on Neoverse V1/N2
      AArch64: Tune case-values-threshold
      AArch64: Improve GOT addressing
      AArch64: Fix PR103085

Will Wray (1):
      c++: designated init of char array by string constant [PR55227]

Xi Ruoyao (28):
      testsuite: add -fwrapv for 950704-1.c
      testsuite: avoid no-stack-protector-attr-3 fail on mips*-*-*
      fixinc: don't "fix" machine names in __has_include(...) [PR91085]
      MAINTAINERS: Add myself for write after approval
      mips: check MSA support for vector modes [PR100760,PR100761,PR100762]
      testsuite: mips: use noinline attribute instead of -fno-inline
      Revert "testsuite: mips: use noinline attribute instead of -fno-inline"
      testsuite: mips: pass -finline/-fnoinline through
      ipa-devirt: check precision mismatch of enum values [PR101396]
      mips: add MSA vec_cmp and vec_cmpu expand pattern [PR101132]
      mips: Fix up mips_atomic_assign_expand_fenv [PR94780]
      mips: msa: truncate immediate shift amount [PR101922]
      fixincludes: simplify handling for access() failure [PR21283, PR80047]
      fixincludes: don't abort() on access failure [PR103306]
      fold-const: do not fold NaN result from non-NaN operands [PR95115]
      libgcc: fix a warning calling find_fde_tail
      mips: avoid signed overflow in LUI_OPERAND [PR104842]
      vect: fix out-of-bound access in supports_vec_convert_optab_p [PR 104851]
      libsanitizer: cherry-pick db7bca28638e from upstream
      Enable libsanitizer build on mips64
      mips: Emit psabi diagnostic for return values affected by C++ zero-width bit-field ABI change [PR 102024]
      mips: Ignore zero width fields in arguments and issue -Wpsabi warning about C zero-width field ABI changes [PR102024]
      mips: Fix an ICE caused by r12-7962
      mips: Fix C++14 vs. C++17 ABI incompatibility on mips64
      loongarch: testsuite: skip builtin-apply2.c
      loongarch: testsuite: adapt stack-usage-1.c for LP64
      mips: testsuite: enforce -ffat-lto-objects for pr102024-4.c
      loongarch: ignore zero-size fields in calling convention

Xionghu Luo (22):
      Run pass_sink_code once more before store_merging
      rs6000: Support doubleword swaps removal in rot64 load store [PR100085]
      rs6000: Fix test case failures by PR100085 [PR101020]
      rs6000: Expand fmod and remainder when built with fast-math [PR97142]
      rs6000: Remove unspecs for vec_mrghl[bhw]
      rs6000: Fix wrong code generation for vec_sel [PR94613]
      rs6000: Fold xxsel to vsel since they have same semantics
      rs6000: Optimize __builtin_shuffle when it's used to zero the upper bits [PR102868]
      Refactor loop_version
      Rename duplicate_loop_to_header_edge to duplicate_loop_body_to_header_edge
      rs6000: Fix incorrect fusion constraint [PR102991]
      Verbose support in analyze_brprob_spec
      rs6000: Replace UNSPECS with ss_plus/us_plus and ss_minus/us_minus
      Fix incorrect loop exit edge probability [PR103270]
      Fix loop split incorrect count and probability
      Don't move cold code out of loop by checking bb count
      Fix ICE in lsplit when built with -O3 -fno-guess-branch-probability [PR103793]
      loop-invariant: Don't move cold bb instructions to preheader in RTL
      testsuite: Fix regression on m32 by r12-6087 [PR103820]
      rs6000: powerpc suboptimal boolean test of contiguous bits [PR102239]
      rs6000: Add split pattern to replace
      Update email address

Yannick Moy (70):
      [Ada] Improve error message for ghost in predicate
      [Ada] Use spans instead of locations for compiler diagnostics
      [Ada] Fixes in the use of spans for error locations
      [Ada] Fix evaluation of expressions in inlined code
      [Ada] Add colors to GNATprove messages output to a terminal
      [Ada] Fix continuation message for missing ALL in access type
      [Ada] Use error marker for messages in GNATprove mode
      [Ada] Move match function for pragma Warnings to public spec
      [Ada] Minor tweak in pretty-printing of expressions
      [Ada] Generate warning for negative literal of a modular type
      [Ada] Clarify the semantics of signed intrinsic shift operations
      [Ada] Extend function to retrieve first/last nodes to all declarations
      [Ada] Do not generate an Itype_Reference node for slices in GNATprove mode
      [Ada] Adapt SPARK checking after change in rules regarding heap modeling
      [Ada] Adapt SPARK RM rule on non-effectively volatile abstract state
      [Ada] Missing space in error message for pattern matching
      [Ada] Fix precondition of Cot for code analyzers
      [Ada] Simplify handling of sure errors in GNATprove mode
      [Ada] Compute sizes when possible for packed array with Component_Size
      [Ada] Fix on computation of packed array size in case of error
      [Ada] Skip types in error for test to compute array size
      [Ada] Exception raised on empty file in GNATprove mode
      [Ada] Rename "optional" node subtypes that allow Empty
      [Ada] Fix obsolete comments/name referring to girder discriminants
      [Ada] Fix access to predicated parent in Itype
      [Ada] More precise analysis of function renamings in GNATprove
      [Ada] Fix infinite loop in compilation of illegal code
      [Ada] Add adequate guard before calling First_Rep_Item
      [Ada] Clarify parts of Ada.Strings.Unbounded in SPARK or not
      [Ada] Spurious error on deferred constant with predicate
      [Ada] Simplify contract of Ada.Strings.Fixed.Trim for proof
      [Ada] Minimize parts of Ada.Strings.Fixed marked SPARK_Mode => Off
      [Ada] Add Ada RM description of Ada.Strings.Bounded as comments in the spec
      [Ada] Mark Ada.Text_IO in SPARK
      [Ada] Proof of Ada.Characters.Handling
      [Ada] Proof of Ada.Strings.Maps
      [Ada] Improve error message on missing all/for in quantified expression
      [Ada] Improve error message on array aggregates
      [Ada] Issue warning on unused quantified expression
      [Ada] Provide dummy body for big integers library used in reduced runtimes
      [Ada] Proof of the runtime support for attribute 'Width
      [Ada] Issue error on invalid use of Ghost inside pragma Predicate
      [Ada] Fix support for prefixed call with incomplete type declarations
      [Ada] Complete support for prefixed call on subtypes/derived types
      [Ada] Better error message on missing parentheses
      [Ada] Create explicit ghost mirror unit for big integers
      [Ada] Improve messages on incorrect state refinement in SPARK
      [Ada] Add query for extended precision floating-point types
      [Ada] Improve error messages for dot notation when -gnatX not used
      [Ada] Proof of Boolean'Image and Boolean'Value
      [Ada] Proof of System.Val_Util utilities for 'Value support
      [Ada] Proof of Interfaces.C with SPARK
      [Ada] Proof of support units for 'Width on signed integers
      [Ada] Add pragma Annotate for CodePeer analysis
      [Ada] Amend proof of System.Arith_Double to remove justifications
      [Ada] Proof of System.Arith_32 for double arithmetic on 32bits
      [Ada] Fix lemma in generic unit System.Arith_Double
      [Ada] Rename parameter-dependent constants in generic unit
      [Ada] Proof of runtime units for integer exponentiation (checks off)
      [Ada] Proof of runtime units for integer exponentiation (checks on)
      [Ada] Add contracts for the proof of System.Arith_128
      [Ada] Proof of runtime units for binary modular exponentiation
      [Ada] Proof of runtime unit for non-binary modular exponentiation
      [Ada] Justify false positive message from CodePeer analysis of GNAT
      [Ada] Proof of System.Generic_Array_Operations at silver level
      [Ada] Proof of System.Vectors.Boolean_Operations
      [Ada] Adapt ghost code to maintain proof
      [Ada] Proof of unit System.Case_Util
      [Ada] Recover proof of Ada.Strings.Fixed with assertions
      [Ada] Adapt proof of System.Arith_Double

YiFei Zhu (2):
      bpf: align function entry point to 64 bits
      bpf: allow BSS symbols to be global symbols

Yoshinori Sato (1):
      sh-linux fix target cpu

YunQiang Su (10):
      MIPS: use N64 ABI by default if the triple end with -gnuabi64
      libffi: Fix MIPS r6 support
      MIPS: use mips_isa enum instead hardcoded numbers
      MIPS: add .module mipsREV to all output asm file
      md/define_c_enum: support value assignation
      MAINTAINERS: Add YunQiang Su for write after approval
      Revert "MIPS: add .module mipsREV to all output asm file"
      MIPS: add .module arch and ase to all output asm
      MIPS: R6: load/store can process unaligned address
      MIPS: IPL is 8bit in Cause and Status registers if TARGET_MCU

Zhao Wei Liew (1):
      match.pd: Simplify 1 / X for integer X [PR95424]

chenglulu (13):
      LoongArch Port: Regenerate configure
      LoongArch Port: gcc build
      LoongArch Port: Regenerate gcc/configure.
      LoongArch Port: Machine description files.
      LoongArch Port: Machine description C files and .h files.
      LoongArch Port: Builtin functions.
      LoongArch Port: Builtin macros.
      LoongArch Port: libgcc
      LoongArch Port: Regenerate libgcc/configure.
      LoongArch Port: libgomp
      LoongArch Port: gcc/testsuite
      LoongArch Port: Add doc.
      LoongArch: Fix bug for tmpdir-g++.dg-struct-layout-1/t033.

dianhong xu (5):
      AVX512FP16: Support load/store/abs intrinsics.
      AVX512FP16: Add reduce operators(add/mul/min/max).
      AVX512FP16: Add complex conjugation intrinsic instructions.
      AVX512FP16: Add permutation and mask blend intrinsics.
      AVX512FP16: Add *_set1_pch intrinsics.

imba-tjd (1):
      Fix doc/typo

konglin1 (8):
      i386: Fix _mm512_fpclass_ps_mask in O0 [PR 101471]
      i386: Fix wrong optimization for consecutive masked scatters [PR 101472]
      Combine the FADD(A, FMA(B, C, 0)) to FMA(B, C, A) and combine FADD(A, FMUL(B, C)) to FMA(B, C, A).
      i386: Optimization for mm512_set1_pch.
      i386: Support complex fma/conj_fma for _Float16.
      i386: add alias for f*mul_*ch intrinsics
      i386: vcvtph2ps and vcvtps2ph should be used to convert _Float16 to SFmode with -mf16c [PR 102811]
      i386: Enable intrinsics that convert float and bf16 data to each other.

liuhongt (189):
      MASK_AVX256_SPLIT_UNALIGNED_STORE/LOAD should be cleared in opts->x_target_flags when X86_TUNE_AVX256_UNALIGNED_LOAD/STORE_OPTIMAL is enabled by target attribute.
      Add folding and remove expanders for x86 *pcmp{et,gt}* builtins [PR target/98911]
      i386: Optimize vpblendvb on inverted mask register to vpblendvb on swapping the order of operand 1 and operand 2. [PR target/99908]
      Optimize __builtin_shuffle when it's used to zero the upper bits of the dest. [PR target/94680]
      Fix typo in testcase.
      Fix ICE [PR target/100549]
      Fix ICE when lhs is NULL.
      Extend is_cond_scalar_reduction to handle nop_expr after/before scalar reduction.[PR98365]
      CALL_INSN may not be a real function call.
      Fix _mm256_zeroupper by representing the instructions as call_insns in which the call has a special vzeroupper ABI.
      Fix ICE of insn does not satisfy its constraints.
      MAINTAINERS: Add myself as maintainer of the i386 vector extensions.
      Disparage slightly the mask register alternative for bitwise operations.
      Fix ICE for vpexpand*.
      Optimize vpexpand* to mask mov when mask have all ones in it's lower part (including 0 and -1).
      Add vect_recog_popcount_pattern to handle mismatch between the vectorized popcount IFN and scalar popcount builtin.
      Remove my Write After Approval entry.
      i386: Add vashlm3/vashrm3/vlshrm3 to enable vectorization of vector shift vector. [PR98434]
      Revert x86_order_regs_for_local_alloc changes in r12-1669.
      Fold blendv builtins into gimple.
      For 128/256-bit vec_cond_expr, When mask operands is lt reg const0_rtx, blendv can be used instead of avx512 mask.
      The upper bits of FIXUPIMMS{S,D} should come from src1 not dest.
      Fix typo in standard pattern name of trunc<mode><pmov_dst_4>2.
      Remove xfail for pr92658-avx512vl.c
      Add avx512 tests for MADDSUB and FMSUBADD SLP vectorization patterns.
      Support logic shift left/right for avx512 mask type.
      Remove pass_cpb which is related to enable avx512 embedded broadcast from constant pool.
      Add the member integer_to_sse to processor_cost as a cost simulation for movd/pinsrd. It will be used to calculate the cost of vec_construct.
      Add a separate function to calculate cost for WIDEN_MULT_EXPR.
      Adjust/Refine testcases.
      Support cond_add/sub/mul/div for vector float/double.
      Add cond_add/sub/mul for vector integer modes.
      Support cond_{fma,fms,fnma,fnms} for vector float/double under AVX512.
      Add dg-require-effective-target for testcases.
      Refine predicate of peephole2 to general_reg_operand. [PR target/101743]
      Support cond_{smax,smin,umax,umin} for vector integer modes under AVX512.
      Support cond_{smax,smin} for vector float/double modes under AVX512.
      Support cond_{xor,ior,and} for vector integer mode under AVX512.
      Support cond_ashr/lshr/ashl for vector integer modes under AVX512.
      Extend ldexp{s,d}f3 to vscalefs{s,d} when TARGET_AVX512F and TARGET_SSE_MATH.
      Combine avx_vec_concatv16si and avx512f_zero_extendv16hiv16si2_1 to avx512f_zero_extendv16hiv16si2_2.
      Optimize __builtin_shuffle_vector.
      Fix ICE.
      Adjust testcase.
      Add x86 tune to enable v2df vector reduction by paddpd.
      Revert "Add the member integer_to_sse to processor_cost as a cost simulation for movd/pinsrd. It will be used to calculate the cost of vec_construct."
      Fix ICE.
      Disable slp in loop vectorizer when cost model is very-cheap.
      Optimize (a & b) | (c & ~b) to vpternlog instruction.
      Enable avx512 embedde broadcast for vpternlog.
      Adjust testcases to avoid new failures brought by r12-3108 when compiled w -march=cascadelake.
      Fold more shuffle builtins to VEC_PERM_EXPR.
      Make sure we're playing with integral modes before call extract_integral_bit_field.
      Unify UNSPEC_MASKED_EQ/GT to the form of UNSPEC_PCMP.
      Revert "Make sure we're playing with integral modes before call extract_integral_bit_field."
      Get rid of all float-int special cases in validate_subreg.
      Update hf soft-fp from glibc.
      Enable _Float16 type for TARGET_SSE2 and above.
      libgcc: Enable hfmode soft-sf/df/xf/tf extensions and truncations.
      Remove macro check for __AMX_BF16/INT8/TILE__ in header file.
      Explicitly add -msse2 to compile HF related libgcc source file.
      Avoid FROM being overwritten in expand_fix.
      Adjust the wording for x86 _Float16 type.
      Support -fexcess-precision=16 which will enable FLT_EVAL_METHOD_PROMOTE_TO_FLOAT16 when backend supports _Float16.
      AVX512FP16: Support vector init/broadcast/set/extract for FP16.
      AVX512FP16: Add testcase for vector init and broadcast intrinsics.
      AVX512FP16: Add ABI test for ymm.
      AVX512FP16: Add abi test for zmm
      Compile __{mul,div}hc3 into libgcc_s.so.1.
      Optimize vec_extract for 256/512-bit vector when index exceeds the lower 128 bits.
      Optimize v4sf reduction.
      AVX512FP16: Add vaddph/vsubph/vdivph/vmulph.
      AVX512FP16: Add testcase for vaddph/vsubph/vmulph/vdivph.
      Remove copysign post_reload splitter for scalar modes.
      AVX512FP16: Add testcase for vaddsh/vsubsh/vmulsh/vdivsh.
      AVX512FP16: Add vmaxph/vminph/vmaxsh/vminsh.
      AVX512FP16: Add testcase for vmaxph/vmaxsh/vminph/vminsh.
      AVX512FP16: Add vcmpph/vcmpsh/vcomish/vucomish.
      AVX512FP16: Add testcase for vcmpph/vcmpsh/vcomish/vucomish.
      Revert "Get rid of all float-int special cases in validate_subreg."
      [i386] Remove UNSPEC_{COPYSIGN,XORSIGN}.
      Use gen_lowpart_if_possible instead of gen_lowpart to avoid ICE.
      AVX512FP16: Add vsqrtph/vrsqrtph/vsqrtsh/vrsqrtsh.
      AVX512FP16: Add testcase for vsqrtph/vsqrtsh/vrsqrtph/vrsqrtsh.
      AVX512FP16: Add vrcpph/vrcpsh/vscalefph/vscalefsh.
      AVX512FP16: Add testcase for vrcpph/vrcpsh/vscalefph/vscalefsh.
      AVX512FP16: Add vreduceph/vreducesh/vrndscaleph/vrndscalesh.
      AVX512FP16: Add testcase for vreduceph/vreducesh/vrndscaleph/vrndscalesh.
      AVX512FP16: Add fpclass/getexp/getmant instructions.
      AVX512FP16: Add testcase for fpclass/getmant/getexp instructions.
      Output vextract{i,f}{32x4,64x2} for (vec_select:(reg:Vmode) idx) when byte_offset of idx % 16 == 0.
      Optimize for V{8,16,32}HFmode vec_set/extract/init.
      AVX512FP16: Add vmovw/vmovsh.
      AVX512FP16: Add testcase for vmovsh/vmovw.
      AVX512FP16: Add vcvtph2dq/vcvtph2qq/vcvtph2w/vcvtph2uw/vcvtph2uqq/vcvtph2udq
      AVX512FP16: Add testcase for vcvtph2w/vcvtph2uw/vcvtph2dq/vcvtph2udq/vcvtph2qq/vcvtph2uqq.
      AVX512FP16: Add vcvtuw2ph/vcvtw2ph/vcvtdq2ph/vcvtudq2ph/vcvtqq2ph/vcvtuqq2ph
      AVX512FP16: Add testcase for vcvtw2ph/vcvtuw2ph/vcvtdq2ph/vcvtudq2ph/vcvtqq2ph/vcvtuqq2ph.
      Check mask type when doing cond_op related gimple simplification.
      AVX512FP16: Add vcvtsh2si/vcvtsh2usi/vcvtsi2sh/vcvtusi2sh.
      AVX512FP16: Add testcase for vcvtsh2si/vcvtsh2usi/vcvtsi2sh/vcvtusi2sh.
      AVX512FP16: Add vcvttph2w/vcvttph2uw/vcvttph2dq/vcvttph2qq/vcvttph2udq/vcvttph2uqq
      AVX512FP16: Add testcase for vcvttph2w/vcvttph2uw/vcvttph2dq/vcvttph2udq/vcvttph2qq/vcvttph2uqq.
      AVX512FP16: Add vcvttsh2si/vcvttsh2usi.
      AVX512FP16: Add vcvtph2pd/vcvtph2psx/vcvtpd2ph/vcvtps2phx.
      AVX512FP16: Add testcase for vcvtph2pd/vcvtph2psx/vcvtpd2ph/vcvtps2phx.
      AVX512FP16: Add vcvtsh2ss/vcvtsh2sd/vcvtss2sh/vcvtsd2sh.
      AVX512FP16: Add testcase for vcvtsh2sd/vcvtsh2ss/vcvtsd2sh/vcvtss2sh.
      AVX512FP16: Add intrinsics for casting between vector float16 and vector float32/float64/integer.
      Support embedded broadcast for AVX512FP16 instructions.
      AVX512FP16: Add vfmaddsub[132,213,231]ph/vfmsubadd[132,213,231]ph.
      AVX512FP16: Add testcase for vfmaddsub[132,213,231]ph/vfmsubadd[132,213,231]ph.
      AVX512FP16: Add FP16 fma instructions.
      AVX512FP16: Add testcase for fma instructions
      AVX512FP16: Add testcase for fp16 bitwise operations.
      AVX512FP16: Add scalar fma instructions.
      AVX512FP16: Add testcase for scalar FMA instructions.
      Fix ICE in pass_rpad.
      AVX512FP16: Add vfcmaddcph/vfmaddcph/vfcmulcph/vfmulcph
      AVX512FP16: Add testcases for vfcmaddcph/vfmaddcph/vfcmulcph/vfmulcph.
      AVX512FP16: Add vfcmaddcsh/vfmaddcsh/vfcmulcsh/vfmulcsh.
      AVX512FP16: Add testcases for vfcmaddcsh/vfmaddcsh/vfcmulcsh/vfmulcsh.
      AVX512FP16: Add expander for sqrthf2.
      AVX512FP16: Add expander for ceil/floor/trunc/roundeven.
      AVX512FP16: Add expander for cstorehf4.
      Adjust testcase.
      Support 64bit fma/fms/fnma/fnms under avx512vl.
      AVX512FP16: Add expander for rint/nearbyinthf2.
      AVX512FP16: Add expander for fmahf4
      Remove storage only description for _Float16 w/o avx512fp16.
      Revert "Optimize v4sf reduction.".
      Support 128/256/512-bit vector plus/smin/smax reduction for _Float16.
      Relax condition of (vec_concat:M(vec_select op0 idx0)(vec_select op0 idx1)) to allow different modes between op0 and M, but have same inner mode.
      Enable auto-vectorization at O2 with very-cheap cost model.
      Support reduc_{plus,smax,smin,umax,min}_scal_v4hi.
      Simplify (_Float16) ceil ((double) x) to .CEIL (x) when available.
      Refine movhfcc.
      Adjust more testcases for O2 vectorization enabling.
      Adjust testcase for O2 vectorization enabling.
      Adjust testcase for O2 vectorization enabling
      Support reduc_{plus,smax,smin,umax,umin}_scal_v4qi.
      Adjust testcase for O2 vectorization[Wuninitialized]
      Adjust testcase for O2 vectorization.
      Simplify (_Float16) sqrtf((float) a) to .SQRT(a) when a is a _Float16 value.
      Enable vectorization for _Float16 floor/ceil/trunc/nearbyint/rint operations.
      Adjust testcase for O2 vect.
      Simplify (trunc)copysign((extend)a, (extend)b) to .COPYSIGN (a,b).
      Extend vternlog define_insn_and_split to memory_operand to enable more optimziation.
      [Gimple] Simplify (trunc)fma ((extend)a, (extend)b, (extend)c) to IFN_FMA (a,b, c).
      Add !HONOR_SNANS to simplifcation: (trunc)copysign((extend)a, (extend)b) to copysign (a, b).
      Update documentation for -ftree-loop-vectorize and -ftree-slp-vectorize which are enabled by default at -02.
      Simplify (trunc)MAX/MIN((extend)a, (extend)b) to MAX/MIN(a,b)
      Extend is_cond_scalar_reduction to handle bit_and/bit_xor/bit_ior.
      Improve integer bit test on __atomic_fetch_[or|and]_* returns
      Extend vpcmov to handle V8HF/V16HFmode under TARGET_XOP.
      Reduce cost of aligned sse register store.
      Don't allow mask/sse/mmx mov in TLS code sequences.
      Enhance optimize_atomic_bit_test_and to handle truncation.
      Fix typo in r12-5486.
      Fix regression introduced by r12-5536.
      Optimize _Float16 usage for non AVX512FP16.
      Fix ICE in ix86_attr_length_immediate_default.
      Prefer INT_SSE_REGS for SSE_FLOAT_MODE_P in preferred_reload_class.
      Fix ICE. [PR103682]
      Optimize bit_and op1 float_vector_all_ones_operands to op1.
      Combine vpcmpuw + zero_extend to vpcmpuw.
      Force_reg operand 1.
      Optimize V16HF vector insert to element 0 for AVX2.
      Support commutative alternative for AVX512 vpcmpeq{b,w,d,q}
      Allow propagations from inner loop to outer loop.
      Fix ICE of unrecognizable insn. [PR target/104001]
      Adjust testcase for --target_board='unix{-m64\ -march=cascadelake}'
      Enhance vec_pack_trunc for integral mode mask.
      Don't propagate for a more expensive reg-reg move.
      ICE: QImode(not SImode) operand should be passed to gen_vec_initv16qiqi in ashlv16qi3.
      Add single_use to simplification (uncond_op + vec_cond -> cond_op).
      Add vect_recog_cond_expr_convert_pattern.
      Clean up MPX-related bit_{MPX,BNDREGS,BNDCSR}.
      Restrict the two sources of vect_recog_cond_expr_convert_pattern to be of the same type when convert is extension.
      Fix typo in <code>v1ti3.
      Optimize v4si broadcast for noavx512vl.
      Don't fold builtin into gimple when isa mismatches.
      Don't fold __builtin_ia32_blendvpd w/o sse4.2.
      Refine HImode movement for "v" to "v".
      Extend splitter pattern to reversed condition by swapping then and else rtx. [PR target/104982]
      Fix ICE caused by NULL_RTX returned by lowpart_subreg.
      Fix typo in vec_setv8hi_0.
      Split vector load from parm_del to elemental loads to avoid STLF stalls.
      Refine and/ior/xor/andn masked patterns for V*HFmode.

marxin (1):
      gcov: Use system IO buffering

prathamesh.kulkarni (14):
      arm/PR66791: Replace calls to vtst builtin with it's boolean logic equivalent.
      arm/97906: Adjust neon_vca patterns to use GLTE instead of GTGE iterator.
      arm/66791: Replace builtins in vceq_* (a, b) with a == b.
      Add cscope.out to git ignore.
      arm/66791: Gate comparison in vca intrinsics on __FAST_MATH__.
      arm/98435: Missed optimization in expanding vector constructor.
      arm/66791: Replace builtins for unsigned and fp vmul_n intrinsics.
      arm/66791: Replace builtins in vld1.
      arm/66791: Replace builtins for vdup_n and vmov_n intrinsics.
      arm: Add check for arm_softfp_ok in pr98435.c.
      arm: Adjust test for soft fp targets.
      [gimple-isel] Remove redundant if condition.
      [sve] PR93183 - Add support for conditional neg.
      [sve] PR93183 - Add support for conditional neg.

qing zhao (3):
      Add -ftrivial-auto-var-init option and uninitialized variable attribute.
      testsuite: Fix gcc.target/i386/auto-init-* tests.
      Not add initialization for variables been initialized by FEs [PR102359]

qingzhe huang (1):
      c++: cv-qualified ref introduced by typedef [PR101783]

wangpc (1):
      C++: add type checking for static local vector variable in template

wwwhhhyyy (1):
      [i386] GLC tuning: Break false dependency for dest register.

