From 9bff75b8c36f00430f2e1846e3e695ff47adec4e Mon Sep 17 00:00:00 2001
From: "H.J. Lu" <hjl.tools@gmail.com>
Date: Fri, 1 Apr 2016 13:26:57 -0700
Subject: [PATCH 24/25] Support 128-bit constant store in 64-bit STV

We can load a 128-bit constant from memory and store it.

	* config/i386/i386.c (scalar_to_vector_candidate_p_64): Allow
	store from 128-bit constant.
	(scalar_chain_64::convert_insn): Handle store from 128-bit
	constant.
---
 gcc/config/i386/i386.c | 19 +++++++++++++++++++
 1 file changed, 19 insertions(+)

diff --git a/gcc/config/i386/i386.c b/gcc/config/i386/i386.c
index 16e5459..1e7ba13 100644
--- a/gcc/config/i386/i386.c
+++ b/gcc/config/i386/i386.c
@@ -2869,6 +2869,12 @@ timode_scalar_to_vector_candidate_p (rtx_insn *insn)
 	case REG:
 	  return true;
 
+	case CONST_WIDE_INT:
+	  /* For store from 128-bit constant, memory must be aligned
+	     or unaligned store is optimal.  */
+	  return (!misaligned_operand (dst, TImode)
+		  || TARGET_SSE_UNALIGNED_STORE_OPTIMAL);
+
 	case CONST_INT:
 	  return standard_sse_constant_p (src, TImode);
 	}
@@ -3759,6 +3765,19 @@ timode_scalar_chain::convert_insn (rtx_insn *insn)
       PUT_MODE (src, V1TImode);
       break;
 
+    case CONST_WIDE_INT:
+      if (NONDEBUG_INSN_P (insn))
+	{
+	  /* Since there are no instructions to store 128-bit constant,
+	     temporary register usage is required.  */
+	  rtx tmp = gen_reg_rtx (V1TImode);
+	  src = gen_rtx_CONST_VECTOR (V1TImode, gen_rtvec (1, src));
+	  src = validize_mem (force_const_mem (V1TImode, src));
+	  emit_conversion_insns (gen_rtx_SET (dst, tmp), insn);
+	  dst = tmp;
+	}
+      break;
+
     case CONST_INT:
       switch (standard_sse_constant_p (src, TImode))
 	{
-- 
2.8.1

